{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentcommand\n */\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\nimport { isDefault } from './utils';\nconst ALIGNMENT = 'alignment';\n/**\n * The alignment command plugin.\n *\n * @extends module:core/command~Command\n */\n\nexport default class AlignmentCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const firstBlock = first(this.editor.model.document.selection.getSelectedBlocks()); // As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n\n    this.isEnabled = !!firstBlock && this._canBeAligned(firstBlock);\n    /**\n     * A value of the current block's alignment.\n     *\n     * @observable\n     * @readonly\n     * @member {String} #value\n     */\n\n    if (this.isEnabled && firstBlock.hasAttribute('alignment')) {\n      this.value = firstBlock.getAttribute('alignment');\n    } else {\n      this.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n    }\n  }\n  /**\n   * Executes the command. Applies the alignment `value` to the selected blocks.\n   * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n   * the command will remove the attribute from the selected blocks.\n   *\n   * @param {Object} [options] Options for the executed command.\n   * @param {String} [options.value] The value to apply.\n   * @fires execute\n   */\n\n\n  execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const editor = this.editor;\n    const locale = editor.locale;\n    const model = editor.model;\n    const doc = model.document;\n    const value = options.value;\n    model.change(writer => {\n      // Get only those blocks from selected that can have alignment set\n      const blocks = Array.from(doc.selection.getSelectedBlocks()).filter(block => this._canBeAligned(block));\n      const currentAlignment = blocks[0].getAttribute('alignment'); // Remove alignment attribute if current alignment is:\n      // - default (should not be stored in model as it will bloat model data)\n      // - equal to currently set\n      // - or no value is passed - denotes default alignment.\n\n      const removeAlignment = isDefault(value, locale) || currentAlignment === value || !value;\n\n      if (removeAlignment) {\n        removeAlignmentFromSelection(blocks, writer);\n      } else {\n        setAlignmentOnSelection(blocks, writer, value);\n      }\n    });\n  }\n  /**\n   * Checks whether a block can have alignment set.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} block The block to be checked.\n   * @returns {Boolean}\n   */\n\n\n  _canBeAligned(block) {\n    return this.editor.model.schema.checkAttribute(block, ALIGNMENT);\n  }\n\n} // Removes the alignment attribute from blocks.\n// @private\n\nfunction removeAlignmentFromSelection(blocks, writer) {\n  for (const block of blocks) {\n    writer.removeAttribute(ALIGNMENT, block);\n  }\n} // Sets the alignment attribute on blocks.\n// @private\n\n\nfunction setAlignmentOnSelection(blocks, writer, alignment) {\n  for (const block of blocks) {\n    writer.setAttribute(ALIGNMENT, alignment, block);\n  }\n}","map":{"version":3,"names":["Command","first","isDefault","ALIGNMENT","AlignmentCommand","refresh","editor","locale","firstBlock","model","document","selection","getSelectedBlocks","isEnabled","_canBeAligned","hasAttribute","value","getAttribute","contentLanguageDirection","execute","options","doc","change","writer","blocks","Array","from","filter","block","currentAlignment","removeAlignment","removeAlignmentFromSelection","setAlignmentOnSelection","schema","checkAttribute","removeAttribute","alignment","setAttribute"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-alignment/src/alignmentcommand.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentcommand\n */\n\nimport { Command } from 'ckeditor5/src/core';\nimport { first } from 'ckeditor5/src/utils';\n\nimport { isDefault } from './utils';\n\nconst ALIGNMENT = 'alignment';\n\n/**\n * The alignment command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class AlignmentCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst firstBlock = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n\t\tthis.isEnabled = !!firstBlock && this._canBeAligned( firstBlock );\n\n\t\t/**\n\t\t * A value of the current block's alignment.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {String} #value\n\t\t */\n\t\tif ( this.isEnabled && firstBlock.hasAttribute( 'alignment' ) ) {\n\t\t\tthis.value = firstBlock.getAttribute( 'alignment' );\n\t\t} else {\n\t\t\tthis.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command. Applies the alignment `value` to the selected blocks.\n\t * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n\t * the command will remove the attribute from the selected blocks.\n\t *\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {String} [options.value] The value to apply.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst model = editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst value = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\t// Get only those blocks from selected that can have alignment set\n\t\t\tconst blocks = Array.from( doc.selection.getSelectedBlocks() ).filter( block => this._canBeAligned( block ) );\n\t\t\tconst currentAlignment = blocks[ 0 ].getAttribute( 'alignment' );\n\n\t\t\t// Remove alignment attribute if current alignment is:\n\t\t\t// - default (should not be stored in model as it will bloat model data)\n\t\t\t// - equal to currently set\n\t\t\t// - or no value is passed - denotes default alignment.\n\t\t\tconst removeAlignment = isDefault( value, locale ) || currentAlignment === value || !value;\n\n\t\t\tif ( removeAlignment ) {\n\t\t\t\tremoveAlignmentFromSelection( blocks, writer );\n\t\t\t} else {\n\t\t\t\tsetAlignmentOnSelection( blocks, writer, value );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether a block can have alignment set.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} block The block to be checked.\n\t * @returns {Boolean}\n\t */\n\t_canBeAligned( block ) {\n\t\treturn this.editor.model.schema.checkAttribute( block, ALIGNMENT );\n\t}\n}\n\n// Removes the alignment attribute from blocks.\n// @private\nfunction removeAlignmentFromSelection( blocks, writer ) {\n\tfor ( const block of blocks ) {\n\t\twriter.removeAttribute( ALIGNMENT, block );\n\t}\n}\n\n// Sets the alignment attribute on blocks.\n// @private\nfunction setAlignmentOnSelection( blocks, writer, alignment ) {\n\tfor ( const block of blocks ) {\n\t\twriter.setAttribute( ALIGNMENT, alignment, block );\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
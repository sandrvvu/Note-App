{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\n\nexport default class HtmlDataProcessor {\n  /**\n   * Creates a new instance of the HTML data processor class.\n   *\n   * @param {module:engine/view/document~Document} document The view document instance.\n   */\n  constructor(document) {\n    /**\n     * A DOM parser instance used to parse an HTML string to an HTML document.\n     *\n     * @member {DOMParser}\n     */\n    this.domParser = new DOMParser();\n    /**\n     * A DOM converter used to convert DOM elements to view elements.\n     *\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = new DomConverter(document, {\n      renderingMode: 'data'\n    });\n    /**\n     * A basic HTML writer instance used to convert DOM elements to an HTML string.\n     *\n     * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n     */\n\n    this.htmlWriter = new BasicHtmlWriter();\n  }\n  /**\n   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n   * to data format &mdash; in this case to an HTML string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} HTML string.\n   */\n\n\n  toData(viewFragment) {\n    // Convert view DocumentFragment to DOM DocumentFragment.\n    const domFragment = this.domConverter.viewToDom(viewFragment, document); // Convert DOM DocumentFragment to HTML output.\n\n    return this.htmlWriter.getHtml(domFragment);\n  }\n  /**\n   * Converts the provided HTML string to a view tree.\n   *\n   * @param {String} data An HTML string.\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n   */\n\n\n  toView(data) {\n    // Convert input HTML data to DOM DocumentFragment.\n    const domFragment = this._toDom(data); // Convert DOM DocumentFragment to view DocumentFragment.\n\n\n    return this.domConverter.domToView(domFragment);\n  }\n  /**\n   * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n   * and not processed during the conversion from the DOM to the view elements.\n   *\n   * The raw data can be later accessed by a\n   * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n   *\n   * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n   * be treated as raw data.\n   */\n\n\n  registerRawContentMatcher(pattern) {\n    this.domConverter.registerRawContentMatcher(pattern);\n  }\n  /**\n   * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n   * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n   *\n   * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n   * bloats the editor data with additional markup.\n   *\n   * This mode may be required by some features and will be turned on by them automatically.\n   *\n   * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n   */\n\n\n  useFillerType(type) {\n    this.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n  }\n  /**\n   * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n   * the provided data.\n   *\n   * @private\n   * @param {String} data\n   * @returns {DocumentFragment}\n   */\n\n\n  _toDom(data) {\n    // Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n    // will be preserved in the body collection.\n    // Do it only for data that is not a full HTML document.\n    if (!data.match(/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i)) {\n      data = `<body>${data}</body>`;\n    }\n\n    const document = this.domParser.parseFromString(data, 'text/html');\n    const fragment = document.createDocumentFragment();\n    const bodyChildNodes = document.body.childNodes;\n\n    while (bodyChildNodes.length > 0) {\n      fragment.appendChild(bodyChildNodes[0]);\n    }\n\n    return fragment;\n  }\n\n}","map":{"version":3,"names":["BasicHtmlWriter","DomConverter","HtmlDataProcessor","constructor","document","domParser","DOMParser","domConverter","renderingMode","htmlWriter","toData","viewFragment","domFragment","viewToDom","getHtml","toView","data","_toDom","domToView","registerRawContentMatcher","pattern","useFillerType","type","blockFillerMode","match","parseFromString","fragment","createDocumentFragment","bodyChildNodes","body","childNodes","length","appendChild"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t *\n\t * @param {module:engine/view/document~Document} document The view document instance.\n\t */\n\tconstructor( document ) {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis.domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = new DomConverter( document, { renderingMode: 'data' } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @member {module:engine/dataprocessor/htmlwriter~HtmlWriter}\n\t\t */\n\t\tthis.htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this.domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this.htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this.domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n\t * and not processed during the conversion from the DOM to the view elements.\n\t *\n\t * The raw data can be later accessed by a\n\t * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n\t *\n\t * @param {module:engine/view/matcher~MatcherPattern} pattern Pattern matching all view elements whose content should\n\t * be treated as raw data.\n\t */\n\tregisterRawContentMatcher( pattern ) {\n\t\tthis.domConverter.registerRawContentMatcher( pattern );\n\t}\n\n\t/**\n\t * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements\n\t * (`<span data-cke-filler=\"true\">&nbsp;</span>`) instead of regular `&nbsp;` characters.\n\t *\n\t * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but\n\t * bloats the editor data with additional markup.\n\t *\n\t * This mode may be required by some features and will be turned on by them automatically.\n\t *\n\t * @param {'default'|'marked'} type Whether to use the default or the marked `&nbsp;` block fillers.\n\t */\n\tuseFillerType( type ) {\n\t\tthis.domConverter.blockFillerMode = type == 'marked' ? 'markedNbsp' : 'nbsp';\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\t// Wrap data with a <body> tag so leading non-layout nodes (like <script>, <style>, HTML comment)\n\t\t// will be preserved in the body collection.\n\t\t// Do it only for data that is not a full HTML document.\n\t\tif ( !data.match( /<(?:html|body|head|meta)(?:\\s[^>]*)?>/i ) ) {\n\t\t\tdata = `<body>${ data }</body>`;\n\t\t}\n\n\t\tconst document = this.domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst bodyChildNodes = document.body.childNodes;\n\n\t\twhile ( bodyChildNodes.length > 0 ) {\n\t\t\tfragment.appendChild( bodyChildNodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,CAAwB;EACtC;AACD;AACA;AACA;AACA;EACCC,WAAW,CAAEC,QAAF,EAAa;IACvB;AACF;AACA;AACA;AACA;IACE,KAAKC,SAAL,GAAiB,IAAIC,SAAJ,EAAjB;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKC,YAAL,GAAoB,IAAIN,YAAJ,CAAkBG,QAAlB,EAA4B;MAAEI,aAAa,EAAE;IAAjB,CAA5B,CAApB;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKC,UAAL,GAAkB,IAAIT,eAAJ,EAAlB;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;;;EACCU,MAAM,CAAEC,YAAF,EAAiB;IACtB;IACA,MAAMC,WAAW,GAAG,KAAKL,YAAL,CAAkBM,SAAlB,CAA6BF,YAA7B,EAA2CP,QAA3C,CAApB,CAFsB,CAItB;;IACA,OAAO,KAAKK,UAAL,CAAgBK,OAAhB,CAAyBF,WAAzB,CAAP;EACA;EAED;AACD;AACA;AACA;AACA;AACA;;;EACCG,MAAM,CAAEC,IAAF,EAAS;IACd;IACA,MAAMJ,WAAW,GAAG,KAAKK,MAAL,CAAaD,IAAb,CAApB,CAFc,CAId;;;IACA,OAAO,KAAKT,YAAL,CAAkBW,SAAlB,CAA6BN,WAA7B,CAAP;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACCO,yBAAyB,CAAEC,OAAF,EAAY;IACpC,KAAKb,YAAL,CAAkBY,yBAAlB,CAA6CC,OAA7C;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACCC,aAAa,CAAEC,IAAF,EAAS;IACrB,KAAKf,YAAL,CAAkBgB,eAAlB,GAAoCD,IAAI,IAAI,QAAR,GAAmB,YAAnB,GAAkC,MAAtE;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;EACCL,MAAM,CAAED,IAAF,EAAS;IACd;IACA;IACA;IACA,IAAK,CAACA,IAAI,CAACQ,KAAL,CAAY,wCAAZ,CAAN,EAA+D;MAC9DR,IAAI,GAAI,SAASA,IAAM,SAAvB;IACA;;IAED,MAAMZ,QAAQ,GAAG,KAAKC,SAAL,CAAeoB,eAAf,CAAgCT,IAAhC,EAAsC,WAAtC,CAAjB;IACA,MAAMU,QAAQ,GAAGtB,QAAQ,CAACuB,sBAAT,EAAjB;IACA,MAAMC,cAAc,GAAGxB,QAAQ,CAACyB,IAAT,CAAcC,UAArC;;IAEA,OAAQF,cAAc,CAACG,MAAf,GAAwB,CAAhC,EAAoC;MACnCL,QAAQ,CAACM,WAAT,CAAsBJ,cAAc,CAAE,CAAF,CAApC;IACA;;IAED,OAAOF,QAAP;EACA;;AAhHqC"},"metadata":{},"sourceType":"module"}
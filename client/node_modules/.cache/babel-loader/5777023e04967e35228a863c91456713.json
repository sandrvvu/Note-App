{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class FocusObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = ['focus', 'blur'];\n    this.useCapture = true;\n    const document = this.document;\n    document.on('focus', () => {\n      document.isFocused = true; // Unfortunately native `selectionchange` event is fired asynchronously.\n      // We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n      // overwrite new DOM selection with selection from the view.\n      // See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n      // Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n      //\n      // Using `view.change()` instead of `view.forceRender()` to prevent double rendering\n      // in a situation where `selectionchange` already caused selection change.\n\n      this._renderTimeoutId = setTimeout(() => view.change(() => {}), 50);\n    });\n    document.on('blur', (evt, data) => {\n      const selectedEditable = document.selection.editableElement;\n\n      if (selectedEditable === null || selectedEditable === data.target) {\n        document.isFocused = false; // Re-render the document to update view elements\n        // (changing document.isFocused already marked view as changed since last rendering).\n\n        view.change(() => {});\n      }\n    });\n    /**\n     * Identifier of the timeout currently used by focus listener to delay rendering execution.\n     *\n     * @private\n     * @member {Number} #_renderTimeoutId\n     */\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    if (this._renderTimeoutId) {\n      clearTimeout(this._renderTimeoutId);\n    }\n\n    super.destroy();\n  }\n\n}\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","map":{"version":3,"names":["DomEventObserver","FocusObserver","constructor","view","domEventType","useCapture","document","on","isFocused","_renderTimeoutId","setTimeout","change","evt","data","selectedEditable","selection","editableElement","target","onDomEvent","domEvent","fire","type","destroy","clearTimeout"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'focus', 'blur' ];\n\t\tthis.useCapture = true;\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'focus', () => {\n\t\t\tdocument.isFocused = true;\n\n\t\t\t// Unfortunately native `selectionchange` event is fired asynchronously.\n\t\t\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n\t\t\t// overwrite new DOM selection with selection from the view.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n\t\t\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\t\t\t//\n\t\t\t// Using `view.change()` instead of `view.forceRender()` to prevent double rendering\n\t\t\t// in a situation where `selectionchange` already caused selection change.\n\t\t\tthis._renderTimeoutId = setTimeout( () => view.change( () => {} ), 50 );\n\t\t} );\n\n\t\tdocument.on( 'blur', ( evt, data ) => {\n\t\t\tconst selectedEditable = document.selection.editableElement;\n\n\t\t\tif ( selectedEditable === null || selectedEditable === data.target ) {\n\t\t\t\tdocument.isFocused = false;\n\n\t\t\t\t// Re-render the document to update view elements\n\t\t\t\t// (changing document.isFocused already marked view as changed since last rendering).\n\t\t\t\tview.change( () => {} );\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_renderTimeoutId\n\t\t */\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._renderTimeoutId ) {\n\t\t\tclearTimeout( this._renderTimeoutId );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BD,gBAA5B,CAA6C;EAC3DE,WAAW,CAAEC,IAAF,EAAS;IACnB,MAAOA,IAAP;IAEA,KAAKC,YAAL,GAAoB,CAAE,OAAF,EAAW,MAAX,CAApB;IACA,KAAKC,UAAL,GAAkB,IAAlB;IACA,MAAMC,QAAQ,GAAG,KAAKA,QAAtB;IAEAA,QAAQ,CAACC,EAAT,CAAa,OAAb,EAAsB,MAAM;MAC3BD,QAAQ,CAACE,SAAT,GAAqB,IAArB,CAD2B,CAG3B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA,KAAKC,gBAAL,GAAwBC,UAAU,CAAE,MAAMP,IAAI,CAACQ,MAAL,CAAa,MAAM,CAAE,CAArB,CAAR,EAAiC,EAAjC,CAAlC;IACA,CAZD;IAcAL,QAAQ,CAACC,EAAT,CAAa,MAAb,EAAqB,CAAEK,GAAF,EAAOC,IAAP,KAAiB;MACrC,MAAMC,gBAAgB,GAAGR,QAAQ,CAACS,SAAT,CAAmBC,eAA5C;;MAEA,IAAKF,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAKD,IAAI,CAACI,MAA5D,EAAqE;QACpEX,QAAQ,CAACE,SAAT,GAAqB,KAArB,CADoE,CAGpE;QACA;;QACAL,IAAI,CAACQ,MAAL,CAAa,MAAM,CAAE,CAArB;MACA;IACD,CAVD;IAYA;AACF;AACA;AACA;AACA;AACA;EACE;;EAEDO,UAAU,CAAEC,QAAF,EAAa;IACtB,KAAKC,IAAL,CAAWD,QAAQ,CAACE,IAApB,EAA0BF,QAA1B;EACA;EAED;AACD;AACA;;;EACCG,OAAO,GAAG;IACT,IAAK,KAAKb,gBAAV,EAA6B;MAC5Bc,YAAY,CAAE,KAAKd,gBAAP,CAAZ;IACA;;IAED,MAAMa,OAAN;EACA;;AAvD0D;AA0D5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
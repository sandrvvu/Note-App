{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/findoptimalinsertionrange\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first'; // Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n//\n// For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n// will be returned so that it is not split. If the selection is at the end of a paragraph,\n// the collapsed range after this paragraph will be returned.\n//\n// Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n// is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n// by the inserted widget block.\n//\n// **Note:** Use {@link module:widget/utils#findOptimalInsertionRange} instead of this function outside engine.\n// This function is only exposed to be used by {@link module:widget/utils#findOptimalInsertionRange findOptimalInsertionRange()}\n// in the `widget` package and inside the `engine` package.\n//\n// @private\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// The selection based on which the insertion position should be calculated.\n// @param {module:engine/model/model~Model} model Model instance.\n// @param {'auto'|'before'|'after'} [place='auto'] The place where to look for optimal insertion range.\n// The default `auto` value will determine itself the best position for insertion.\n// The `before` value will try to find a position before selection.\n// The `after` value will try to find a position after selection.\n// @returns {module:engine/model/range~Range} The optimal range.\n\nexport function findOptimalInsertionRange(selection, model) {\n  let place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'auto';\n  const selectedElement = selection.getSelectedElement();\n\n  if (selectedElement && model.schema.isObject(selectedElement) && !model.schema.isInline(selectedElement)) {\n    if (['before', 'after'].includes(place)) {\n      return model.createRange(model.createPositionAt(selectedElement, place));\n    }\n\n    return model.createRangeOn(selectedElement);\n  }\n\n  const firstBlock = first(selection.getSelectedBlocks()); // There are no block elements within ancestors (in the current limit element).\n\n  if (!firstBlock) {\n    return model.createRange(selection.focus);\n  } // If inserting into an empty block – return position in that block. It will get\n  // replaced with the image by insertContent(). #42.\n\n\n  if (firstBlock.isEmpty) {\n    return model.createRange(model.createPositionAt(firstBlock, 0));\n  }\n\n  const positionAfter = model.createPositionAfter(firstBlock); // If selection is at the end of the block - return position after the block.\n\n  if (selection.focus.isTouching(positionAfter)) {\n    return model.createRange(positionAfter);\n  } // Otherwise, return position before the block.\n\n\n  return model.createRange(model.createPositionBefore(firstBlock));\n}","map":{"version":3,"names":["first","findOptimalInsertionRange","selection","model","place","selectedElement","getSelectedElement","schema","isObject","isInline","includes","createRange","createPositionAt","createRangeOn","firstBlock","getSelectedBlocks","focus","isEmpty","positionAfter","createPositionAfter","isTouching","createPositionBefore"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/findoptimalinsertionrange.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/findoptimalinsertionrange\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n// Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n//\n// For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n// will be returned so that it is not split. If the selection is at the end of a paragraph,\n// the collapsed range after this paragraph will be returned.\n//\n// Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n// is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n// by the inserted widget block.\n//\n// **Note:** Use {@link module:widget/utils#findOptimalInsertionRange} instead of this function outside engine.\n// This function is only exposed to be used by {@link module:widget/utils#findOptimalInsertionRange findOptimalInsertionRange()}\n// in the `widget` package and inside the `engine` package.\n//\n// @private\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// The selection based on which the insertion position should be calculated.\n// @param {module:engine/model/model~Model} model Model instance.\n// @param {'auto'|'before'|'after'} [place='auto'] The place where to look for optimal insertion range.\n// The default `auto` value will determine itself the best position for insertion.\n// The `before` value will try to find a position before selection.\n// The `after` value will try to find a position after selection.\n// @returns {module:engine/model/range~Range} The optimal range.\nexport function findOptimalInsertionRange( selection, model, place = 'auto' ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement && model.schema.isObject( selectedElement ) && !model.schema.isInline( selectedElement ) ) {\n\t\tif ( [ 'before', 'after' ].includes( place ) ) {\n\t\t\treturn model.createRange( model.createPositionAt( selectedElement, place ) );\n\t\t}\n\n\t\treturn model.createRangeOn( selectedElement );\n\t}\n\n\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t// There are no block elements within ancestors (in the current limit element).\n\tif ( !firstBlock ) {\n\t\treturn model.createRange( selection.focus );\n\t}\n\n\t// If inserting into an empty block – return position in that block. It will get\n\t// replaced with the image by insertContent(). #42.\n\tif ( firstBlock.isEmpty ) {\n\t\treturn model.createRange( model.createPositionAt( firstBlock, 0 ) );\n\t}\n\n\tconst positionAfter = model.createPositionAfter( firstBlock );\n\n\t// If selection is at the end of the block - return position after the block.\n\tif ( selection.focus.isTouching( positionAfter ) ) {\n\t\treturn model.createRange( positionAfter );\n\t}\n\n\t// Otherwise, return position before the block.\n\treturn model.createRange( model.createPositionBefore( firstBlock ) );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,qCAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAoCC,SAApC,EAA+CC,KAA/C,EAAuE;EAAA,IAAjBC,KAAiB,uEAAT,MAAS;EAC7E,MAAMC,eAAe,GAAGH,SAAS,CAACI,kBAAV,EAAxB;;EAEA,IAAKD,eAAe,IAAIF,KAAK,CAACI,MAAN,CAAaC,QAAb,CAAuBH,eAAvB,CAAnB,IAA+D,CAACF,KAAK,CAACI,MAAN,CAAaE,QAAb,CAAuBJ,eAAvB,CAArE,EAAgH;IAC/G,IAAK,CAAE,QAAF,EAAY,OAAZ,EAAsBK,QAAtB,CAAgCN,KAAhC,CAAL,EAA+C;MAC9C,OAAOD,KAAK,CAACQ,WAAN,CAAmBR,KAAK,CAACS,gBAAN,CAAwBP,eAAxB,EAAyCD,KAAzC,CAAnB,CAAP;IACA;;IAED,OAAOD,KAAK,CAACU,aAAN,CAAqBR,eAArB,CAAP;EACA;;EAED,MAAMS,UAAU,GAAGd,KAAK,CAAEE,SAAS,CAACa,iBAAV,EAAF,CAAxB,CAX6E,CAa7E;;EACA,IAAK,CAACD,UAAN,EAAmB;IAClB,OAAOX,KAAK,CAACQ,WAAN,CAAmBT,SAAS,CAACc,KAA7B,CAAP;EACA,CAhB4E,CAkB7E;EACA;;;EACA,IAAKF,UAAU,CAACG,OAAhB,EAA0B;IACzB,OAAOd,KAAK,CAACQ,WAAN,CAAmBR,KAAK,CAACS,gBAAN,CAAwBE,UAAxB,EAAoC,CAApC,CAAnB,CAAP;EACA;;EAED,MAAMI,aAAa,GAAGf,KAAK,CAACgB,mBAAN,CAA2BL,UAA3B,CAAtB,CAxB6E,CA0B7E;;EACA,IAAKZ,SAAS,CAACc,KAAV,CAAgBI,UAAhB,CAA4BF,aAA5B,CAAL,EAAmD;IAClD,OAAOf,KAAK,CAACQ,WAAN,CAAmBO,aAAnB,CAAP;EACA,CA7B4E,CA+B7E;;;EACA,OAAOf,KAAK,CAACQ,WAAN,CAAmBR,KAAK,CAACkB,oBAAN,CAA4BP,UAA5B,CAAnB,CAAP;AACA"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentui\n */\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, createDropdown, addToolbarToDropdown } from 'ckeditor5/src/ui';\nimport { isSupported, normalizeAlignmentOptions } from './utils';\nconst iconsMap = new Map([['left', icons.alignLeft], ['right', icons.alignRight], ['center', icons.alignCenter], ['justify', icons.alignJustify]]);\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class AlignmentUI extends Plugin {\n  /**\n   * Returns the localized option titles provided by the plugin.\n   *\n   * The following localized titles corresponding with\n   * {@link module:alignment/alignment~AlignmentConfig#options} are available:\n   *\n   * * `'left'`,\n   * * `'right'`,\n   * * `'center'`,\n   * * `'justify'`.\n   *\n   * @readonly\n   * @type {Object.<String,String>}\n   */\n  get localizedOptionTitles() {\n    const t = this.editor.t;\n    return {\n      'left': t('Align left'),\n      'right': t('Align right'),\n      'center': t('Align center'),\n      'justify': t('Justify')\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'AlignmentUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const componentFactory = editor.ui.componentFactory;\n    const t = editor.t;\n    const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n    options.map(option => option.name).filter(isSupported).forEach(option => this._addButton(option));\n    componentFactory.add('alignment', locale => {\n      const dropdownView = createDropdown(locale); // Add existing alignment buttons to dropdown's toolbar.\n\n      const buttons = options.map(option => componentFactory.create(`alignment:${option.name}`));\n      addToolbarToDropdown(dropdownView, buttons); // Configure dropdown properties an behavior.\n\n      dropdownView.buttonView.set({\n        label: t('Text alignment'),\n        tooltip: true\n      });\n      dropdownView.toolbarView.isVertical = true;\n      dropdownView.toolbarView.ariaLabel = t('Text alignment toolbar');\n      dropdownView.extendTemplate({\n        attributes: {\n          class: 'ck-alignment-dropdown'\n        }\n      }); // The default icon depends on the direction of the content.\n\n      const defaultIcon = locale.contentLanguageDirection === 'rtl' ? iconsMap.get('right') : iconsMap.get('left'); // Change icon to reflect current selection's alignment.\n\n      dropdownView.buttonView.bind('icon').toMany(buttons, 'isOn', function () {\n        for (var _len = arguments.length, areActive = new Array(_len), _key = 0; _key < _len; _key++) {\n          areActive[_key] = arguments[_key];\n        }\n\n        // Get the index of an active button.\n        const index = areActive.findIndex(value => value); // If none of the commands is active, display either defaultIcon or the first button's icon.\n\n        if (index < 0) {\n          return defaultIcon;\n        } // Return active button's icon.\n\n\n        return buttons[index].icon;\n      }); // Enable button if any of the buttons is enabled.\n\n      dropdownView.bind('isEnabled').toMany(buttons, 'isEnabled', function () {\n        for (var _len2 = arguments.length, areEnabled = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          areEnabled[_key2] = arguments[_key2];\n        }\n\n        return areEnabled.some(isEnabled => isEnabled);\n      });\n      return dropdownView;\n    });\n  }\n  /**\n   * Helper method for initializing the button and linking it with an appropriate command.\n   *\n   * @private\n   * @param {String} option The name of the alignment option for which the button is added.\n   */\n\n\n  _addButton(option) {\n    const editor = this.editor;\n    editor.ui.componentFactory.add(`alignment:${option}`, locale => {\n      const command = editor.commands.get('alignment');\n      const buttonView = new ButtonView(locale);\n      buttonView.set({\n        label: this.localizedOptionTitles[option],\n        icon: iconsMap.get(option),\n        tooltip: true,\n        isToggleable: true\n      }); // Bind button model to command.\n\n      buttonView.bind('isEnabled').to(command);\n      buttonView.bind('isOn').to(command, 'value', value => value === option); // Execute command.\n\n      this.listenTo(buttonView, 'execute', () => {\n        editor.execute('alignment', {\n          value: option\n        });\n        editor.editing.view.focus();\n      });\n      return buttonView;\n    });\n  }\n\n}","map":{"version":3,"names":["Plugin","icons","ButtonView","createDropdown","addToolbarToDropdown","isSupported","normalizeAlignmentOptions","iconsMap","Map","alignLeft","alignRight","alignCenter","alignJustify","AlignmentUI","localizedOptionTitles","t","editor","pluginName","init","componentFactory","ui","options","config","get","map","option","name","filter","forEach","_addButton","add","locale","dropdownView","buttons","create","buttonView","set","label","tooltip","toolbarView","isVertical","ariaLabel","extendTemplate","attributes","class","defaultIcon","contentLanguageDirection","bind","toMany","areActive","index","findIndex","value","icon","areEnabled","some","isEnabled","command","commands","isToggleable","to","listenTo","execute","editing","view","focus"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-alignment/src/alignmentui.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentui\n */\n\nimport { Plugin, icons } from 'ckeditor5/src/core';\nimport { ButtonView, createDropdown, addToolbarToDropdown } from 'ckeditor5/src/ui';\n\nimport { isSupported, normalizeAlignmentOptions } from './utils';\n\nconst iconsMap = new Map( [\n\t[ 'left', icons.alignLeft ],\n\t[ 'right', icons.alignRight ],\n\t[ 'center', icons.alignCenter ],\n\t[ 'justify', icons.alignJustify ]\n] );\n\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class AlignmentUI extends Plugin {\n\t/**\n\t * Returns the localized option titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:alignment/alignment~AlignmentConfig#options} are available:\n\t *\n\t * * `'left'`,\n\t * * `'right'`,\n\t * * `'center'`,\n\t * * `'justify'`.\n\t *\n\t * @readonly\n\t * @type {Object.<String,String>}\n\t */\n\tget localizedOptionTitles() {\n\t\tconst t = this.editor.t;\n\n\t\treturn {\n\t\t\t'left': t( 'Align left' ),\n\t\t\t'right': t( 'Align right' ),\n\t\t\t'center': t( 'Align center' ),\n\t\t\t'justify': t( 'Justify' )\n\t\t};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'AlignmentUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst componentFactory = editor.ui.componentFactory;\n\t\tconst t = editor.t;\n\t\tconst options = normalizeAlignmentOptions( editor.config.get( 'alignment.options' ) );\n\n\t\toptions\n\t\t\t.map( option => option.name )\n\t\t\t.filter( isSupported )\n\t\t\t.forEach( option => this._addButton( option ) );\n\n\t\tcomponentFactory.add( 'alignment', locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\t// Add existing alignment buttons to dropdown's toolbar.\n\t\t\tconst buttons = options.map( option => componentFactory.create( `alignment:${ option.name }` ) );\n\t\t\taddToolbarToDropdown( dropdownView, buttons );\n\n\t\t\t// Configure dropdown properties an behavior.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: t( 'Text alignment' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.toolbarView.isVertical = true;\n\t\t\tdropdownView.toolbarView.ariaLabel = t( 'Text alignment toolbar' );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: 'ck-alignment-dropdown'\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// The default icon depends on the direction of the content.\n\t\t\tconst defaultIcon = locale.contentLanguageDirection === 'rtl' ? iconsMap.get( 'right' ) : iconsMap.get( 'left' );\n\n\t\t\t// Change icon to reflect current selection's alignment.\n\t\t\tdropdownView.buttonView.bind( 'icon' ).toMany( buttons, 'isOn', ( ...areActive ) => {\n\t\t\t\t// Get the index of an active button.\n\t\t\t\tconst index = areActive.findIndex( value => value );\n\n\t\t\t\t// If none of the commands is active, display either defaultIcon or the first button's icon.\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\treturn defaultIcon;\n\t\t\t\t}\n\n\t\t\t\t// Return active button's icon.\n\t\t\t\treturn buttons[ index ].icon;\n\t\t\t} );\n\n\t\t\t// Enable button if any of the buttons is enabled.\n\t\t\tdropdownView.bind( 'isEnabled' ).toMany( buttons, 'isEnabled', ( ...areEnabled ) => areEnabled.some( isEnabled => isEnabled ) );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Helper method for initializing the button and linking it with an appropriate command.\n\t *\n\t * @private\n\t * @param {String} option The name of the alignment option for which the button is added.\n\t */\n\t_addButton( option ) {\n\t\tconst editor = this.editor;\n\n\t\teditor.ui.componentFactory.add( `alignment:${ option }`, locale => {\n\t\t\tconst command = editor.commands.get( 'alignment' );\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\tlabel: this.localizedOptionTitles[ option ],\n\t\t\t\ticon: iconsMap.get( option ),\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\t// Bind button model to command.\n\t\t\tbuttonView.bind( 'isEnabled' ).to( command );\n\t\t\tbuttonView.bind( 'isOn' ).to( command, 'value', value => value === option );\n\n\t\t\t// Execute command.\n\t\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\t\teditor.execute( 'alignment', { value: option } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn buttonView;\n\t\t} );\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
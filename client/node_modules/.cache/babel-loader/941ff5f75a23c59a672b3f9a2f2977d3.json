{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport isVisible from '@ckeditor/ckeditor5-utils/src/dom/isvisible';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport threeVerticalDots from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\nimport '../../theme/components/toolbar/toolbar.css';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\n\nexport default class ToolbarView extends View {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n   */\n  constructor(locale, options) {\n    super(locale);\n    const bind = this.bindTemplate;\n    const t = this.t;\n    /**\n     * A reference to the options object passed to the constructor.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n     */\n\n    this.options = options || {};\n    /**\n     * Label used by assistive technologies to describe this toolbar element.\n     *\n     * @default 'Editor toolbar'\n     * @member {String} #ariaLabel\n     */\n\n    this.set('ariaLabel', t('Editor toolbar'));\n    /**\n     * The maximum width of the toolbar element.\n     *\n     * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n     * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n     *\n     * @observable\n     * @default 'auto'\n     * @member {String} #maxWidth\n     */\n\n    this.set('maxWidth', 'auto');\n    /**\n     * A collection of toolbar items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * Tracks information about the DOM focus in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n     * to handle keyboard navigation in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n    this.set('class');\n    /**\n     * When set true, makes the toolbar look compact with {@link #element}.\n     *\n     * @observable\n     * @default false\n     * @member {String} #isCompact\n     */\n\n    this.set('isCompact', false);\n    /**\n     * A (child) view containing {@link #items toolbar items}.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n\n    this.itemsView = new ItemsView(locale);\n    /**\n     * A top–level collection aggregating building blocks of the toolbar.\n     *\n     *\t┌───────────────── ToolbarView ─────────────────┐\n     *\t| ┌──────────────── #children ────────────────┐ |\n     *\t| |   ┌──────────── #itemsView ───────────┐   | |\n     *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n     *\t| |   └──────────────────────────────────-┘   | |\n     *\t| └───────────────────────────────────────────┘ |\n     *\t└───────────────────────────────────────────────┘\n     *\n     * By default, it contains the {@link #itemsView} but it can be extended with additional\n     * UI elements when necessary.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    this.children.add(this.itemsView);\n    /**\n     * A collection of {@link #items} that take part in the focus cycling\n     * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n     * some optional UI elements that also belong to the toolbar and should be focusable\n     * by the user.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.focusables = this.createCollection();\n    /**\n     * Controls the orientation of toolbar items. Only available when\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n     * is **disabled**.\n     *\n     * @observable\n     * @member {Boolean} #isVertical\n     */\n\n    /**\n     * Helps cycling over {@link #focusables focusable items} in the toolbar.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    const isRtl = locale.uiLanguageDirection === 'rtl';\n    this._focusCycler = new FocusCycler({\n      focusables: this.focusables,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate toolbar items backwards using the arrow[left,up] keys.\n        focusPrevious: [isRtl ? 'arrowright' : 'arrowleft', 'arrowup'],\n        // Navigate toolbar items forwards using the arrow[right,down] keys.\n        focusNext: [isRtl ? 'arrowleft' : 'arrowright', 'arrowdown']\n      }\n    });\n    const classes = ['ck', 'ck-toolbar', bind.to('class'), bind.if('isCompact', 'ck-toolbar_compact')];\n\n    if (this.options.shouldGroupWhenFull && this.options.isFloating) {\n      classes.push('ck-toolbar_floating');\n    }\n\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: classes,\n        role: 'toolbar',\n        'aria-label': bind.to('ariaLabel'),\n        style: {\n          maxWidth: bind.to('maxWidth')\n        }\n      },\n      children: this.children,\n      on: {\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        mousedown: preventDefault(this)\n      }\n    });\n    /**\n     * An instance of the active toolbar behavior that shapes its look and functionality.\n     *\n     * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n     */\n\n    this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Children added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n\n    this._behavior.render(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this._behavior.destroy();\n\n    this.focusTracker.destroy();\n    this.keystrokes.destroy();\n    return super.destroy();\n  }\n  /**\n   * Focuses the first focusable in {@link #focusables}.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Focuses the last focusable in {@link #focusables}.\n   */\n\n\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n  /**\n   * A utility that expands the plain toolbar configuration into\n   * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n   *\n   * @param {Array.<String>|Object} itemsOrConfig The toolbar items or the entire toolbar configuration object.\n   * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n   */\n\n\n  fillFromConfig(itemsOrConfig, factory) {\n    const config = normalizeToolbarConfig(itemsOrConfig);\n    const itemsToClean = config.items.filter((name, idx, items) => {\n      if (name === '|') {\n        return true;\n      } // Items listed in `config.removeItems` should not be added to the toolbar.\n\n\n      if (config.removeItems.indexOf(name) !== -1) {\n        return false;\n      }\n\n      if (name === '-') {\n        // The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n        // (https://github.com/ckeditor/ckeditor5/issues/8582)\n        if (this.options.shouldGroupWhenFull) {\n          /**\n           * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n           * is disabled in the toolbar configuration.\n           * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n           *\n           *\t\tconst config = {\n           *\t\t\ttoolbar: {\n           *\t\t\t\titems: [ ... ],\n           *\t\t\t\tshouldNotGroupWhenFull: true\n           *\t\t\t}\n           *\t\t}\n           *\n           * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n           *\n           * @error toolbarview-line-break-ignored-when-grouping-items\n           */\n          logWarning('toolbarview-line-break-ignored-when-grouping-items', items);\n          return false;\n        }\n\n        return true;\n      } // For the items that cannot be instantiated we are sending warning message. We also filter them out.\n\n\n      if (!factory.has(name)) {\n        /**\n         * There was a problem processing the configuration of the toolbar. The item with the given\n         * name does not exist so it was omitted when rendering the toolbar.\n         *\n         * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n         * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n         *\n         * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n         * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n         *\n         * You can use the following snippet to retrieve all available toolbar items:\n         *\n         *\t\tArray.from( editor.ui.componentFactory.names() );\n         *\n         * @error toolbarview-item-unavailable\n         * @param {String} name The name of the component.\n         */\n        logWarning('toolbarview-item-unavailable', {\n          name\n        });\n        return false;\n      }\n\n      return true;\n    });\n\n    const itemsToAdd = this._cleanSeparators(itemsToClean) // Instantiate toolbar items.\n    .map(name => {\n      if (name === '|') {\n        return new ToolbarSeparatorView();\n      } else if (name === '-') {\n        return new ToolbarLineBreakView();\n      }\n\n      return factory.create(name);\n    });\n\n    this.items.addMany(itemsToAdd);\n  }\n  /**\n   * Remove leading, trailing, and duplicated separators (`-` and `|`).\n   *\n   * @private\n   * @param {Array.<String>} items\n   */\n\n\n  _cleanSeparators(items) {\n    const nonSeparatorPredicate = item => item !== '-' && item !== '|';\n\n    const count = items.length; // Find an index of the first item that is not a separator.\n\n    const firstCommandItem = items.findIndex(nonSeparatorPredicate); // Search from the end of the list, then convert found index back to the original direction.\n\n    const lastCommandItem = count - items.slice().reverse().findIndex(nonSeparatorPredicate);\n    return items // Return items without the leading and trailing separators.\n    .slice(firstCommandItem, lastCommandItem) // Remove duplicated separators.\n    .filter((name, idx, items) => {\n      // Filter only separators.\n      if (nonSeparatorPredicate(name)) {\n        return true;\n      }\n\n      const isDuplicated = idx > 0 && items[idx - 1] === name;\n      return !isDuplicated;\n    });\n  }\n  /**\n   * Fired when some toolbar {@link #items} were grouped or ungrouped as a result of some change\n   * in the toolbar geometry.\n   *\n   * **Note**: This event is always fired **once** regardless of the number of items that were be\n   * grouped or ungrouped at a time.\n   *\n   * **Note**: This event is fired only if the items grouping functionality was enabled in\n   * the first place (see {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}).\n   *\n   * @event groupedItemsUpdate\n   */\n\n\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\n\nclass ItemsView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * A collection of items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-toolbar__items']\n      },\n      children: this.children\n    });\n  }\n\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n\nclass StaticLayout {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  constructor(view) {\n    const bind = view.bindTemplate; // Static toolbar can be vertical when needed.\n\n    view.set('isVertical', false); // 1:1 pass–through binding, all ToolbarView#items are visible.\n\n    view.itemsView.children.bindTo(view.items).using(item => item); // 1:1 pass–through binding, all ToolbarView#items are focusable.\n\n    view.focusables.bindTo(view.items).using(item => item);\n    view.extendTemplate({\n      attributes: {\n        class: [// When vertical, the toolbar has an additional CSS class.\n        bind.if('isVertical', 'ck-toolbar_vertical')]\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {}\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {}\n\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n\nclass DynamicGrouping {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n  constructor(view) {\n    /**\n     * A toolbar view this behavior belongs to.\n     *\n     * @readonly\n     * @member {module:ui/toolbar~ToolbarView}\n     */\n    this.view = view;\n    /**\n     * A collection of toolbar children.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.viewChildren = view.children;\n    /**\n     * A collection of focusable toolbar elements.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.viewFocusables = view.focusables;\n    /**\n     * A view containing toolbar items.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n\n    this.viewItemsView = view.itemsView;\n    /**\n     * Toolbar focus tracker.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.viewFocusTracker = view.focusTracker;\n    /**\n     * Toolbar locale.\n     *\n     * @readonly\n     * @member {module:utils/locale~Locale}\n     */\n\n    this.viewLocale = view.locale;\n    /**\n     * Toolbar element.\n     *\n     * @readonly\n     * @member {HTMLElement} #viewElement\n     */\n\n    /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n     * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n     * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.ungroupedItems = view.createCollection();\n    /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * A collection of the toolbar items that do not fit into a single row of the toolbar.\n     * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n     * this collection is empty.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.groupedItems = view.createCollection();\n    /**\n     * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n     * row of the toolbar. It is displayed on demand as the last of\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n     * (nested) toolbar which displays items that would normally overflow.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n\n    this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n    /**\n     * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n     * and manage items that do not fit into a single row.\n     *\n     * **Note:** Created in {@link #_enableGroupingOnResize}.\n     *\n     * @readonly\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n\n    this.resizeObserver = null;\n    /**\n     * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n     * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n     * a single toolbar line. This value can be reused between updates because it is unlikely that\n     * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n     *\n     * @readonly\n     * @member {Number}\n     */\n\n    this.cachedPadding = null;\n    /**\n     * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n     * and should be executed immediately the next time the toolbar shows up.\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.shouldUpdateGroupingOnNextResize = false; // Only those items that were not grouped are visible to the user.\n\n    view.itemsView.children.bindTo(this.ungroupedItems).using(item => item); // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\n    this.ungroupedItems.on('add', this._updateFocusCycleableItems.bind(this));\n    this.ungroupedItems.on('remove', this._updateFocusCycleableItems.bind(this)); // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\n    view.children.on('add', this._updateFocusCycleableItems.bind(this));\n    view.children.on('remove', this._updateFocusCycleableItems.bind(this)); // ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n    // represented in either grouped or ungrouped items at the right index.\n    // In other words #items == concat( #ungroupedItems, #groupedItems )\n    // (in length and order).\n\n    view.items.on('change', (evt, changeData) => {\n      const index = changeData.index; // Removing.\n\n      for (const removedItem of changeData.removed) {\n        if (index >= this.ungroupedItems.length) {\n          this.groupedItems.remove(removedItem);\n        } else {\n          this.ungroupedItems.remove(removedItem);\n        }\n      } // Adding.\n\n\n      for (let currentIndex = index; currentIndex < index + changeData.added.length; currentIndex++) {\n        const addedItem = changeData.added[currentIndex - index];\n\n        if (currentIndex > this.ungroupedItems.length) {\n          this.groupedItems.add(addedItem, currentIndex - this.ungroupedItems.length);\n        } else {\n          this.ungroupedItems.add(addedItem, currentIndex);\n        }\n      } // When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n      // the toolbar to overflow.\n      // Consequently if removed from grouped or ungrouped items, there is a chance\n      // some new space is available and we could do some ungrouping.\n\n\n      this._updateGrouping();\n    });\n    view.extendTemplate({\n      attributes: {\n        class: [// To group items dynamically, the toolbar needs a dedicated CSS class.\n        'ck-toolbar_grouping']\n      }\n    });\n  }\n  /**\n   * Enables dynamic items grouping based on the dimensions of the toolbar.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n\n\n  render(view) {\n    this.viewElement = view.element;\n\n    this._enableGroupingOnResize();\n\n    this._enableGroupingOnMaxWidthChange(view);\n  }\n  /**\n   * Cleans up the internals used by this behavior.\n   */\n\n\n  destroy() {\n    // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n    // so let's make sure it's actually destroyed along with the toolbar.\n    this.groupedItemsDropdown.destroy();\n    this.resizeObserver.destroy();\n  }\n  /**\n   * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n   * and it will move them to the {@link #groupedItems} when it happens.\n   *\n   * At the same time, it will also check if there is enough space in the toolbar for the first of the\n   * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n   * without the toolbar wrapping.\n   *\n   * @protected\n   */\n\n\n  _updateGrouping() {\n    // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n    // for instance before #render(), or after render but without a parent or a parent detached\n    // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n    // nothing else. This happens, for instance, when the toolbar is detached from DOM and\n    // some logic adds or removes its #items.\n    if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n      return;\n    } // Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n    // and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n    // the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n    // the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n    // time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n\n\n    if (!isVisible(this.viewElement)) {\n      this.shouldUpdateGroupingOnNextResize = true;\n      return;\n    } // Remember how many items were initially grouped so at the it is possible to figure out if the number\n    // of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n\n\n    const initialGroupedItemsCount = this.groupedItems.length;\n    let wereItemsGrouped; // Group #items as long as some wrap to the next row. This will happen, for instance,\n    // when the toolbar is getting narrow and there is not enough space to display all items in\n    // a single row.\n\n    while (this._areItemsOverflowing) {\n      this._groupLastItem();\n\n      wereItemsGrouped = true;\n    } // If none were grouped now but there were some items already grouped before,\n    // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n    // for instance, the toolbar is stretching and there's more space in it than before.\n\n\n    if (!wereItemsGrouped && this.groupedItems.length) {\n      // Ungroup items as long as none are overflowing or there are none to ungroup left.\n      while (this.groupedItems.length && !this._areItemsOverflowing) {\n        this._ungroupFirstItem();\n      } // If the ungrouping ended up with some item wrapping to the next row,\n      // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n      // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n      // clean–up is vital for the algorithm.\n\n\n      if (this._areItemsOverflowing) {\n        this._groupLastItem();\n      }\n    }\n\n    if (this.groupedItems.length !== initialGroupedItemsCount) {\n      this.view.fire('groupedItemsUpdate');\n    }\n  }\n  /**\n   * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n   * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n   *\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _areItemsOverflowing() {\n    // An empty toolbar cannot overflow.\n    if (!this.ungroupedItems.length) {\n      return false;\n    }\n\n    const element = this.viewElement;\n    const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n    const lastChildRect = new Rect(element.lastChild);\n    const toolbarRect = new Rect(element);\n\n    if (!this.cachedPadding) {\n      const computedStyle = global.window.getComputedStyle(element);\n      const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft'; // parseInt() is essential because of quirky floating point numbers logic and DOM.\n      // If the padding turned out too big because of that, the grouped items dropdown would\n      // always look (from the Rect perspective) like it overflows (while it's not).\n\n      this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n    }\n\n    if (uiLanguageDirection === 'ltr') {\n      return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n    } else {\n      return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n    }\n  }\n  /**\n   * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n   * upon resize when there is little space available. Instead, the toolbar items are moved to the\n   * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n   *\n   * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n   * them in the dropdown if necessary. It will also observe the browser window for size changes in\n   * the future and respond to them by grouping more items or reverting already grouped back, depending\n   * on the visual space available.\n   *\n   * @private\n   */\n\n\n  _enableGroupingOnResize() {\n    let previousWidth; // TODO: Consider debounce.\n\n    this.resizeObserver = new ResizeObserver(this.viewElement, entry => {\n      if (!previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize) {\n        this.shouldUpdateGroupingOnNextResize = false;\n\n        this._updateGrouping();\n\n        previousWidth = entry.contentRect.width;\n      }\n    });\n\n    this._updateGrouping();\n  }\n  /**\n   * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n   * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n   *\n   * @private\n   */\n\n\n  _enableGroupingOnMaxWidthChange(view) {\n    view.on('change:maxWidth', () => {\n      this._updateGrouping();\n    });\n  }\n  /**\n   * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n   * to the {@link #groupedItems} collection.\n   *\n   * The opposite of {@link #_ungroupFirstItem}.\n   *\n   * @private\n   */\n\n\n  _groupLastItem() {\n    if (!this.groupedItems.length) {\n      this.viewChildren.add(new ToolbarSeparatorView());\n      this.viewChildren.add(this.groupedItemsDropdown);\n      this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n    }\n\n    this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n  }\n  /**\n   * Moves the very first item belonging to {@link #groupedItems} back\n   * to the {@link #ungroupedItems} collection.\n   *\n   * The opposite of {@link #_groupLastItem}.\n   *\n   * @private\n   */\n\n\n  _ungroupFirstItem() {\n    this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n\n    if (!this.groupedItems.length) {\n      this.viewChildren.remove(this.groupedItemsDropdown);\n      this.viewChildren.remove(this.viewChildren.last);\n      this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n    }\n  }\n  /**\n   * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n   * collection when there is not enough space in the toolbar to display all items in a single row.\n   *\n   * @private\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _createGroupedItemsDropdown() {\n    const locale = this.viewLocale;\n    const t = locale.t;\n    const dropdown = createDropdown(locale);\n    dropdown.class = 'ck-toolbar__grouped-dropdown'; // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n    // (https://github.com/ckeditor/ckeditor5/issues/5608)\n\n    dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n    addToolbarToDropdown(dropdown, []);\n    dropdown.buttonView.set({\n      label: t('Show more items'),\n      tooltip: true,\n      tooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n      icon: threeVerticalDots\n    }); // 1:1 pass–through binding.\n\n    dropdown.toolbarView.items.bindTo(this.groupedItems).using(item => item);\n    return dropdown;\n  }\n  /**\n   * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n   * collection so it represents the up–to–date state of the UI from the perspective of the user.\n   *\n   * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n   * it must be subject to focus cycling in the toolbar.\n   *\n   * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n   * to learn more about the purpose of this method.\n   *\n   * @private\n   */\n\n\n  _updateFocusCycleableItems() {\n    this.viewFocusables.clear();\n    this.ungroupedItems.map(item => {\n      this.viewFocusables.add(item);\n    });\n\n    if (this.groupedItems.length) {\n      this.viewFocusables.add(this.groupedItemsDropdown);\n    }\n  }\n\n}\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow. For toolbars in absolutely positioned containers\n * without width restrictions also the {@link module:ui/toolbar/toolbarview~ToolbarOptions#isFloating} option is required to be `true`.\n *\n * See also: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * This option should be enabled for toolbars in absolutely positioned containers without width restrictions\n * to enable automatic {@link module:ui/toolbar/toolbarview~ToolbarView#items} grouping.\n * When this option is set to `true`, the items will stop wrapping to the next line\n * and together with {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull},\n * this will allow grouping them when there is not enough space in a single row.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#isFloating\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */","map":{"version":3,"names":["View","FocusTracker","FocusCycler","KeystrokeHandler","ToolbarSeparatorView","ToolbarLineBreakView","ResizeObserver","preventDefault","Rect","isVisible","global","createDropdown","addToolbarToDropdown","logWarning","normalizeToolbarConfig","threeVerticalDots","ToolbarView","constructor","locale","options","bind","bindTemplate","t","set","items","createCollection","focusTracker","keystrokes","itemsView","ItemsView","children","add","focusables","isRtl","uiLanguageDirection","_focusCycler","keystrokeHandler","actions","focusPrevious","focusNext","classes","to","if","shouldGroupWhenFull","isFloating","push","setTemplate","tag","attributes","class","role","style","maxWidth","on","mousedown","_behavior","DynamicGrouping","StaticLayout","render","item","element","evt","remove","listenTo","destroy","focus","focusFirst","focusLast","fillFromConfig","itemsOrConfig","factory","config","itemsToClean","filter","name","idx","removeItems","indexOf","has","itemsToAdd","_cleanSeparators","map","create","addMany","nonSeparatorPredicate","count","length","firstCommandItem","findIndex","lastCommandItem","slice","reverse","isDuplicated","view","bindTo","using","extendTemplate","viewChildren","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","shouldUpdateGroupingOnNextResize","_updateFocusCycleableItems","changeData","index","removedItem","removed","currentIndex","added","addedItem","_updateGrouping","viewElement","_enableGroupingOnResize","_enableGroupingOnMaxWidthChange","ownerDocument","body","contains","initialGroupedItemsCount","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","fire","lastChildRect","lastChild","toolbarRect","computedStyle","window","getComputedStyle","paddingProperty","Number","parseInt","right","left","previousWidth","entry","contentRect","width","last","first","dropdown","panelPosition","buttonView","label","tooltip","tooltipPosition","icon","toolbarView","clear"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport ToolbarLineBreakView from './toolbarlinebreakview';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport isVisible from '@ckeditor/ckeditor5-utils/src/dom/isvisible';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { createDropdown, addToolbarToDropdown } from '../dropdown/utils';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport normalizeToolbarConfig from './normalizetoolbarconfig';\nimport threeVerticalDots from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n\t */\n\tconstructor( locale, options ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst t = this.t;\n\n\t\t/**\n\t\t * A reference to the options object passed to the constructor.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n\t\t */\n\t\tthis.options = options || {};\n\n\t\t/**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n\t\tthis.set( 'ariaLabel', t( 'Editor toolbar' ) );\n\n\t\t/**\n\t\t * The maximum width of the toolbar element.\n\t\t *\n\t\t * **Note**: When set to a specific value (e.g. `'200px'`), the value will affect the behavior of the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}\n\t\t * option by changing the number of {@link #items} that will be displayed in the toolbar at a time.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {String} #maxWidth\n\t\t */\n\t\tthis.set( 'maxWidth', 'auto' );\n\n\t\t/**\n\t\t * A collection of toolbar items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about the DOM focus in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * to handle keyboard navigation in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * When set true, makes the toolbar look compact with {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {String} #isCompact\n\t\t */\n\t\tthis.set( 'isCompact', false );\n\n\t\t/**\n\t\t * A (child) view containing {@link #items toolbar items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.itemsView = new ItemsView( locale );\n\n\t\t/**\n\t\t * A top–level collection aggregating building blocks of the toolbar.\n\t\t *\n\t\t *\t┌───────────────── ToolbarView ─────────────────┐\n\t\t *\t| ┌──────────────── #children ────────────────┐ |\n\t\t *\t| |   ┌──────────── #itemsView ───────────┐   | |\n\t\t *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n\t\t *\t| |   └──────────────────────────────────-┘   | |\n\t\t *\t| └───────────────────────────────────────────┘ |\n\t\t *\t└───────────────────────────────────────────────┘\n\t\t *\n\t\t * By default, it contains the {@link #itemsView} but it can be extended with additional\n\t\t * UI elements when necessary.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\t\tthis.children.add( this.itemsView );\n\n\t\t/**\n\t\t * A collection of {@link #items} that take part in the focus cycling\n\t\t * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n\t\t * some optional UI elements that also belong to the toolbar and should be focusable\n\t\t * by the user.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.focusables = this.createCollection();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items. Only available when\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n\t\t * is **disabled**.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\n\t\t/**\n\t\t * Helps cycling over {@link #focusables focusable items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\n\t\tconst isRtl = locale.uiLanguageDirection === 'rtl';\n\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.focusables,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ isRtl ? 'arrowright' : 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ isRtl ? 'arrowleft' : 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tconst classes = [\n\t\t\t'ck',\n\t\t\t'ck-toolbar',\n\t\t\tbind.to( 'class' ),\n\t\t\tbind.if( 'isCompact', 'ck-toolbar_compact' )\n\t\t];\n\n\t\tif ( this.options.shouldGroupWhenFull && this.options.isFloating ) {\n\t\t\tclasses.push( 'ck-toolbar_floating' );\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: classes,\n\t\t\t\trole: 'toolbar',\n\t\t\t\t'aria-label': bind.to( 'ariaLabel' ),\n\t\t\t\tstyle: {\n\t\t\t\t\tmaxWidth: bind.to( 'maxWidth' )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * An instance of the active toolbar behavior that shapes its look and functionality.\n\t\t *\n\t\t * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n\t\t */\n\t\tthis._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping( this ) : new StaticLayout( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Children added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\tthis._behavior.render( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._behavior.destroy();\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #focusables}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility that expands the plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>|Object} itemsOrConfig The toolbar items or the entire toolbar configuration object.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( itemsOrConfig, factory ) {\n\t\tconst config = normalizeToolbarConfig( itemsOrConfig );\n\n\t\tconst itemsToClean = config.items\n\t\t\t.filter( ( name, idx, items ) => {\n\t\t\t\tif ( name === '|' ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Items listed in `config.removeItems` should not be added to the toolbar.\n\t\t\t\tif ( config.removeItems.indexOf( name ) !== -1 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( name === '-' ) {\n\t\t\t\t\t// The toolbar line breaks must not be rendered when toolbar grouping is enabled.\n\t\t\t\t\t// (https://github.com/ckeditor/ckeditor5/issues/8582)\n\t\t\t\t\tif ( this.options.shouldGroupWhenFull ) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * The toolbar multiline breaks (`-` items) only work when the automatic button grouping\n\t\t\t\t\t\t * is disabled in the toolbar configuration.\n\t\t\t\t\t\t * To do this, set the `shouldNotGroupWhenFull` option to `true` in the editor configuration:\n\t\t\t\t\t\t *\n\t\t\t\t\t\t *\t\tconst config = {\n\t\t\t\t\t\t *\t\t\ttoolbar: {\n\t\t\t\t\t\t *\t\t\t\titems: [ ... ],\n\t\t\t\t\t\t *\t\t\t\tshouldNotGroupWhenFull: true\n\t\t\t\t\t\t *\t\t\t}\n\t\t\t\t\t\t *\t\t}\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * Learn more about {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @error toolbarview-line-break-ignored-when-grouping-items\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlogWarning( 'toolbarview-line-break-ignored-when-grouping-items', items );\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// For the items that cannot be instantiated we are sending warning message. We also filter them out.\n\t\t\t\tif ( !factory.has( name ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t\t *\n\t\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t\t *\n\t\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t\t *\n\t\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t\t *\n\t\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t\t */\n\t\t\t\t\tlogWarning( 'toolbarview-item-unavailable', { name } );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} );\n\n\t\tconst itemsToAdd = this._cleanSeparators( itemsToClean )\n\t\t\t// Instantiate toolbar items.\n\t\t\t.map( name => {\n\t\t\t\tif ( name === '|' ) {\n\t\t\t\t\treturn new ToolbarSeparatorView();\n\t\t\t\t} else if ( name === '-' ) {\n\t\t\t\t\treturn new ToolbarLineBreakView();\n\t\t\t\t}\n\n\t\t\t\treturn factory.create( name );\n\t\t\t} );\n\n\t\tthis.items.addMany( itemsToAdd );\n\t}\n\n\t/**\n\t * Remove leading, trailing, and duplicated separators (`-` and `|`).\n\t *\n\t * @private\n\t * @param {Array.<String>} items\n\t */\n\t_cleanSeparators( items ) {\n\t\tconst nonSeparatorPredicate = item => ( item !== '-' && item !== '|' );\n\t\tconst count = items.length;\n\n\t\t// Find an index of the first item that is not a separator.\n\t\tconst firstCommandItem = items.findIndex( nonSeparatorPredicate );\n\n\t\t// Search from the end of the list, then convert found index back to the original direction.\n\t\tconst lastCommandItem = count - items\n\t\t\t.slice()\n\t\t\t.reverse()\n\t\t\t.findIndex( nonSeparatorPredicate );\n\n\t\treturn items\n\t\t\t// Return items without the leading and trailing separators.\n\t\t\t.slice( firstCommandItem, lastCommandItem )\n\t\t\t// Remove duplicated separators.\n\t\t\t.filter( ( name, idx, items ) => {\n\t\t\t\t// Filter only separators.\n\t\t\t\tif ( nonSeparatorPredicate( name ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tconst isDuplicated = idx > 0 && items[ idx - 1 ] === name;\n\n\t\t\t\treturn !isDuplicated;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Fired when some toolbar {@link #items} were grouped or ungrouped as a result of some change\n\t * in the toolbar geometry.\n\t *\n\t * **Note**: This event is always fired **once** regardless of the number of items that were be\n\t * grouped or ungrouped at a time.\n\t *\n\t * **Note**: This event is fired only if the items grouping functionality was enabled in\n\t * the first place (see {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull}).\n\t *\n\t * @event groupedItemsUpdate\n\t */\n}\n\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * A collection of items (buttons, dropdowns, etc.).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__items'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n}\n\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\tconst bind = view.bindTemplate;\n\n\t\t// Static toolbar can be vertical when needed.\n\t\tview.set( 'isVertical', false );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are visible.\n\t\tview.itemsView.children.bindTo( view.items ).using( item => item );\n\n\t\t// 1:1 pass–through binding, all ToolbarView#items are focusable.\n\t\tview.focusables.bindTo( view.items ).using( item => item );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// When vertical, the toolbar has an additional CSS class.\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' )\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {}\n}\n\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n\t * behavior.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * A toolbar view this behavior belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar~ToolbarView}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A collection of toolbar children.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewChildren = view.children;\n\n\t\t/**\n\t\t * A collection of focusable toolbar elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.viewFocusables = view.focusables;\n\n\t\t/**\n\t\t * A view containing toolbar items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ItemsView}\n\t\t */\n\t\tthis.viewItemsView = view.itemsView;\n\n\t\t/**\n\t\t * Toolbar focus tracker.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.viewFocusTracker = view.focusTracker;\n\n\t\t/**\n\t\t * Toolbar locale.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.viewLocale = view.locale;\n\n\t\t/**\n\t\t * Toolbar element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #viewElement\n\t\t */\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n\t\t * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n\t\t * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.ungroupedItems = view.createCollection();\n\n\t\t/**\n\t\t * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n\t\t * A collection of the toolbar items that do not fit into a single row of the toolbar.\n\t\t * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n\t\t *\n\t\t * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n\t\t * this collection is empty.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.groupedItems = view.createCollection();\n\n\t\t/**\n\t\t * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n\t\t * row of the toolbar. It is displayed on demand as the last of\n\t\t * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n\t\t * (nested) toolbar which displays items that would normally overflow.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownview~DropdownView}\n\t\t */\n\t\tthis.groupedItemsDropdown = this._createGroupedItemsDropdown();\n\n\t\t/**\n\t\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t\t * and manage items that do not fit into a single row.\n\t\t *\n\t\t * **Note:** Created in {@link #_enableGroupingOnResize}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis.resizeObserver = null;\n\n\t\t/**\n\t\t * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n\t\t * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n\t\t * a single toolbar line. This value can be reused between updates because it is unlikely that\n\t\t * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.cachedPadding = null;\n\n\t\t/**\n\t\t * A flag indicating that an items grouping update has been queued (e.g. due to the toolbar being visible)\n\t\t * and should be executed immediately the next time the toolbar shows up.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t// Only those items that were not grouped are visible to the user.\n\t\tview.itemsView.children.bindTo( this.ungroupedItems ).using( item => item );\n\n\t\t// Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n\t\tthis.ungroupedItems.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tthis.ungroupedItems.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n\t\tview.children.on( 'add', this._updateFocusCycleableItems.bind( this ) );\n\t\tview.children.on( 'remove', this._updateFocusCycleableItems.bind( this ) );\n\n\t\t// ToolbarView#items is dynamic. When an item is added or removed, it should be automatically\n\t\t// represented in either grouped or ungrouped items at the right index.\n\t\t// In other words #items == concat( #ungroupedItems, #groupedItems )\n\t\t// (in length and order).\n\t\tview.items.on( 'change', ( evt, changeData ) => {\n\t\t\tconst index = changeData.index;\n\n\t\t\t// Removing.\n\t\t\tfor ( const removedItem of changeData.removed ) {\n\t\t\t\tif ( index >= this.ungroupedItems.length ) {\n\t\t\t\t\tthis.groupedItems.remove( removedItem );\n\t\t\t\t} else {\n\t\t\t\t\tthis.ungroupedItems.remove( removedItem );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adding.\n\t\t\tfor ( let currentIndex = index; currentIndex < index + changeData.added.length; currentIndex++ ) {\n\t\t\t\tconst addedItem = changeData.added[ currentIndex - index ];\n\n\t\t\t\tif ( currentIndex > this.ungroupedItems.length ) {\n\t\t\t\t\tthis.groupedItems.add( addedItem, currentIndex - this.ungroupedItems.length );\n\t\t\t\t} else {\n\t\t\t\t\tthis.ungroupedItems.add( addedItem, currentIndex );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// When new ungrouped items join in and land in #ungroupedItems, there's a chance it causes\n\t\t\t// the toolbar to overflow.\n\t\t\t// Consequently if removed from grouped or ungrouped items, there is a chance\n\t\t\t// some new space is available and we could do some ungrouping.\n\t\t\tthis._updateGrouping();\n\t\t} );\n\n\t\tview.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t// To group items dynamically, the toolbar needs a dedicated CSS class.\n\t\t\t\t\t'ck-toolbar_grouping'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Enables dynamic items grouping based on the dimensions of the toolbar.\n\t *\n\t * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n\t * is added to.\n\t */\n\trender( view ) {\n\t\tthis.viewElement = view.element;\n\n\t\tthis._enableGroupingOnResize();\n\t\tthis._enableGroupingOnMaxWidthChange( view );\n\t}\n\n\t/**\n\t * Cleans up the internals used by this behavior.\n\t */\n\tdestroy() {\n\t\t// The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n\t\t// so let's make sure it's actually destroyed along with the toolbar.\n\t\tthis.groupedItemsDropdown.destroy();\n\n\t\tthis.resizeObserver.destroy();\n\t}\n\n\t/**\n\t * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n\t * and it will move them to the {@link #groupedItems} when it happens.\n\t *\n\t * At the same time, it will also check if there is enough space in the toolbar for the first of the\n\t * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n\t * without the toolbar wrapping.\n\t *\n\t * @protected\n\t */\n\t_updateGrouping() {\n\t\t// Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n\t\t// for instance before #render(), or after render but without a parent or a parent detached\n\t\t// from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n\t\t// nothing else. This happens, for instance, when the toolbar is detached from DOM and\n\t\t// some logic adds or removes its #items.\n\t\tif ( !this.viewElement.ownerDocument.body.contains( this.viewElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not update grouping when the element is invisible. Such toolbar has DOMRect filled with zeros\n\t\t// and that would cause all items to be grouped. Instead, queue the grouping so it runs next time\n\t\t// the toolbar is visible (the next ResizeObserver callback execution). This is handy because\n\t\t// the grouping could be caused by increasing the #maxWidth when the toolbar was invisible and the next\n\t\t// time it shows up, some items could actually be ungrouped (https://github.com/ckeditor/ckeditor5/issues/6575).\n\t\tif ( !isVisible( this.viewElement ) ) {\n\t\t\tthis.shouldUpdateGroupingOnNextResize = true;\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember how many items were initially grouped so at the it is possible to figure out if the number\n\t\t// of grouped items has changed. If the number has changed, geometry of the toolbar has also changed.\n\t\tconst initialGroupedItemsCount = this.groupedItems.length;\n\t\tlet wereItemsGrouped;\n\n\t\t// Group #items as long as some wrap to the next row. This will happen, for instance,\n\t\t// when the toolbar is getting narrow and there is not enough space to display all items in\n\t\t// a single row.\n\t\twhile ( this._areItemsOverflowing ) {\n\t\t\tthis._groupLastItem();\n\n\t\t\twereItemsGrouped = true;\n\t\t}\n\n\t\t// If none were grouped now but there were some items already grouped before,\n\t\t// then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n\t\t// for instance, the toolbar is stretching and there's more space in it than before.\n\t\tif ( !wereItemsGrouped && this.groupedItems.length ) {\n\t\t\t// Ungroup items as long as none are overflowing or there are none to ungroup left.\n\t\t\twhile ( this.groupedItems.length && !this._areItemsOverflowing ) {\n\t\t\t\tthis._ungroupFirstItem();\n\t\t\t}\n\n\t\t\t// If the ungrouping ended up with some item wrapping to the next row,\n\t\t\t// put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n\t\t\t// an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n\t\t\t// clean–up is vital for the algorithm.\n\t\t\tif ( this._areItemsOverflowing ) {\n\t\t\t\tthis._groupLastItem();\n\t\t\t}\n\t\t}\n\n\t\tif ( this.groupedItems.length !== initialGroupedItemsCount ) {\n\t\t\tthis.view.fire( 'groupedItemsUpdate' );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n\t * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n\t *\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _areItemsOverflowing() {\n\t\t// An empty toolbar cannot overflow.\n\t\tif ( !this.ungroupedItems.length ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.viewElement;\n\t\tconst uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n\t\tconst lastChildRect = new Rect( element.lastChild );\n\t\tconst toolbarRect = new Rect( element );\n\n\t\tif ( !this.cachedPadding ) {\n\t\t\tconst computedStyle = global.window.getComputedStyle( element );\n\t\t\tconst paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n\n\t\t\t// parseInt() is essential because of quirky floating point numbers logic and DOM.\n\t\t\t// If the padding turned out too big because of that, the grouped items dropdown would\n\t\t\t// always look (from the Rect perspective) like it overflows (while it's not).\n\t\t\tthis.cachedPadding = Number.parseInt( computedStyle[ paddingProperty ] );\n\t\t}\n\n\t\tif ( uiLanguageDirection === 'ltr' ) {\n\t\t\treturn lastChildRect.right > toolbarRect.right - this.cachedPadding;\n\t\t} else {\n\t\t\treturn lastChildRect.left < toolbarRect.left + this.cachedPadding;\n\t\t}\n\t}\n\n\t/**\n\t * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n\t * upon resize when there is little space available. Instead, the toolbar items are moved to the\n\t * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n\t *\n\t * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n\t * them in the dropdown if necessary. It will also observe the browser window for size changes in\n\t * the future and respond to them by grouping more items or reverting already grouped back, depending\n\t * on the visual space available.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnResize() {\n\t\tlet previousWidth;\n\n\t\t// TODO: Consider debounce.\n\t\tthis.resizeObserver = new ResizeObserver( this.viewElement, entry => {\n\t\t\tif ( !previousWidth || previousWidth !== entry.contentRect.width || this.shouldUpdateGroupingOnNextResize ) {\n\t\t\t\tthis.shouldUpdateGroupingOnNextResize = false;\n\n\t\t\t\tthis._updateGrouping();\n\n\t\t\t\tpreviousWidth = entry.contentRect.width;\n\t\t\t}\n\t\t} );\n\n\t\tthis._updateGrouping();\n\t}\n\n\t/**\n\t * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that\n\t * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.\n\t *\n\t * @private\n\t */\n\t_enableGroupingOnMaxWidthChange( view ) {\n\t\tview.on( 'change:maxWidth', () => {\n\t\t\tthis._updateGrouping();\n\t\t} );\n\t}\n\n\t/**\n\t * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n\t * to the {@link #groupedItems} collection.\n\t *\n\t * The opposite of {@link #_ungroupFirstItem}.\n\t *\n\t * @private\n\t */\n\t_groupLastItem() {\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.add( new ToolbarSeparatorView() );\n\t\t\tthis.viewChildren.add( this.groupedItemsDropdown );\n\t\t\tthis.viewFocusTracker.add( this.groupedItemsDropdown.element );\n\t\t}\n\n\t\tthis.groupedItems.add( this.ungroupedItems.remove( this.ungroupedItems.last ), 0 );\n\t}\n\n\t/**\n\t * Moves the very first item belonging to {@link #groupedItems} back\n\t * to the {@link #ungroupedItems} collection.\n\t *\n\t * The opposite of {@link #_groupLastItem}.\n\t *\n\t * @private\n\t */\n\t_ungroupFirstItem() {\n\t\tthis.ungroupedItems.add( this.groupedItems.remove( this.groupedItems.first ) );\n\n\t\tif ( !this.groupedItems.length ) {\n\t\t\tthis.viewChildren.remove( this.groupedItemsDropdown );\n\t\t\tthis.viewChildren.remove( this.viewChildren.last );\n\t\t\tthis.viewFocusTracker.remove( this.groupedItemsDropdown.element );\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n\t * collection when there is not enough space in the toolbar to display all items in a single row.\n\t *\n\t * @private\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_createGroupedItemsDropdown() {\n\t\tconst locale = this.viewLocale;\n\t\tconst t = locale.t;\n\t\tconst dropdown = createDropdown( locale );\n\n\t\tdropdown.class = 'ck-toolbar__grouped-dropdown';\n\n\t\t// Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n\t\t// (https://github.com/ckeditor/ckeditor5/issues/5608)\n\t\tdropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n\n\t\taddToolbarToDropdown( dropdown, [] );\n\n\t\tdropdown.buttonView.set( {\n\t\t\tlabel: t( 'Show more items' ),\n\t\t\ttooltip: true,\n\t\t\ttooltipPosition: locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw',\n\t\t\ticon: threeVerticalDots\n\t\t} );\n\n\t\t// 1:1 pass–through binding.\n\t\tdropdown.toolbarView.items.bindTo( this.groupedItems ).using( item => item );\n\n\t\treturn dropdown;\n\t}\n\n\t/**\n\t * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n\t * collection so it represents the up–to–date state of the UI from the perspective of the user.\n\t *\n\t * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n\t * it must be subject to focus cycling in the toolbar.\n\t *\n\t * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n\t * to learn more about the purpose of this method.\n\t *\n\t * @private\n\t */\n\t_updateFocusCycleableItems() {\n\t\tthis.viewFocusables.clear();\n\n\t\tthis.ungroupedItems.map( item => {\n\t\t\tthis.viewFocusables.add( item );\n\t\t} );\n\n\t\tif ( this.groupedItems.length ) {\n\t\t\tthis.viewFocusables.add( this.groupedItemsDropdown );\n\t\t}\n\t}\n}\n\n/**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n\n/**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow. For toolbars in absolutely positioned containers\n * without width restrictions also the {@link module:ui/toolbar/toolbarview~ToolbarOptions#isFloating} option is required to be `true`.\n *\n * See also: {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth}.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n\n/**\n * This option should be enabled for toolbars in absolutely positioned containers without width restrictions\n * to enable automatic {@link module:ui/toolbar/toolbarview~ToolbarView#items} grouping.\n * When this option is set to `true`, the items will stop wrapping to the next line\n * and together with {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull},\n * this will allow grouping them when there is not enough space in a single row.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#isFloating\n */\n\n/**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n\n/**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n\n/**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */\n"],"mappings":"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CAAE,iBAAF,CADgB;MAExBiI,OAAO,EAAE,IAFe;MAGxBC,eAAe,EAAEtI,MAAM,CAACgB,mBAAP,KAA+B,KAA/B,GAAuC,IAAvC,GAA8C,IAHvC;MAIxBuH,IAAI,EAAE1I;IAJkB,CAAzB,EAb6B,CAoB7B;;IACAoI,QAAQ,CAACO,WAAT,CAAqBlI,KAArB,CAA2BsE,MAA3B,CAAmC,KAAKS,YAAxC,EAAuDR,KAAvD,CAA8DpC,IAAI,IAAIA,IAAtE;IAEA,OAAOwF,QAAP;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACCtC,0BAA0B,GAAG;IAC5B,KAAKX,cAAL,CAAoByD,KAApB;IAEA,KAAKrD,cAAL,CAAoBrB,GAApB,CAAyBtB,IAAI,IAAI;MAChC,KAAKuC,cAAL,CAAoBnE,GAApB,CAAyB4B,IAAzB;IACA,CAFD;;IAIA,IAAK,KAAK4C,YAAL,CAAkBjB,MAAvB,EAAgC;MAC/B,KAAKY,cAAL,CAAoBnE,GAApB,CAAyB,KAAKyE,oBAA9B;IACA;EACD;;AA/boB;AAkctB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
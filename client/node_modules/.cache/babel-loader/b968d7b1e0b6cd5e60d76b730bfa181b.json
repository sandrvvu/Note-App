{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/background\n */\nimport { getShorthandValues, isAttachment, isColor, isPosition, isRepeat, isURL } from './utils';\n/**\n * Adds a background CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n *\n * The normalized value is stored as:\n *\n *\t\tconst styles = {\n *\t\t\tbackground: {\n *\t\t\t\tcolor,\n *\t\t\t\trepeat,\n *\t\t\t\tposition,\n *\t\t\t\tattachment,\n *\t\t\t\timage\n *\t\t\t}\n *\t\t};\n *\n * **Note**: Currently only `'background-color'` longhand value is parsed besides `'background'` shorthand. The reducer also supports only\n * `'background-color'` value.\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\n\nexport function addBackgroundRules(stylesProcessor) {\n  stylesProcessor.setNormalizer('background', normalizeBackground);\n  stylesProcessor.setNormalizer('background-color', value => ({\n    path: 'background.color',\n    value\n  }));\n  stylesProcessor.setReducer('background', value => {\n    const ret = [];\n    ret.push(['background-color', value.color]);\n    return ret;\n  });\n  stylesProcessor.setStyleRelation('background', ['background-color']);\n}\n\nfunction normalizeBackground(value) {\n  const background = {};\n  const parts = getShorthandValues(value);\n\n  for (const part of parts) {\n    if (isRepeat(part)) {\n      background.repeat = background.repeat || [];\n      background.repeat.push(part);\n    } else if (isPosition(part)) {\n      background.position = background.position || [];\n      background.position.push(part);\n    } else if (isAttachment(part)) {\n      background.attachment = part;\n    } else if (isColor(part)) {\n      background.color = part;\n    } else if (isURL(part)) {\n      background.image = part;\n    }\n  }\n\n  return {\n    path: 'background',\n    value: background\n  };\n}","map":{"version":3,"names":["getShorthandValues","isAttachment","isColor","isPosition","isRepeat","isURL","addBackgroundRules","stylesProcessor","setNormalizer","normalizeBackground","value","path","setReducer","ret","push","color","setStyleRelation","background","parts","part","repeat","position","attachment","image"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/view/styles/background.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/background\n */\n\nimport { getShorthandValues, isAttachment, isColor, isPosition, isRepeat, isURL } from './utils';\n\n/**\n * Adds a background CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBackgroundRules );\n *\n * The normalized value is stored as:\n *\n *\t\tconst styles = {\n *\t\t\tbackground: {\n *\t\t\t\tcolor,\n *\t\t\t\trepeat,\n *\t\t\t\tposition,\n *\t\t\t\tattachment,\n *\t\t\t\timage\n *\t\t\t}\n *\t\t};\n *\n * **Note**: Currently only `'background-color'` longhand value is parsed besides `'background'` shorthand. The reducer also supports only\n * `'background-color'` value.\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\nexport function addBackgroundRules( stylesProcessor ) {\n\tstylesProcessor.setNormalizer( 'background', normalizeBackground );\n\tstylesProcessor.setNormalizer( 'background-color', value => ( { path: 'background.color', value } ) );\n\tstylesProcessor.setReducer( 'background', value => {\n\t\tconst ret = [];\n\n\t\tret.push( [ 'background-color', value.color ] );\n\n\t\treturn ret;\n\t} );\n\n\tstylesProcessor.setStyleRelation( 'background', [ 'background-color' ] );\n}\n\nfunction normalizeBackground( value ) {\n\tconst background = {};\n\n\tconst parts = getShorthandValues( value );\n\n\tfor ( const part of parts ) {\n\t\tif ( isRepeat( part ) ) {\n\t\t\tbackground.repeat = background.repeat || [];\n\t\t\tbackground.repeat.push( part );\n\t\t} else if ( isPosition( part ) ) {\n\t\t\tbackground.position = background.position || [];\n\t\t\tbackground.position.push( part );\n\t\t} else if ( isAttachment( part ) ) {\n\t\t\tbackground.attachment = part;\n\t\t} else if ( isColor( part ) ) {\n\t\t\tbackground.color = part;\n\t\t} else if ( isURL( part ) ) {\n\t\t\tbackground.image = part;\n\t\t}\n\t}\n\n\treturn {\n\t\tpath: 'background',\n\t\tvalue: background\n\t};\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,kBAAT,EAA6BC,YAA7B,EAA2CC,OAA3C,EAAoDC,UAApD,EAAgEC,QAAhE,EAA0EC,KAA1E,QAAuF,SAAvF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6BC,eAA7B,EAA+C;EACrDA,eAAe,CAACC,aAAhB,CAA+B,YAA/B,EAA6CC,mBAA7C;EACAF,eAAe,CAACC,aAAhB,CAA+B,kBAA/B,EAAmDE,KAAK,KAAM;IAAEC,IAAI,EAAE,kBAAR;IAA4BD;EAA5B,CAAN,CAAxD;EACAH,eAAe,CAACK,UAAhB,CAA4B,YAA5B,EAA0CF,KAAK,IAAI;IAClD,MAAMG,GAAG,GAAG,EAAZ;IAEAA,GAAG,CAACC,IAAJ,CAAU,CAAE,kBAAF,EAAsBJ,KAAK,CAACK,KAA5B,CAAV;IAEA,OAAOF,GAAP;EACA,CAND;EAQAN,eAAe,CAACS,gBAAhB,CAAkC,YAAlC,EAAgD,CAAE,kBAAF,CAAhD;AACA;;AAED,SAASP,mBAAT,CAA8BC,KAA9B,EAAsC;EACrC,MAAMO,UAAU,GAAG,EAAnB;EAEA,MAAMC,KAAK,GAAGlB,kBAAkB,CAAEU,KAAF,CAAhC;;EAEA,KAAM,MAAMS,IAAZ,IAAoBD,KAApB,EAA4B;IAC3B,IAAKd,QAAQ,CAAEe,IAAF,CAAb,EAAwB;MACvBF,UAAU,CAACG,MAAX,GAAoBH,UAAU,CAACG,MAAX,IAAqB,EAAzC;MACAH,UAAU,CAACG,MAAX,CAAkBN,IAAlB,CAAwBK,IAAxB;IACA,CAHD,MAGO,IAAKhB,UAAU,CAAEgB,IAAF,CAAf,EAA0B;MAChCF,UAAU,CAACI,QAAX,GAAsBJ,UAAU,CAACI,QAAX,IAAuB,EAA7C;MACAJ,UAAU,CAACI,QAAX,CAAoBP,IAApB,CAA0BK,IAA1B;IACA,CAHM,MAGA,IAAKlB,YAAY,CAAEkB,IAAF,CAAjB,EAA4B;MAClCF,UAAU,CAACK,UAAX,GAAwBH,IAAxB;IACA,CAFM,MAEA,IAAKjB,OAAO,CAAEiB,IAAF,CAAZ,EAAuB;MAC7BF,UAAU,CAACF,KAAX,GAAmBI,IAAnB;IACA,CAFM,MAEA,IAAKd,KAAK,CAAEc,IAAF,CAAV,EAAqB;MAC3BF,UAAU,CAACM,KAAX,GAAmBJ,IAAnB;IACA;EACD;;EAED,OAAO;IACNR,IAAI,EAAE,YADA;IAEND,KAAK,EAAEO;EAFD,CAAP;AAIA"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { isFunction } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\n\nexport default function attachToForm(editor) {\n  if (!isFunction(editor.updateSourceElement)) {\n    /**\n     * The editor passed to `attachToForm()` must implement the\n     * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n     *\n     * @error attachtoform-missing-elementapi-interface\n     */\n    throw new CKEditorError('attachtoform-missing-elementapi-interface', editor);\n  }\n\n  const sourceElement = editor.sourceElement; // Only when replacing a textarea which is inside of a form element.\n\n  if (sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.form) {\n    let originalSubmit;\n    const form = sourceElement.form;\n\n    const onSubmit = () => editor.updateSourceElement(); // Replace the original form#submit() to call a custom submit function first.\n    // Check if #submit is a function because the form might have an input named \"submit\".\n\n\n    if (isFunction(form.submit)) {\n      originalSubmit = form.submit;\n\n      form.submit = () => {\n        onSubmit();\n        originalSubmit.apply(form);\n      };\n    } // Update the replaced textarea with data before each form#submit event.\n\n\n    form.addEventListener('submit', onSubmit); // Remove the submit listener and revert the original submit method on\n    // editor#destroy.\n\n    editor.on('destroy', () => {\n      form.removeEventListener('submit', onSubmit);\n\n      if (originalSubmit) {\n        form.submit = originalSubmit;\n      }\n    });\n  }\n}","map":{"version":3,"names":["isFunction","CKEditorError","attachToForm","editor","updateSourceElement","sourceElement","tagName","toLowerCase","form","originalSubmit","onSubmit","submit","apply","addEventListener","on","removeEventListener"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-core/src/editor/utils/attachtoform.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport { isFunction } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\nexport default function attachToForm( editor ) {\n\tif ( !isFunction( editor.updateSourceElement ) ) {\n\t\t/**\n\t\t * The editor passed to `attachToForm()` must implement the\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */\n\t\tthrow new CKEditorError(\n\t\t\t'attachtoform-missing-elementapi-interface',\n\t\t\teditor\n\t\t);\n\t}\n\n\tconst sourceElement = editor.sourceElement;\n\n\t// Only when replacing a textarea which is inside of a form element.\n\tif ( sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.form ) {\n\t\tlet originalSubmit;\n\t\tconst form = sourceElement.form;\n\t\tconst onSubmit = () => editor.updateSourceElement();\n\n\t\t// Replace the original form#submit() to call a custom submit function first.\n\t\t// Check if #submit is a function because the form might have an input named \"submit\".\n\t\tif ( isFunction( form.submit ) ) {\n\t\t\toriginalSubmit = form.submit;\n\n\t\t\tform.submit = () => {\n\t\t\t\tonSubmit();\n\t\t\t\toriginalSubmit.apply( form );\n\t\t\t};\n\t\t}\n\n\t\t// Update the replaced textarea with data before each form#submit event.\n\t\tform.addEventListener( 'submit', onSubmit );\n\n\t\t// Remove the submit listener and revert the original submit method on\n\t\t// editor#destroy.\n\t\teditor.on( 'destroy', () => {\n\t\t\tform.removeEventListener( 'submit', onSubmit );\n\n\t\t\tif ( originalSubmit ) {\n\t\t\t\tform.submit = originalSubmit;\n\t\t\t}\n\t\t} );\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,WAA3B;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAuBC,MAAvB,EAAgC;EAC9C,IAAK,CAACH,UAAU,CAAEG,MAAM,CAACC,mBAAT,CAAhB,EAAiD;IAChD;AACF;AACA;AACA;AACA;AACA;IACE,MAAM,IAAIH,aAAJ,CACL,2CADK,EAELE,MAFK,CAAN;EAIA;;EAED,MAAME,aAAa,GAAGF,MAAM,CAACE,aAA7B,CAd8C,CAgB9C;;EACA,IAAKA,aAAa,IAAIA,aAAa,CAACC,OAAd,CAAsBC,WAAtB,OAAwC,UAAzD,IAAuEF,aAAa,CAACG,IAA1F,EAAiG;IAChG,IAAIC,cAAJ;IACA,MAAMD,IAAI,GAAGH,aAAa,CAACG,IAA3B;;IACA,MAAME,QAAQ,GAAG,MAAMP,MAAM,CAACC,mBAAP,EAAvB,CAHgG,CAKhG;IACA;;;IACA,IAAKJ,UAAU,CAAEQ,IAAI,CAACG,MAAP,CAAf,EAAiC;MAChCF,cAAc,GAAGD,IAAI,CAACG,MAAtB;;MAEAH,IAAI,CAACG,MAAL,GAAc,MAAM;QACnBD,QAAQ;QACRD,cAAc,CAACG,KAAf,CAAsBJ,IAAtB;MACA,CAHD;IAIA,CAd+F,CAgBhG;;;IACAA,IAAI,CAACK,gBAAL,CAAuB,QAAvB,EAAiCH,QAAjC,EAjBgG,CAmBhG;IACA;;IACAP,MAAM,CAACW,EAAP,CAAW,SAAX,EAAsB,MAAM;MAC3BN,IAAI,CAACO,mBAAL,CAA0B,QAA1B,EAAoCL,QAApC;;MAEA,IAAKD,cAAL,EAAsB;QACrBD,IAAI,CAACG,MAAL,GAAcF,cAAd;MACA;IACD,CAND;EAOA;AACD"},"metadata":{},"sourceType":"module"}
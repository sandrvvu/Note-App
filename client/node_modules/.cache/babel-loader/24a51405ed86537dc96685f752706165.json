{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertAttributesAndChildren, insertText, remove } from '../conversion/downcasthelpers';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { convertSelectionChange } from '../conversion/upcasthelpers'; // @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n\n/**\n * A controller for the editing pipeline. The editing pipeline controls the {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class EditingController {\n  /**\n   * Creates an editing controller instance.\n   *\n   * @param {module:engine/model/model~Model} model Editing model.\n   * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n   */\n  constructor(model, stylesProcessor) {\n    /**\n     * Editor model.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * Editing view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View}\n     */\n\n    this.view = new View(stylesProcessor);\n    /**\n     * A mapper that describes the model-view binding.\n     *\n     * @readonly\n     * @member {module:engine/conversion/mapper~Mapper}\n     */\n\n    this.mapper = new Mapper();\n    /**\n     * Downcast dispatcher that converts changes from the model to the {@link #view editing view}.\n     *\n     * @readonly\n     * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n     */\n\n    this.downcastDispatcher = new DowncastDispatcher({\n      mapper: this.mapper,\n      schema: model.schema\n    });\n    const doc = this.model.document;\n    const selection = doc.selection;\n    const markers = this.model.markers; // When plugins listen on model changes (on selection change, post fixers, etc.) and change the view as a result of\n    // the model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n    // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n    //\n    // See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\n    this.listenTo(this.model, '_beforeChanges', () => {\n      this.view._disableRendering(true);\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(this.model, '_afterChanges', () => {\n      this.view._disableRendering(false);\n    }, {\n      priority: 'lowest'\n    }); // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n    // Do it on 'low' priority, so changes are converted after other listeners did their job.\n    // Also convert model selection.\n\n    this.listenTo(doc, 'change', () => {\n      this.view.change(writer => {\n        this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n        this.downcastDispatcher.convertSelection(selection, markers, writer);\n      });\n    }, {\n      priority: 'low'\n    }); // Convert selection from the view to the model when it changes in the view.\n\n    this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper)); // Attach default model converters.\n\n    this.downcastDispatcher.on('insert:$text', insertText(), {\n      priority: 'lowest'\n    });\n    this.downcastDispatcher.on('insert', insertAttributesAndChildren(), {\n      priority: 'lowest'\n    });\n    this.downcastDispatcher.on('remove', remove(), {\n      priority: 'low'\n    }); // Attach default model selection converters.\n\n    this.downcastDispatcher.on('selection', clearAttributes(), {\n      priority: 'high'\n    });\n    this.downcastDispatcher.on('selection', convertRangeSelection(), {\n      priority: 'low'\n    });\n    this.downcastDispatcher.on('selection', convertCollapsedSelection(), {\n      priority: 'low'\n    }); // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n    // {@link module:engine/model/document~Document#roots model roots collection} so creating\n    // model root automatically creates corresponding view root.\n\n    this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n      // $graveyard is a special root that has no reflection in the view.\n      if (root.rootName == '$graveyard') {\n        return null;\n      }\n\n      const viewRoot = new RootEditableElement(this.view.document, root.name);\n      viewRoot.rootName = root.rootName;\n      this.mapper.bindElements(root, viewRoot);\n      return viewRoot;\n    }); // @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n    // @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n    // @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n    // @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n    // @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n  }\n  /**\n   * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n   * by `EditingController` that need to be destroyed.\n   */\n\n\n  destroy() {\n    this.view.destroy();\n    this.stopListening();\n  }\n  /**\n   * Calling this method will refresh the marker by triggering the downcast conversion for it.\n   *\n   * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}\n   * without changing any marker data. For instance:\n   *\n   *\t\tlet isCommentActive = false;\n   *\n   *\t\tmodel.conversion.markerToHighlight( {\n   *\t\t\tmodel: 'comment',\n   *\t\t\tview: data => {\n   *\t\t\t\tconst classes = [ 'comment-marker' ];\n   *\n   *\t\t\t\tif ( isCommentActive ) {\n   *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n   *\t\t\t\t}\n   *\n   *\t\t\t\treturn { classes };\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// ...\n   *\n   *\t\t// Change the property that indicates if marker is displayed as active or not.\n   *\t\tisCommentActive = true;\n   *\n   *\t\t// Reconverting will downcast and synchronize the marker with the new isCommentActive state value.\n   *\t\teditor.editing.reconvertMarker( 'comment' );\n   *\n   * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.\n   *\n   * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n   */\n\n\n  reconvertMarker(markerOrName) {\n    const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n    const currentMarker = this.model.markers.get(markerName);\n\n    if (!currentMarker) {\n      /**\n       * The marker with the provided name does not exist and cannot be reconverted.\n       *\n       * @error editingcontroller-reconvertmarker-marker-not-exist\n       * @param {String} markerName The name of the reconverted marker.\n       */\n      throw new CKEditorError('editingcontroller-reconvertmarker-marker-not-exist', this, {\n        markerName\n      });\n    }\n\n    this.model.change(() => {\n      this.model.markers._refresh(currentMarker);\n    });\n  }\n  /**\n   * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).\n   *\n   * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,\n   * when the view structure depends not only on the associated model data but also on some external state.\n   *\n   * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.\n   *\n   * @param {module:engine/model/item~Item} item Item to refresh.\n   */\n\n\n  reconvertItem(item) {\n    this.model.change(() => {\n      this.model.document.differ._refreshItem(item);\n    });\n  }\n\n}\nmix(EditingController, ObservableMixin);","map":{"version":3,"names":["RootEditableElement","View","Mapper","DowncastDispatcher","clearAttributes","convertCollapsedSelection","convertRangeSelection","insertAttributesAndChildren","insertText","remove","ObservableMixin","mix","CKEditorError","convertSelectionChange","EditingController","constructor","model","stylesProcessor","view","mapper","downcastDispatcher","schema","doc","document","selection","markers","listenTo","_disableRendering","priority","change","writer","convertChanges","differ","convertSelection","on","roots","bindTo","using","root","rootName","viewRoot","name","bindElements","destroy","stopListening","reconvertMarker","markerOrName","markerName","currentMarker","get","_refresh","reconvertItem","item","_refreshItem"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport {\n\tclearAttributes,\n\tconvertCollapsedSelection,\n\tconvertRangeSelection,\n\tinsertAttributesAndChildren,\n\tinsertText,\n\tremove\n} from '../conversion/downcasthelpers';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n\n// @if CK_DEBUG_ENGINE // const { dumpTrees, initDocumentDumping } = require( '../dev-utils/utils' );\n\n/**\n * A controller for the editing pipeline. The editing pipeline controls the {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor The styles processor instance.\n\t */\n\tconstructor( model, stylesProcessor ) {\n\t\t/**\n\t\t * Editor model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View( stylesProcessor );\n\n\t\t/**\n\t\t * A mapper that describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to the {@link #view editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper,\n\t\t\tschema: model.schema\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\t// When plugins listen on model changes (on selection change, post fixers, etc.) and change the view as a result of\n\t\t// the model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n\t\t// is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n\t\t//\n\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\t\tthis.listenTo( this.model, '_beforeChanges', () => {\n\t\t\tthis.view._disableRendering( true );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this.model, '_afterChanges', () => {\n\t\t\tthis.view._disableRendering( false );\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n\t\t// Do it on 'low' priority, so changes are converted after other listeners did their job.\n\t\t// Also convert model selection.\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, markers, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from the view to the model when it changes in the view.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'insert', insertAttributesAndChildren(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'high' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( this.view.document, root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\n\t\t// @if CK_DEBUG_ENGINE // initDocumentDumping( this.model.document );\n\t\t// @if CK_DEBUG_ENGINE // initDocumentDumping( this.view.document );\n\n\t\t// @if CK_DEBUG_ENGINE // dumpTrees( this.model.document, this.model.document.version );\n\t\t// @if CK_DEBUG_ENGINE // dumpTrees( this.view.document, this.model.document.version );\n\n\t\t// @if CK_DEBUG_ENGINE // this.model.document.on( 'change', () => {\n\t\t// @if CK_DEBUG_ENGINE //\tdumpTrees( this.view.document, this.model.document.version );\n\t\t// @if CK_DEBUG_ENGINE // }, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Calling this method will refresh the marker by triggering the downcast conversion for it.\n\t *\n\t * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}\n\t * without changing any marker data. For instance:\n\t *\n\t *\t\tlet isCommentActive = false;\n\t *\n\t *\t\tmodel.conversion.markerToHighlight( {\n\t *\t\t\tmodel: 'comment',\n\t *\t\t\tview: data => {\n\t *\t\t\t\tconst classes = [ 'comment-marker' ];\n\t *\n\t *\t\t\t\tif ( isCommentActive ) {\n\t *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn { classes };\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// ...\n\t *\n\t *\t\t// Change the property that indicates if marker is displayed as active or not.\n\t *\t\tisCommentActive = true;\n\t *\n\t *\t\t// Reconverting will downcast and synchronize the marker with the new isCommentActive state value.\n\t *\t\teditor.editing.reconvertMarker( 'comment' );\n\t *\n\t * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.\n\t *\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n\t */\n\treconvertMarker( markerOrName ) {\n\t\tconst markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !currentMarker ) {\n\t\t\t/**\n\t\t\t * The marker with the provided name does not exist and cannot be reconverted.\n\t\t\t *\n\t\t\t * @error editingcontroller-reconvertmarker-marker-not-exist\n\t\t\t * @param {String} markerName The name of the reconverted marker.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'editingcontroller-reconvertmarker-marker-not-exist', this, { markerName } );\n\t\t}\n\n\t\tthis.model.change( () => {\n\t\t\tthis.model.markers._refresh( currentMarker );\n\t\t} );\n\t}\n\n\t/**\n\t * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).\n\t *\n\t * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,\n\t * when the view structure depends not only on the associated model data but also on some external state.\n\t *\n\t * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.\n\t *\n\t * @param {module:engine/model/item~Item} item Item to refresh.\n\t */\n\treconvertItem( item ) {\n\t\tthis.model.change( () => {\n\t\t\tthis.model.document.differ._refreshItem( item );\n\t\t} );\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditorui\n */\nimport { EditorUI } from 'ckeditor5/src/core';\nimport { enableToolbarKeyboardFocus, normalizeToolbarConfig } from 'ckeditor5/src/ui';\nimport { enablePlaceholder } from 'ckeditor5/src/engine';\nimport { ElementReplacer } from 'ckeditor5/src/utils';\n/**\n * The classic editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\n\nexport default class ClassicEditorUI extends EditorUI {\n  /**\n   * Creates an instance of the classic editor UI class.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n   */\n  constructor(editor, view) {\n    super(editor);\n    /**\n     * The main (top–most) view of the editor UI.\n     *\n     * @readonly\n     * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n     */\n\n    this.view = view;\n    /**\n     * A normalized `config.toolbar` object.\n     *\n     * @private\n     * @member {Object}\n     */\n\n    this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n    /**\n     * The element replacer instance used to hide the editor's source element.\n     *\n     * @protected\n     * @member {module:utils/elementreplacer~ElementReplacer}\n     */\n\n    this._elementReplacer = new ElementReplacer();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get element() {\n    return this.view.element;\n  }\n  /**\n   * Initializes the UI.\n   *\n   * @param {HTMLElement|null} replacementElement The DOM element that will be the source for the created editor.\n   */\n\n\n  init(replacementElement) {\n    const editor = this.editor;\n    const view = this.view;\n    const editingView = editor.editing.view;\n    const editable = view.editable;\n    const editingRoot = editingView.document.getRoot(); // The editable UI and editing root should share the same name. Then name is used\n    // to recognize the particular editable, for instance in ARIA attributes.\n\n    editable.name = editingRoot.rootName;\n    view.render(); // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n    // But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n\n    const editableElement = editable.element; // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n    // editable areas (roots) but the classic editor has only one.\n\n    this.setEditableElement(editable.name, editableElement); // Let the global focus tracker know that the editable UI element is focusable and\n    // belongs to the editor. From now on, the focus tracker will sustain the editor focus\n    // as long as the editable is focused (e.g. the user is typing).\n\n    this.focusTracker.add(editableElement); // Let the editable UI element respond to the changes in the global editor focus\n    // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n    // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n    // as they have focus, the editable should act like it is focused too (although technically\n    // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n    // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n    // toolbar gets focused.\n\n    view.editable.bind('isFocused').to(this.focusTracker); // Bind the editable UI element to the editing view, making it an end– and entry–point\n    // of the editor's engine. This is where the engine meets the UI.\n\n    editingView.attachDomRoot(editableElement); // If an element containing the initial data of the editor was provided, replace it with\n    // an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n    // can be such element.\n\n    if (replacementElement) {\n      this._elementReplacer.replace(replacementElement, this.element);\n    }\n\n    this._initPlaceholder();\n\n    this._initToolbar();\n\n    this.fire('ready');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    const view = this.view;\n    const editingView = this.editor.editing.view;\n\n    this._elementReplacer.restore();\n\n    editingView.detachDomRoot(view.editable.name);\n    view.destroy();\n    super.destroy();\n  }\n  /**\n   * Initializes the editor toolbar.\n   *\n   * @private\n   */\n\n\n  _initToolbar() {\n    const editor = this.editor;\n    const view = this.view;\n    const editingView = editor.editing.view; // Set–up the sticky panel with toolbar.\n\n    view.stickyPanel.bind('isActive').to(this.focusTracker, 'isFocused');\n    view.stickyPanel.limiterElement = view.element;\n    view.stickyPanel.bind('viewportTopOffset').to(this, 'viewportOffset', _ref => {\n      let {\n        top\n      } = _ref;\n      return top;\n    });\n    view.toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory);\n    enableToolbarKeyboardFocus({\n      origin: editingView,\n      originFocusTracker: this.focusTracker,\n      originKeystrokeHandler: editor.keystrokes,\n      toolbar: view.toolbar\n    });\n  }\n  /**\n   * Enable the placeholder text on the editing root, if any was configured.\n   *\n   * @private\n   */\n\n\n  _initPlaceholder() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    const editingRoot = editingView.document.getRoot();\n    const sourceElement = editor.sourceElement;\n    const placeholderText = editor.config.get('placeholder') || sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute('placeholder');\n\n    if (placeholderText) {\n      enablePlaceholder({\n        view: editingView,\n        element: editingRoot,\n        text: placeholderText,\n        isDirectHost: false,\n        keepOnFocus: true\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["EditorUI","enableToolbarKeyboardFocus","normalizeToolbarConfig","enablePlaceholder","ElementReplacer","ClassicEditorUI","constructor","editor","view","_toolbarConfig","config","get","_elementReplacer","element","init","replacementElement","editingView","editing","editable","editingRoot","document","getRoot","name","rootName","render","editableElement","setEditableElement","focusTracker","add","bind","to","attachDomRoot","replace","_initPlaceholder","_initToolbar","fire","destroy","restore","detachDomRoot","stickyPanel","limiterElement","top","toolbar","fillFromConfig","componentFactory","origin","originFocusTracker","originKeystrokeHandler","keystrokes","sourceElement","placeholderText","tagName","toLowerCase","getAttribute","text","isDirectHost","keepOnFocus"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-editor-classic/src/classiceditorui.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-classic/classiceditorui\n */\n\nimport { EditorUI } from 'ckeditor5/src/core';\nimport { enableToolbarKeyboardFocus, normalizeToolbarConfig } from 'ckeditor5/src/ui';\nimport { enablePlaceholder } from 'ckeditor5/src/engine';\nimport { ElementReplacer } from 'ckeditor5/src/utils';\n\n/**\n * The classic editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\nexport default class ClassicEditorUI extends EditorUI {\n\t/**\n\t * Creates an instance of the classic editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The main (top–most) view of the editor UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * A normalized `config.toolbar` object.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._toolbarConfig = normalizeToolbarConfig( editor.config.get( 'toolbar' ) );\n\n\t\t/**\n\t\t * The element replacer instance used to hide the editor's source element.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/elementreplacer~ElementReplacer}\n\t\t */\n\t\tthis._elementReplacer = new ElementReplacer();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget element() {\n\t\treturn this.view.element;\n\t}\n\n\t/**\n\t * Initializes the UI.\n\t *\n\t * @param {HTMLElement|null} replacementElement The DOM element that will be the source for the created editor.\n\t */\n\tinit( replacementElement ) {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editable = view.editable;\n\t\tconst editingRoot = editingView.document.getRoot();\n\n\t\t// The editable UI and editing root should share the same name. Then name is used\n\t\t// to recognize the particular editable, for instance in ARIA attributes.\n\t\teditable.name = editingRoot.rootName;\n\n\t\tview.render();\n\n\t\t// The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n\t\t// But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n\t\tconst editableElement = editable.element;\n\n\t\t// Register the editable UI view in the editor. A single editor instance can aggregate multiple\n\t\t// editable areas (roots) but the classic editor has only one.\n\t\tthis.setEditableElement( editable.name, editableElement );\n\n\t\t// Let the global focus tracker know that the editable UI element is focusable and\n\t\t// belongs to the editor. From now on, the focus tracker will sustain the editor focus\n\t\t// as long as the editable is focused (e.g. the user is typing).\n\t\tthis.focusTracker.add( editableElement );\n\n\t\t// Let the editable UI element respond to the changes in the global editor focus\n\t\t// tracker. It has been added to the same tracker a few lines above but, in reality, there are\n\t\t// many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n\t\t// as they have focus, the editable should act like it is focused too (although technically\n\t\t// it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n\t\t// Doing otherwise will result in editable focus styles disappearing, once e.g. the\n\t\t// toolbar gets focused.\n\t\tview.editable.bind( 'isFocused' ).to( this.focusTracker );\n\n\t\t// Bind the editable UI element to the editing view, making it an end– and entry–point\n\t\t// of the editor's engine. This is where the engine meets the UI.\n\t\teditingView.attachDomRoot( editableElement );\n\n\t\t// If an element containing the initial data of the editor was provided, replace it with\n\t\t// an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n\t\t// can be such element.\n\t\tif ( replacementElement ) {\n\t\t\tthis._elementReplacer.replace( replacementElement, this.element );\n\t\t}\n\n\t\tthis._initPlaceholder();\n\t\tthis._initToolbar();\n\t\tthis.fire( 'ready' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tconst view = this.view;\n\t\tconst editingView = this.editor.editing.view;\n\n\t\tthis._elementReplacer.restore();\n\t\teditingView.detachDomRoot( view.editable.name );\n\t\tview.destroy();\n\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Initializes the editor toolbar.\n\t *\n\t * @private\n\t */\n\t_initToolbar() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst editingView = editor.editing.view;\n\n\t\t// Set–up the sticky panel with toolbar.\n\t\tview.stickyPanel.bind( 'isActive' ).to( this.focusTracker, 'isFocused' );\n\t\tview.stickyPanel.limiterElement = view.element;\n\t\tview.stickyPanel.bind( 'viewportTopOffset' ).to( this, 'viewportOffset', ( { top } ) => top );\n\n\t\tview.toolbar.fillFromConfig( this._toolbarConfig, this.componentFactory );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editingView,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar: view.toolbar\n\t\t} );\n\t}\n\n\t/**\n\t * Enable the placeholder text on the editing root, if any was configured.\n\t *\n\t * @private\n\t */\n\t_initPlaceholder() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\t\tconst editingRoot = editingView.document.getRoot();\n\t\tconst sourceElement = editor.sourceElement;\n\n\t\tconst placeholderText = editor.config.get( 'placeholder' ) ||\n\t\t\tsourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute( 'placeholder' );\n\n\t\tif ( placeholderText ) {\n\t\t\tenablePlaceholder( {\n\t\t\t\tview: editingView,\n\t\t\t\telement: editingRoot,\n\t\t\t\ttext: placeholderText,\n\t\t\t\tisDirectHost: false,\n\t\t\t\tkeepOnFocus: true\n\t\t\t} );\n\t\t}\n\t}\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/border\n */\nimport { getShorthandValues, getBoxSidesValueReducer, getBoxSidesValues, isLength, isLineStyle } from './utils';\n/**\n * Adds a border CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBorderRules );\n *\n * This rules merges all [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) styles notation shorthands:\n *\n * - border\n * - border-top\n * - border-right\n * - border-bottom\n * - border-left\n * - border-color\n * - border-style\n * - border-width\n *\n * and all corresponding longhand forms (like `border-top-color`, `border-top-style`, etc).\n *\n * It does not handle other shorthands (like `border-radius` or `border-image`).\n *\n * The normalized model stores border values as:\n *\n *\t\tconst styles = {\n *\t\t\tborder: {\n *\t\t\t\tcolor: { top, right, bottom, left },\n *\t\t\t\tstyle: { top, right, bottom, left },\n *\t\t\t\twidth: { top, right, bottom, left },\n *\t\t\t}\n *\t\t};\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\n\nexport function addBorderRules(stylesProcessor) {\n  stylesProcessor.setNormalizer('border', borderNormalizer); // Border-position shorthands.\n\n  stylesProcessor.setNormalizer('border-top', getBorderPositionNormalizer('top'));\n  stylesProcessor.setNormalizer('border-right', getBorderPositionNormalizer('right'));\n  stylesProcessor.setNormalizer('border-bottom', getBorderPositionNormalizer('bottom'));\n  stylesProcessor.setNormalizer('border-left', getBorderPositionNormalizer('left')); // Border-property shorthands.\n\n  stylesProcessor.setNormalizer('border-color', getBorderPropertyNormalizer('color'));\n  stylesProcessor.setNormalizer('border-width', getBorderPropertyNormalizer('width'));\n  stylesProcessor.setNormalizer('border-style', getBorderPropertyNormalizer('style')); // Border longhands.\n\n  stylesProcessor.setNormalizer('border-top-color', getBorderPropertyPositionNormalizer('color', 'top'));\n  stylesProcessor.setNormalizer('border-top-style', getBorderPropertyPositionNormalizer('style', 'top'));\n  stylesProcessor.setNormalizer('border-top-width', getBorderPropertyPositionNormalizer('width', 'top'));\n  stylesProcessor.setNormalizer('border-right-color', getBorderPropertyPositionNormalizer('color', 'right'));\n  stylesProcessor.setNormalizer('border-right-style', getBorderPropertyPositionNormalizer('style', 'right'));\n  stylesProcessor.setNormalizer('border-right-width', getBorderPropertyPositionNormalizer('width', 'right'));\n  stylesProcessor.setNormalizer('border-bottom-color', getBorderPropertyPositionNormalizer('color', 'bottom'));\n  stylesProcessor.setNormalizer('border-bottom-style', getBorderPropertyPositionNormalizer('style', 'bottom'));\n  stylesProcessor.setNormalizer('border-bottom-width', getBorderPropertyPositionNormalizer('width', 'bottom'));\n  stylesProcessor.setNormalizer('border-left-color', getBorderPropertyPositionNormalizer('color', 'left'));\n  stylesProcessor.setNormalizer('border-left-style', getBorderPropertyPositionNormalizer('style', 'left'));\n  stylesProcessor.setNormalizer('border-left-width', getBorderPropertyPositionNormalizer('width', 'left'));\n  stylesProcessor.setExtractor('border-top', getBorderPositionExtractor('top'));\n  stylesProcessor.setExtractor('border-right', getBorderPositionExtractor('right'));\n  stylesProcessor.setExtractor('border-bottom', getBorderPositionExtractor('bottom'));\n  stylesProcessor.setExtractor('border-left', getBorderPositionExtractor('left'));\n  stylesProcessor.setExtractor('border-top-color', 'border.color.top');\n  stylesProcessor.setExtractor('border-right-color', 'border.color.right');\n  stylesProcessor.setExtractor('border-bottom-color', 'border.color.bottom');\n  stylesProcessor.setExtractor('border-left-color', 'border.color.left');\n  stylesProcessor.setExtractor('border-top-width', 'border.width.top');\n  stylesProcessor.setExtractor('border-right-width', 'border.width.right');\n  stylesProcessor.setExtractor('border-bottom-width', 'border.width.bottom');\n  stylesProcessor.setExtractor('border-left-width', 'border.width.left');\n  stylesProcessor.setExtractor('border-top-style', 'border.style.top');\n  stylesProcessor.setExtractor('border-right-style', 'border.style.right');\n  stylesProcessor.setExtractor('border-bottom-style', 'border.style.bottom');\n  stylesProcessor.setExtractor('border-left-style', 'border.style.left');\n  stylesProcessor.setReducer('border-color', getBoxSidesValueReducer('border-color'));\n  stylesProcessor.setReducer('border-style', getBoxSidesValueReducer('border-style'));\n  stylesProcessor.setReducer('border-width', getBoxSidesValueReducer('border-width'));\n  stylesProcessor.setReducer('border-top', getBorderPositionReducer('top'));\n  stylesProcessor.setReducer('border-right', getBorderPositionReducer('right'));\n  stylesProcessor.setReducer('border-bottom', getBorderPositionReducer('bottom'));\n  stylesProcessor.setReducer('border-left', getBorderPositionReducer('left'));\n  stylesProcessor.setReducer('border', getBorderReducer());\n  stylesProcessor.setStyleRelation('border', ['border-color', 'border-style', 'border-width', 'border-top', 'border-right', 'border-bottom', 'border-left', 'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color', 'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style', 'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width']);\n  stylesProcessor.setStyleRelation('border-color', ['border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color']);\n  stylesProcessor.setStyleRelation('border-style', ['border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style']);\n  stylesProcessor.setStyleRelation('border-width', ['border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width']);\n  stylesProcessor.setStyleRelation('border-top', ['border-top-color', 'border-top-style', 'border-top-width']);\n  stylesProcessor.setStyleRelation('border-right', ['border-right-color', 'border-right-style', 'border-right-width']);\n  stylesProcessor.setStyleRelation('border-bottom', ['border-bottom-color', 'border-bottom-style', 'border-bottom-width']);\n  stylesProcessor.setStyleRelation('border-left', ['border-left-color', 'border-left-style', 'border-left-width']);\n}\n\nfunction borderNormalizer(value) {\n  const {\n    color,\n    style,\n    width\n  } = normalizeBorderShorthand(value);\n  return {\n    path: 'border',\n    value: {\n      color: getBoxSidesValues(color),\n      style: getBoxSidesValues(style),\n      width: getBoxSidesValues(width)\n    }\n  };\n}\n\nfunction getBorderPositionNormalizer(side) {\n  return value => {\n    const {\n      color,\n      style,\n      width\n    } = normalizeBorderShorthand(value);\n    const border = {};\n\n    if (color !== undefined) {\n      border.color = {\n        [side]: color\n      };\n    }\n\n    if (style !== undefined) {\n      border.style = {\n        [side]: style\n      };\n    }\n\n    if (width !== undefined) {\n      border.width = {\n        [side]: width\n      };\n    }\n\n    return {\n      path: 'border',\n      value: border\n    };\n  };\n}\n\nfunction getBorderPropertyNormalizer(propertyName) {\n  return value => {\n    return {\n      path: 'border',\n      value: toBorderPropertyShorthand(value, propertyName)\n    };\n  };\n}\n\nfunction toBorderPropertyShorthand(value, property) {\n  return {\n    [property]: getBoxSidesValues(value)\n  };\n}\n\nfunction getBorderPropertyPositionNormalizer(property, side) {\n  return value => {\n    return {\n      path: 'border',\n      value: {\n        [property]: {\n          [side]: value\n        }\n      }\n    };\n  };\n}\n\nfunction getBorderPositionExtractor(which) {\n  return (name, styles) => {\n    if (styles.border) {\n      return extractBorderPosition(styles.border, which);\n    }\n  };\n}\n\nfunction extractBorderPosition(border, which) {\n  const value = {};\n\n  if (border.width && border.width[which]) {\n    value.width = border.width[which];\n  }\n\n  if (border.style && border.style[which]) {\n    value.style = border.style[which];\n  }\n\n  if (border.color && border.color[which]) {\n    value.color = border.color[which];\n  }\n\n  return value;\n}\n\nfunction normalizeBorderShorthand(string) {\n  const result = {};\n  const parts = getShorthandValues(string);\n\n  for (const part of parts) {\n    if (isLength(part) || /thin|medium|thick/.test(part)) {\n      result.width = part;\n    } else if (isLineStyle(part)) {\n      result.style = part;\n    } else {\n      result.color = part;\n    }\n  }\n\n  return result;\n} // The border reducer factory.\n//\n// It tries to produce the most optimal output for the specified styles.\n//\n// For a border style:\n//\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-style: solid`.\n// For a border style and color:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-color: #ff0; border-style: solid`.\n// If all border parameters are specified:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//      width: {top: \"2px\", bottom: \"2px\", right: \"2px\", left: \"2px\"}\n//\n// It will combine everything into a single property: `border: 2px solid #ff0`.\n//\n// The definitions are merged only if all border selectors have the same values.\n//\n// @returns {Function}\n\n\nfunction getBorderReducer() {\n  return value => {\n    const topStyles = extractBorderPosition(value, 'top');\n    const rightStyles = extractBorderPosition(value, 'right');\n    const bottomStyles = extractBorderPosition(value, 'bottom');\n    const leftStyles = extractBorderPosition(value, 'left');\n    const borderStyles = [topStyles, rightStyles, bottomStyles, leftStyles];\n    const borderStylesByType = {\n      width: getReducedStyleValueForType(borderStyles, 'width'),\n      style: getReducedStyleValueForType(borderStyles, 'style'),\n      color: getReducedStyleValueForType(borderStyles, 'color')\n    }; // Try reducing to a single `border:` property.\n\n    const reducedBorderStyle = reduceBorderPosition(borderStylesByType, 'all');\n\n    if (reducedBorderStyle.length) {\n      return reducedBorderStyle;\n    } // Try reducing to `border-style:`, `border-width:`, `border-color:` properties.\n\n\n    const reducedStyleTypes = Object.entries(borderStylesByType).reduce((reducedStyleTypes, _ref) => {\n      let [type, value] = _ref;\n\n      if (value) {\n        reducedStyleTypes.push([`border-${type}`, value]); // Remove it from the full set to not include it in the most specific properties later.\n\n        borderStyles.forEach(style => style[type] = null);\n      }\n\n      return reducedStyleTypes;\n    }, []); // The reduced properties (by type) and all that remains that could not be reduced.\n\n    return [...reducedStyleTypes, ...reduceBorderPosition(topStyles, 'top'), ...reduceBorderPosition(rightStyles, 'right'), ...reduceBorderPosition(bottomStyles, 'bottom'), ...reduceBorderPosition(leftStyles, 'left')];\n  }; // @param {Array.<Object>} styles The array of objects with `style`, `color`, `width` properties.\n  // @param {'width'|'style'|'color'} type\n\n  function getReducedStyleValueForType(styles, type) {\n    return styles.map(style => style[type]).reduce((result, style) => result == style ? result : null);\n  }\n}\n\nfunction getBorderPositionReducer(which) {\n  return value => reduceBorderPosition(value, which);\n} // Returns an array with reduced border styles depending on the specified values.\n//\n// If all border properties (width, style, color) are specified, the returned selector will be\n// merged into a group: `border-*: [width] [style] [color]`.\n//\n// Otherwise, the specific definitions will be returned: `border-(width|style|color)-*: [value]`.\n//\n// @param {Object|null} value Styles if defined.\n// @param {'top'|'right'|'bottom'|'left'|'all'} which The border position.\n// @returns {Array}\n\n\nfunction reduceBorderPosition(value, which) {\n  const borderTypes = [];\n\n  if (value && value.width) {\n    borderTypes.push('width');\n  }\n\n  if (value && value.style) {\n    borderTypes.push('style');\n  }\n\n  if (value && value.color) {\n    borderTypes.push('color');\n  }\n\n  if (borderTypes.length == 3) {\n    const borderValue = borderTypes.map(item => value[item]).join(' ');\n    return [which == 'all' ? ['border', borderValue] : [`border-${which}`, borderValue]];\n  } // We are unable to reduce to a single `border:` property.\n\n\n  if (which == 'all') {\n    return [];\n  }\n\n  return borderTypes.map(type => {\n    return [`border-${which}-${type}`, value[type]];\n  });\n}","map":{"version":3,"names":["getShorthandValues","getBoxSidesValueReducer","getBoxSidesValues","isLength","isLineStyle","addBorderRules","stylesProcessor","setNormalizer","borderNormalizer","getBorderPositionNormalizer","getBorderPropertyNormalizer","getBorderPropertyPositionNormalizer","setExtractor","getBorderPositionExtractor","setReducer","getBorderPositionReducer","getBorderReducer","setStyleRelation","value","color","style","width","normalizeBorderShorthand","path","side","border","undefined","propertyName","toBorderPropertyShorthand","property","which","name","styles","extractBorderPosition","string","result","parts","part","test","topStyles","rightStyles","bottomStyles","leftStyles","borderStyles","borderStylesByType","getReducedStyleValueForType","reducedBorderStyle","reduceBorderPosition","length","reducedStyleTypes","Object","entries","reduce","type","push","forEach","map","borderTypes","borderValue","item","join"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/view/styles/border.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/styles/border\n */\n\nimport { getShorthandValues, getBoxSidesValueReducer, getBoxSidesValues, isLength, isLineStyle } from './utils';\n\n/**\n * Adds a border CSS styles processing rules.\n *\n *\t\teditor.data.addStyleProcessorRules( addBorderRules );\n *\n * This rules merges all [border](https://developer.mozilla.org/en-US/docs/Web/CSS/border) styles notation shorthands:\n *\n * - border\n * - border-top\n * - border-right\n * - border-bottom\n * - border-left\n * - border-color\n * - border-style\n * - border-width\n *\n * and all corresponding longhand forms (like `border-top-color`, `border-top-style`, etc).\n *\n * It does not handle other shorthands (like `border-radius` or `border-image`).\n *\n * The normalized model stores border values as:\n *\n *\t\tconst styles = {\n *\t\t\tborder: {\n *\t\t\t\tcolor: { top, right, bottom, left },\n *\t\t\t\tstyle: { top, right, bottom, left },\n *\t\t\t\twidth: { top, right, bottom, left },\n *\t\t\t}\n *\t\t};\n *\n * @param {module:engine/view/stylesmap~StylesProcessor} stylesProcessor\n */\nexport function addBorderRules( stylesProcessor ) {\n\tstylesProcessor.setNormalizer( 'border', borderNormalizer );\n\n\t// Border-position shorthands.\n\tstylesProcessor.setNormalizer( 'border-top', getBorderPositionNormalizer( 'top' ) );\n\tstylesProcessor.setNormalizer( 'border-right', getBorderPositionNormalizer( 'right' ) );\n\tstylesProcessor.setNormalizer( 'border-bottom', getBorderPositionNormalizer( 'bottom' ) );\n\tstylesProcessor.setNormalizer( 'border-left', getBorderPositionNormalizer( 'left' ) );\n\n\t// Border-property shorthands.\n\tstylesProcessor.setNormalizer( 'border-color', getBorderPropertyNormalizer( 'color' ) );\n\tstylesProcessor.setNormalizer( 'border-width', getBorderPropertyNormalizer( 'width' ) );\n\tstylesProcessor.setNormalizer( 'border-style', getBorderPropertyNormalizer( 'style' ) );\n\n\t// Border longhands.\n\tstylesProcessor.setNormalizer( 'border-top-color', getBorderPropertyPositionNormalizer( 'color', 'top' ) );\n\tstylesProcessor.setNormalizer( 'border-top-style', getBorderPropertyPositionNormalizer( 'style', 'top' ) );\n\tstylesProcessor.setNormalizer( 'border-top-width', getBorderPropertyPositionNormalizer( 'width', 'top' ) );\n\n\tstylesProcessor.setNormalizer( 'border-right-color', getBorderPropertyPositionNormalizer( 'color', 'right' ) );\n\tstylesProcessor.setNormalizer( 'border-right-style', getBorderPropertyPositionNormalizer( 'style', 'right' ) );\n\tstylesProcessor.setNormalizer( 'border-right-width', getBorderPropertyPositionNormalizer( 'width', 'right' ) );\n\n\tstylesProcessor.setNormalizer( 'border-bottom-color', getBorderPropertyPositionNormalizer( 'color', 'bottom' ) );\n\tstylesProcessor.setNormalizer( 'border-bottom-style', getBorderPropertyPositionNormalizer( 'style', 'bottom' ) );\n\tstylesProcessor.setNormalizer( 'border-bottom-width', getBorderPropertyPositionNormalizer( 'width', 'bottom' ) );\n\n\tstylesProcessor.setNormalizer( 'border-left-color', getBorderPropertyPositionNormalizer( 'color', 'left' ) );\n\tstylesProcessor.setNormalizer( 'border-left-style', getBorderPropertyPositionNormalizer( 'style', 'left' ) );\n\tstylesProcessor.setNormalizer( 'border-left-width', getBorderPropertyPositionNormalizer( 'width', 'left' ) );\n\n\tstylesProcessor.setExtractor( 'border-top', getBorderPositionExtractor( 'top' ) );\n\tstylesProcessor.setExtractor( 'border-right', getBorderPositionExtractor( 'right' ) );\n\tstylesProcessor.setExtractor( 'border-bottom', getBorderPositionExtractor( 'bottom' ) );\n\tstylesProcessor.setExtractor( 'border-left', getBorderPositionExtractor( 'left' ) );\n\n\tstylesProcessor.setExtractor( 'border-top-color', 'border.color.top' );\n\tstylesProcessor.setExtractor( 'border-right-color', 'border.color.right' );\n\tstylesProcessor.setExtractor( 'border-bottom-color', 'border.color.bottom' );\n\tstylesProcessor.setExtractor( 'border-left-color', 'border.color.left' );\n\n\tstylesProcessor.setExtractor( 'border-top-width', 'border.width.top' );\n\tstylesProcessor.setExtractor( 'border-right-width', 'border.width.right' );\n\tstylesProcessor.setExtractor( 'border-bottom-width', 'border.width.bottom' );\n\tstylesProcessor.setExtractor( 'border-left-width', 'border.width.left' );\n\n\tstylesProcessor.setExtractor( 'border-top-style', 'border.style.top' );\n\tstylesProcessor.setExtractor( 'border-right-style', 'border.style.right' );\n\tstylesProcessor.setExtractor( 'border-bottom-style', 'border.style.bottom' );\n\tstylesProcessor.setExtractor( 'border-left-style', 'border.style.left' );\n\n\tstylesProcessor.setReducer( 'border-color', getBoxSidesValueReducer( 'border-color' ) );\n\tstylesProcessor.setReducer( 'border-style', getBoxSidesValueReducer( 'border-style' ) );\n\tstylesProcessor.setReducer( 'border-width', getBoxSidesValueReducer( 'border-width' ) );\n\tstylesProcessor.setReducer( 'border-top', getBorderPositionReducer( 'top' ) );\n\tstylesProcessor.setReducer( 'border-right', getBorderPositionReducer( 'right' ) );\n\tstylesProcessor.setReducer( 'border-bottom', getBorderPositionReducer( 'bottom' ) );\n\tstylesProcessor.setReducer( 'border-left', getBorderPositionReducer( 'left' ) );\n\tstylesProcessor.setReducer( 'border', getBorderReducer() );\n\n\tstylesProcessor.setStyleRelation( 'border', [\n\t\t'border-color', 'border-style', 'border-width',\n\t\t'border-top', 'border-right', 'border-bottom', 'border-left',\n\t\t'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color',\n\t\t'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style',\n\t\t'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width'\n\t] );\n\n\tstylesProcessor.setStyleRelation( 'border-color', [\n\t\t'border-top-color', 'border-right-color', 'border-bottom-color', 'border-left-color'\n\t] );\n\tstylesProcessor.setStyleRelation( 'border-style', [\n\t\t'border-top-style', 'border-right-style', 'border-bottom-style', 'border-left-style'\n\t] );\n\tstylesProcessor.setStyleRelation( 'border-width', [\n\t\t'border-top-width', 'border-right-width', 'border-bottom-width', 'border-left-width'\n\t] );\n\n\tstylesProcessor.setStyleRelation( 'border-top', [ 'border-top-color', 'border-top-style', 'border-top-width' ] );\n\tstylesProcessor.setStyleRelation( 'border-right', [ 'border-right-color', 'border-right-style', 'border-right-width' ] );\n\tstylesProcessor.setStyleRelation( 'border-bottom', [ 'border-bottom-color', 'border-bottom-style', 'border-bottom-width' ] );\n\tstylesProcessor.setStyleRelation( 'border-left', [ 'border-left-color', 'border-left-style', 'border-left-width' ] );\n}\n\nfunction borderNormalizer( value ) {\n\tconst { color, style, width } = normalizeBorderShorthand( value );\n\n\treturn {\n\t\tpath: 'border',\n\t\tvalue: {\n\t\t\tcolor: getBoxSidesValues( color ),\n\t\t\tstyle: getBoxSidesValues( style ),\n\t\t\twidth: getBoxSidesValues( width )\n\t\t}\n\t};\n}\n\nfunction getBorderPositionNormalizer( side ) {\n\treturn value => {\n\t\tconst { color, style, width } = normalizeBorderShorthand( value );\n\n\t\tconst border = {};\n\n\t\tif ( color !== undefined ) {\n\t\t\tborder.color = { [ side ]: color };\n\t\t}\n\n\t\tif ( style !== undefined ) {\n\t\t\tborder.style = { [ side ]: style };\n\t\t}\n\n\t\tif ( width !== undefined ) {\n\t\t\tborder.width = { [ side ]: width };\n\t\t}\n\n\t\treturn {\n\t\t\tpath: 'border',\n\t\t\tvalue: border\n\t\t};\n\t};\n}\n\nfunction getBorderPropertyNormalizer( propertyName ) {\n\treturn value => {\n\t\treturn {\n\t\t\tpath: 'border',\n\t\t\tvalue: toBorderPropertyShorthand( value, propertyName )\n\t\t};\n\t};\n}\n\nfunction toBorderPropertyShorthand( value, property ) {\n\treturn {\n\t\t[ property ]: getBoxSidesValues( value )\n\t};\n}\n\nfunction getBorderPropertyPositionNormalizer( property, side ) {\n\treturn value => {\n\t\treturn {\n\t\t\tpath: 'border',\n\t\t\tvalue: {\n\t\t\t\t[ property ]: {\n\t\t\t\t\t[ side ]: value\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n}\n\nfunction getBorderPositionExtractor( which ) {\n\treturn ( name, styles ) => {\n\t\tif ( styles.border ) {\n\t\t\treturn extractBorderPosition( styles.border, which );\n\t\t}\n\t};\n}\n\nfunction extractBorderPosition( border, which ) {\n\tconst value = {};\n\n\tif ( border.width && border.width[ which ] ) {\n\t\tvalue.width = border.width[ which ];\n\t}\n\n\tif ( border.style && border.style[ which ] ) {\n\t\tvalue.style = border.style[ which ];\n\t}\n\n\tif ( border.color && border.color[ which ] ) {\n\t\tvalue.color = border.color[ which ];\n\t}\n\n\treturn value;\n}\n\nfunction normalizeBorderShorthand( string ) {\n\tconst result = {};\n\n\tconst parts = getShorthandValues( string );\n\n\tfor ( const part of parts ) {\n\t\tif ( isLength( part ) || /thin|medium|thick/.test( part ) ) {\n\t\t\tresult.width = part;\n\t\t} else if ( isLineStyle( part ) ) {\n\t\t\tresult.style = part;\n\t\t} else {\n\t\t\tresult.color = part;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// The border reducer factory.\n//\n// It tries to produce the most optimal output for the specified styles.\n//\n// For a border style:\n//\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-style: solid`.\n// For a border style and color:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//\n// It will produce: `border-color: #ff0; border-style: solid`.\n// If all border parameters are specified:\n//\n//      color: {top: \"#ff0\", bottom: \"#ff0\", right: \"#ff0\", left: \"#ff0\"}\n//      style: {top: \"solid\", bottom: \"solid\", right: \"solid\", left: \"solid\"}\n//      width: {top: \"2px\", bottom: \"2px\", right: \"2px\", left: \"2px\"}\n//\n// It will combine everything into a single property: `border: 2px solid #ff0`.\n//\n// The definitions are merged only if all border selectors have the same values.\n//\n// @returns {Function}\nfunction getBorderReducer() {\n\treturn value => {\n\t\tconst topStyles = extractBorderPosition( value, 'top' );\n\t\tconst rightStyles = extractBorderPosition( value, 'right' );\n\t\tconst bottomStyles = extractBorderPosition( value, 'bottom' );\n\t\tconst leftStyles = extractBorderPosition( value, 'left' );\n\n\t\tconst borderStyles = [ topStyles, rightStyles, bottomStyles, leftStyles ];\n\n\t\tconst borderStylesByType = {\n\t\t\twidth: getReducedStyleValueForType( borderStyles, 'width' ),\n\t\t\tstyle: getReducedStyleValueForType( borderStyles, 'style' ),\n\t\t\tcolor: getReducedStyleValueForType( borderStyles, 'color' )\n\t\t};\n\n\t\t// Try reducing to a single `border:` property.\n\t\tconst reducedBorderStyle = reduceBorderPosition( borderStylesByType, 'all' );\n\n\t\tif ( reducedBorderStyle.length ) {\n\t\t\treturn reducedBorderStyle;\n\t\t}\n\n\t\t// Try reducing to `border-style:`, `border-width:`, `border-color:` properties.\n\t\tconst reducedStyleTypes = Object.entries( borderStylesByType ).reduce( ( reducedStyleTypes, [ type, value ] ) => {\n\t\t\tif ( value ) {\n\t\t\t\treducedStyleTypes.push( [ `border-${ type }`, value ] );\n\n\t\t\t\t// Remove it from the full set to not include it in the most specific properties later.\n\t\t\t\tborderStyles.forEach( style => ( style[ type ] = null ) );\n\t\t\t}\n\n\t\t\treturn reducedStyleTypes;\n\t\t}, [] );\n\n\t\t// The reduced properties (by type) and all that remains that could not be reduced.\n\t\treturn [\n\t\t\t...reducedStyleTypes,\n\t\t\t...reduceBorderPosition( topStyles, 'top' ),\n\t\t\t...reduceBorderPosition( rightStyles, 'right' ),\n\t\t\t...reduceBorderPosition( bottomStyles, 'bottom' ),\n\t\t\t...reduceBorderPosition( leftStyles, 'left' )\n\t\t];\n\t};\n\n\t// @param {Array.<Object>} styles The array of objects with `style`, `color`, `width` properties.\n\t// @param {'width'|'style'|'color'} type\n\tfunction getReducedStyleValueForType( styles, type ) {\n\t\treturn styles\n\t\t\t.map( style => style[ type ] )\n\t\t\t.reduce( ( result, style ) => result == style ? result : null );\n\t}\n}\n\nfunction getBorderPositionReducer( which ) {\n\treturn value => reduceBorderPosition( value, which );\n}\n\n// Returns an array with reduced border styles depending on the specified values.\n//\n// If all border properties (width, style, color) are specified, the returned selector will be\n// merged into a group: `border-*: [width] [style] [color]`.\n//\n// Otherwise, the specific definitions will be returned: `border-(width|style|color)-*: [value]`.\n//\n// @param {Object|null} value Styles if defined.\n// @param {'top'|'right'|'bottom'|'left'|'all'} which The border position.\n// @returns {Array}\nfunction reduceBorderPosition( value, which ) {\n\tconst borderTypes = [];\n\n\tif ( value && value.width ) {\n\t\tborderTypes.push( 'width' );\n\t}\n\n\tif ( value && value.style ) {\n\t\tborderTypes.push( 'style' );\n\t}\n\n\tif ( value && value.color ) {\n\t\tborderTypes.push( 'color' );\n\t}\n\n\tif ( borderTypes.length == 3 ) {\n\t\tconst borderValue = borderTypes.map( item => value[ item ] ).join( ' ' );\n\n\t\treturn [\n\t\t\twhich == 'all' ? [ 'border', borderValue ] : [ `border-${ which }`, borderValue ]\n\t\t];\n\t}\n\n\t// We are unable to reduce to a single `border:` property.\n\tif ( which == 'all' ) {\n\t\treturn [];\n\t}\n\n\treturn borderTypes.map( type => {\n\t\treturn [ `border-${ which }-${ type }`, value[ type ] ];\n\t} );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
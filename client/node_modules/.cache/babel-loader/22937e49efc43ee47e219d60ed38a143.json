{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class AttributeOperation extends Operation {\n  /**\n   * Creates an operation that changes, removes or adds attributes.\n   *\n   * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n   * have an attribute with the same key as the added attribute.\n   *\n   * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n   * must have an attribute with that key added.\n   *\n   * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n   * operation's ranges must already have an attribute with given key and `oldValue` as value\n   *\n   * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n   * @param {String} key Key of an attribute to change or remove.\n   * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n   * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(range, key, oldValue, newValue, baseVersion) {\n    super(baseVersion);\n    /**\n     * Range on which operation should be applied.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n\n    this.range = range.clone();\n    /**\n     * Key of an attribute to change or remove.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.key = key;\n    /**\n     * Old value of the attribute with given key or `null`, if attribute was not set before.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.oldValue = oldValue === undefined ? null : oldValue;\n    /**\n     * New value of the attribute with given key or `null`, if operation should remove attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.newValue = newValue === undefined ? null : newValue;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    if (this.oldValue === null) {\n      return 'addAttribute';\n    } else if (this.newValue === null) {\n      return 'removeAttribute';\n    } else {\n      return 'changeAttribute';\n    }\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new AttributeOperation(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n\n\n  getReversed() {\n    return new AttributeOperation(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.range = this.range.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    if (!this.range.isFlat) {\n      /**\n       * The range to change is not flat.\n       *\n       * @error attribute-operation-range-not-flat\n       */\n      throw new CKEditorError('attribute-operation-range-not-flat', this);\n    }\n\n    for (const item of this.range.getItems({\n      shallow: true\n    })) {\n      if (this.oldValue !== null && !isEqual(item.getAttribute(this.key), this.oldValue)) {\n        /**\n         * Changed node has different attribute value than operation's old attribute value.\n         *\n         * @error attribute-operation-wrong-old-value\n         * @param {module:engine/model/item~Item} item\n         * @param {String} key\n         * @param {*} value\n         */\n        throw new CKEditorError('attribute-operation-wrong-old-value', this, {\n          item,\n          key: this.key,\n          value: this.oldValue\n        });\n      }\n\n      if (this.oldValue === null && this.newValue !== null && item.hasAttribute(this.key)) {\n        /**\n         * The attribute with given key already exists for the given node.\n         *\n         * @error attribute-operation-attribute-exists\n         * @param {module:engine/model/node~Node} node\n         * @param {String} key\n         */\n        throw new CKEditorError('attribute-operation-attribute-exists', this, {\n          node: item,\n          key: this.key\n        });\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    // If value to set is same as old value, don't do anything.\n    if (!isEqual(this.oldValue, this.newValue)) {\n      // Execution.\n      _setAttribute(this.range, this.key, this.newValue);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'AttributeOperation';\n  }\n  /**\n   * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    return new AttributeOperation(Range.fromJSON(json.range, document), json.key, json.oldValue, json.newValue, json.baseVersion);\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn `AttributeOperation( ${ this.baseVersion } ): ` +\n  // @if CK_DEBUG_ENGINE //\t\t`\"${ this.key }\": ${ JSON.stringify( this.oldValue ) }` +\n  // @if CK_DEBUG_ENGINE //\t\t` -> ${ JSON.stringify( this.newValue ) }, ${ this.range }`;\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"names":["Operation","Range","CKEditorError","_setAttribute","isEqual","AttributeOperation","constructor","range","key","oldValue","newValue","baseVersion","clone","undefined","type","getReversed","toJSON","json","_validate","isFlat","item","getItems","shallow","getAttribute","value","hasAttribute","node","_execute","className","fromJSON","document"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes.\n\t *\n\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n\t * have an attribute with the same key as the added attribute.\n\t *\n\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n\t * must have an attribute with that key added.\n\t *\n\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n\t * operation's ranges must already have an attribute with given key and `oldValue` as value\n\t *\n\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( range, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Range on which operation should be applied.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.range = range.clone();\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null`, if attribute was not set before.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue === undefined ? null : oldValue;\n\n\t\t/**\n\t\t * New value of the attribute with given key or `null`, if operation should remove attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue === undefined ? null : newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeAttribute';\n\t\t} else {\n\t\t\treturn 'changeAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.range = this.range.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( !this.range.isFlat ) {\n\t\t\t/**\n\t\t\t * The range to change is not flat.\n\t\t\t *\n\t\t\t * @error attribute-operation-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'attribute-operation-range-not-flat', this );\n\t\t}\n\n\t\tfor ( const item of this.range.getItems( { shallow: true } ) ) {\n\t\t\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\n\t\t\t\t/**\n\t\t\t\t * Changed node has different attribute value than operation's old attribute value.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-wrong-old-value\n\t\t\t\t * @param {module:engine/model/item~Item} item\n\t\t\t\t * @param {String} key\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-wrong-old-value',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ item, key: this.key, value: this.oldValue }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\n\t\t\t\t/**\n\t\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-attribute-exists\n\t\t\t\t * @param {module:engine/model/node~Node} node\n\t\t\t\t * @param {String} key\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-attribute-exists',\n\t\t\t\t\tthis,\n\t\t\t\t\t{ node: item, key: this.key }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// If value to set is same as old value, don't do anything.\n\t\tif ( !isEqual( this.oldValue, this.newValue ) ) {\n\t\t\t// Execution.\n\t\t\t_setAttribute( this.range, this.key, this.newValue );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'AttributeOperation';\n\t}\n\n\t/**\n\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `AttributeOperation( ${ this.baseVersion } ): ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`\"${ this.key }\": ${ JSON.stringify( this.oldValue ) }` +\n\t// @if CK_DEBUG_ENGINE //\t\t` -> ${ JSON.stringify( this.newValue ) }, ${ this.range }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
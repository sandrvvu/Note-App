{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark(character) {\n  // eslint-disable-next-line no-misleading-character-class\n  return !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test(character);\n}\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\n\nexport function isHighSurrogateHalf(character) {\n  return !!character && character.length == 1 && /[\\ud800-\\udbff]/.test(character);\n}\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\n\nexport function isLowSurrogateHalf(character) {\n  return !!character && character.length == 1 && /[\\udc00-\\udfff]/.test(character);\n}\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\n\nexport function isInsideSurrogatePair(string, offset) {\n  return isHighSurrogateHalf(string.charAt(offset - 1)) && isLowSurrogateHalf(string.charAt(offset));\n}\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\n\nexport function isInsideCombinedSymbol(string, offset) {\n  return isCombiningMark(string.charAt(offset));\n}\nconst EMOJI_PATTERN = buildEmojiRegexp();\n/**\n * Checks whether given offset in a string is inside multi-character emoji sequence.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\n\nexport function isInsideEmojiSequence(string, offset) {\n  const matches = String(string).matchAll(EMOJI_PATTERN);\n  return Array.from(matches).some(match => match.index < offset && offset < match.index + match[0].length);\n}\n\nfunction buildEmojiRegexp() {\n  const parts = [// Emoji Tag Sequence (ETS)\n  /\\p{Emoji}[\\u{E0020}-\\u{E007E}]+\\u{E007F}/u, // Emoji Keycap Sequence\n  /\\p{Emoji}\\u{FE0F}?\\u{20E3}/u, // Emoji Presentation Sequence\n  /\\p{Emoji}\\u{FE0F}/u, // Single-Character Emoji / Emoji Modifier Sequence\n  /(?=\\p{General_Category=Other_Symbol})\\p{Emoji}\\p{Emoji_Modifier}*/u];\n  const flagSequence = /\\p{Regional_Indicator}{2}/u.source;\n  const emoji = '(?:' + parts.map(part => part.source).join('|') + ')';\n  const sequence = `${flagSequence}|${emoji}(?:\\u{200D}${emoji})*`;\n  return new RegExp(sequence, 'ug');\n}","map":{"version":3,"names":["isCombiningMark","character","length","test","isHighSurrogateHalf","isLowSurrogateHalf","isInsideSurrogatePair","string","offset","charAt","isInsideCombinedSymbol","EMOJI_PATTERN","buildEmojiRegexp","isInsideEmojiSequence","matches","String","matchAll","Array","from","some","match","index","parts","flagSequence","source","emoji","map","part","join","sequence","RegExp"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-utils/src/unicode.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark( character ) {\n\t// eslint-disable-next-line no-misleading-character-class\n\treturn !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\ud800-\\udbff]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\udc00-\\udfff]/.test( character );\n}\n\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair( string, offset ) {\n\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\n}\n\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol( string, offset ) {\n\treturn isCombiningMark( string.charAt( offset ) );\n}\n\nconst EMOJI_PATTERN = buildEmojiRegexp();\n\n/**\n * Checks whether given offset in a string is inside multi-character emoji sequence.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideEmojiSequence( string, offset ) {\n\tconst matches = String( string ).matchAll( EMOJI_PATTERN );\n\n\treturn Array.from( matches ).some( match => match.index < offset && offset < match.index + match[ 0 ].length );\n}\n\nfunction buildEmojiRegexp() {\n\tconst parts = [\n\t\t// Emoji Tag Sequence (ETS)\n\t\t/\\p{Emoji}[\\u{E0020}-\\u{E007E}]+\\u{E007F}/u,\n\n\t\t// Emoji Keycap Sequence\n\t\t/\\p{Emoji}\\u{FE0F}?\\u{20E3}/u,\n\n\t\t// Emoji Presentation Sequence\n\t\t/\\p{Emoji}\\u{FE0F}/u,\n\n\t\t// Single-Character Emoji / Emoji Modifier Sequence\n\t\t/(?=\\p{General_Category=Other_Symbol})\\p{Emoji}\\p{Emoji_Modifier}*/u\n\t];\n\n\tconst flagSequence = /\\p{Regional_Indicator}{2}/u.source;\n\tconst emoji = '(?:' + parts.map( part => part.source ).join( '|' ) + ')';\n\tconst sequence = `${ flagSequence }|${ emoji }(?:\\u{200D}${ emoji })*`;\n\n\treturn new RegExp( sequence, 'ug' );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAT,CAA0BC,SAA1B,EAAsC;EAC5C;EACA,OAAO,CAAC,CAACA,SAAF,IAAeA,SAAS,CAACC,MAAV,IAAoB,CAAnC,IAAwC,sEAAsEC,IAAtE,CAA4EF,SAA5E,CAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,mBAAT,CAA8BH,SAA9B,EAA0C;EAChD,OAAO,CAAC,CAACA,SAAF,IAAeA,SAAS,CAACC,MAAV,IAAoB,CAAnC,IAAwC,kBAAkBC,IAAlB,CAAwBF,SAAxB,CAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,kBAAT,CAA6BJ,SAA7B,EAAyC;EAC/C,OAAO,CAAC,CAACA,SAAF,IAAeA,SAAS,CAACC,MAAV,IAAoB,CAAnC,IAAwC,kBAAkBC,IAAlB,CAAwBF,SAAxB,CAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,qBAAT,CAAgCC,MAAhC,EAAwCC,MAAxC,EAAiD;EACvD,OAAOJ,mBAAmB,CAAEG,MAAM,CAACE,MAAP,CAAeD,MAAM,GAAG,CAAxB,CAAF,CAAnB,IAAsDH,kBAAkB,CAAEE,MAAM,CAACE,MAAP,CAAeD,MAAf,CAAF,CAA/E;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,sBAAT,CAAiCH,MAAjC,EAAyCC,MAAzC,EAAkD;EACxD,OAAOR,eAAe,CAAEO,MAAM,CAACE,MAAP,CAAeD,MAAf,CAAF,CAAtB;AACA;AAED,MAAMG,aAAa,GAAGC,gBAAgB,EAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAAgCN,MAAhC,EAAwCC,MAAxC,EAAiD;EACvD,MAAMM,OAAO,GAAGC,MAAM,CAAER,MAAF,CAAN,CAAiBS,QAAjB,CAA2BL,aAA3B,CAAhB;EAEA,OAAOM,KAAK,CAACC,IAAN,CAAYJ,OAAZ,EAAsBK,IAAtB,CAA4BC,KAAK,IAAIA,KAAK,CAACC,KAAN,GAAcb,MAAd,IAAwBA,MAAM,GAAGY,KAAK,CAACC,KAAN,GAAcD,KAAK,CAAE,CAAF,CAAL,CAAWlB,MAA/F,CAAP;AACA;;AAED,SAASU,gBAAT,GAA4B;EAC3B,MAAMU,KAAK,GAAG,CACb;EACA,2CAFa,EAIb;EACA,6BALa,EAOb;EACA,oBARa,EAUb;EACA,oEAXa,CAAd;EAcA,MAAMC,YAAY,GAAG,6BAA6BC,MAAlD;EACA,MAAMC,KAAK,GAAG,QAAQH,KAAK,CAACI,GAAN,CAAWC,IAAI,IAAIA,IAAI,CAACH,MAAxB,EAAiCI,IAAjC,CAAuC,GAAvC,CAAR,GAAuD,GAArE;EACA,MAAMC,QAAQ,GAAI,GAAGN,YAAc,IAAIE,KAAO,cAAcA,KAAO,IAAnE;EAEA,OAAO,IAAIK,MAAJ,CAAYD,QAAZ,EAAsB,IAAtB,CAAP;AACA"},"metadata":{},"sourceType":"module"}
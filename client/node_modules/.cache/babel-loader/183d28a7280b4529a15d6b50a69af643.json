{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default, commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode\n * but commands with the {@link module:core/command~Command#affectsData `affectsData`} flag set to `false` will not be disabled.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Command {\n  /**\n   * Creates a new `Command` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n   */\n  constructor(editor) {\n    /**\n     * The editor on which this command will be used.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor}\n     */\n    this.editor = editor;\n    /**\n     * The value of the command. A concrete command class should define what it represents for it.\n     *\n     * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n     * And the value of the `'link'` command may be an object with links details.\n     *\n     * It is possible for a command to have no value (e.g. for stateless actions such as `'uploadImage'`).\n     *\n     * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n     *\n     * @observable\n     * @readonly\n     * @member #value\n     */\n\n    this.set('value', undefined);\n    /**\n     * Flag indicating whether a command is enabled or disabled.\n     * A disabled command will do nothing when executed.\n     *\n     * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n     *\n     * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n     * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n     * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n     *\n     *\t\tfunction disableCommand( cmd ) {\n     *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n     *\n     *\t\t\tcmd.isEnabled = false;\n     *\n     *\t\t\t// Make it possible to enable the command again.\n     *\t\t\treturn () => {\n     *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n     *\t\t\t\tcmd.refresh();\n     *\t\t\t};\n     *\n     *\t\t\tfunction forceDisable( evt ) {\n     *\t\t\t\tevt.return = false;\n     *\t\t\t\tevt.stop();\n     *\t\t\t}\n     *\t\t}\n     *\n     *\t\t// Usage:\n     *\n     *\t\t// Disabling the command.\n     *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n     *\n     *\t\t// Enabling the command again.\n     *\t\tenableBold();\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #isEnabled\n     */\n\n    this.set('isEnabled', false);\n    /**\n     * A flag indicating whether a command execution changes the editor data or not.\n     *\n     * Commands with `affectsData` set to `false` will not be automatically disabled in\n     * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and\n     * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.\n     *\n     * **Note:** You do not have to set it for your every command. It is `true` by default.\n     *\n     * @readonly\n     * @default true\n     * @member {Boolean} #affectsData\n     */\n\n    this.affectsData = true;\n    /**\n     * Holds identifiers for {@link #forceDisabled} mechanism.\n     *\n     * @type {Set.<String>}\n     * @private\n     */\n\n    this._disableStack = new Set();\n    this.decorate('execute'); // By default every command is refreshed when changes are applied to the model.\n\n    this.listenTo(this.editor.model.document, 'change', () => {\n      this.refresh();\n    });\n    this.on('execute', evt => {\n      if (!this.isEnabled) {\n        evt.stop();\n      }\n    }, {\n      priority: 'high'\n    }); // By default commands are disabled when the editor is in read-only mode.\n\n    this.listenTo(editor, 'change:isReadOnly', (evt, name, value) => {\n      if (value && this.affectsData) {\n        this.forceDisabled('readOnlyMode');\n      } else {\n        this.clearForceDisabled('readOnlyMode');\n      }\n    });\n  }\n  /**\n   * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n   * in this method.\n   *\n   * This method is automatically called when\n   * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n   */\n\n\n  refresh() {\n    this.isEnabled = true;\n  }\n  /**\n   * Disables the command.\n   *\n   * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n   * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n   * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n   *\n   * Disabling and enabling a command:\n   *\n   *\t\tcommand.isEnabled; // -> true\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> false\n   *\t\tcommand.clearForceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> true\n   *\n   * Command disabled by multiple features:\n   *\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.forceDisabled( 'OtherFeature' );\n   *\t\tcommand.clearForceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> false\n   *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n   *\t\tcommand.isEnabled; // -> true\n   *\n   * Multiple disabling with the same identifier is redundant:\n   *\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.clearForceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> true\n   *\n   * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n   * so the command might be still disabled after {@link #clearForceDisabled} was used.\n   *\n   * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n   */\n\n\n  forceDisabled(id) {\n    this._disableStack.add(id);\n\n    if (this._disableStack.size == 1) {\n      this.on('set:isEnabled', forceDisable, {\n        priority: 'highest'\n      });\n      this.isEnabled = false;\n    }\n  }\n  /**\n   * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n   *\n   * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n   */\n\n\n  clearForceDisabled(id) {\n    this._disableStack.delete(id);\n\n    if (this._disableStack.size == 0) {\n      this.off('set:isEnabled', forceDisable);\n      this.refresh();\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n   * to the command.\n   *\n   * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n   * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n   *\n   * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n   *\n   * This method may return a value, which would be forwarded all the way down to the\n   * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n   *\n   * @fires execute\n   */\n\n\n  execute() {}\n  /**\n   * Destroys the command.\n   */\n\n\n  destroy() {\n    this.stopListening();\n  }\n  /**\n   * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n   * possible to change/cancel the behavior of the command by listening to this event.\n   *\n   * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n   *\n   * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n   * by a high priority listener in order to prevent command execution.\n   *\n   * @event execute\n   */\n\n\n}\nmix(Command, ObservableMixin); // Helper function that forces command to be disabled.\n\nfunction forceDisable(evt) {\n  evt.return = false;\n  evt.stop();\n}","map":{"version":3,"names":["ObservableMixin","mix","Command","constructor","editor","set","undefined","affectsData","_disableStack","Set","decorate","listenTo","model","document","refresh","on","evt","isEnabled","stop","priority","name","value","forceDisabled","clearForceDisabled","id","add","size","forceDisable","delete","off","execute","destroy","stopListening","return"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-core/src/command.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default, commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode\n * but commands with the {@link module:core/command~Command#affectsData `affectsData`} flag set to `false` will not be disabled.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of the command. A concrete command class should define what it represents for it.\n\t\t *\n\t\t * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n\t\t * And the value of the `'link'` command may be an object with links details.\n\t\t *\n\t\t * It is possible for a command to have no value (e.g. for stateless actions such as `'uploadImage'`).\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command will do nothing when executed.\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n\t\t * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n\t\t * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n\t\t *\n\t\t *\t\tfunction disableCommand( cmd ) {\n\t\t *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t *\n\t\t *\t\t\tcmd.isEnabled = false;\n\t\t *\n\t\t *\t\t\t// Make it possible to enable the command again.\n\t\t *\t\t\treturn () => {\n\t\t *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n\t\t *\t\t\t\tcmd.refresh();\n\t\t *\t\t\t};\n\t\t *\n\t\t *\t\t\tfunction forceDisable( evt ) {\n\t\t *\t\t\t\tevt.return = false;\n\t\t *\t\t\t\tevt.stop();\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\t// Usage:\n\t\t *\n\t\t *\t\t// Disabling the command.\n\t\t *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n\t\t *\n\t\t *\t\t// Enabling the command again.\n\t\t *\t\tenableBold();\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\t/**\n\t\t * A flag indicating whether a command execution changes the editor data or not.\n\t\t *\n\t\t * Commands with `affectsData` set to `false` will not be automatically disabled in\n\t\t * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and\n\t\t * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.\n\t\t *\n\t\t * **Note:** You do not have to set it for your every command. It is `true` by default.\n\t\t *\n\t\t * @readonly\n\t\t * @default true\n\t\t * @member {Boolean} #affectsData\n\t\t */\n\t\tthis.affectsData = true;\n\n\t\t/**\n\t\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t\t *\n\t\t * @type {Set.<String>}\n\t\t * @private\n\t\t */\n\t\tthis._disableStack = new Set();\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value && this.affectsData ) {\n\t\t\t\tthis.forceDisabled( 'readOnlyMode' );\n\t\t\t} else {\n\t\t\t\tthis.clearForceDisabled( 'readOnlyMode' );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the command.\n\t *\n\t * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n\t * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a command:\n\t *\n\t *\t\tcommand.isEnabled; // -> true\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Command disabled by multiple features:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'OtherFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> false\n\t *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.forceDisabled( 'MyFeature' );\n\t *\t\tcommand.clearForceDisabled( 'MyFeature' );\n\t *\t\tcommand.isEnabled; // -> true\n\t *\n\t * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n\t * so the command might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n\t */\n\tforceDisabled( id ) {\n\t\tthis._disableStack.add( id );\n\n\t\tif ( this._disableStack.size == 1 ) {\n\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\tthis.isEnabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n\t *\n\t * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */\n\tclearForceDisabled( id ) {\n\t\tthis._disableStack.delete( id );\n\n\t\tif ( this._disableStack.size == 0 ) {\n\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * This method may return a value, which would be forwarded all the way down to the\n\t * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n\n// Helper function that forces command to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentediting\n */\nimport { Plugin } from 'ckeditor5/src/core';\nimport AlignmentCommand from './alignmentcommand';\nimport { isDefault, isSupported, normalizeAlignmentOptions, supportedOptions } from './utils';\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n * @extends module:core/plugin~Plugin\n */\n\nexport default class AlignmentEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'AlignmentEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('alignment', {\n      options: [...supportedOptions.map(option => ({\n        name: option\n      }))]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const schema = editor.model.schema;\n    const options = normalizeAlignmentOptions(editor.config.get('alignment.options')); // Filter out unsupported options and those that are redundant, e.g. `left` in LTR / `right` in RTL mode.\n\n    const optionsToConvert = options.filter(option => isSupported(option.name) && !isDefault(option.name, locale)); // Once there is at least one `className` defined, we switch to alignment with classes.\n\n    const shouldUseClasses = optionsToConvert.some(option => !!option.className); // Allow alignment attribute on all blocks.\n\n    schema.extend('$block', {\n      allowAttributes: 'alignment'\n    });\n    editor.model.schema.setAttributeProperties('alignment', {\n      isFormatting: true\n    });\n\n    if (shouldUseClasses) {\n      editor.conversion.attributeToAttribute(buildClassDefinition(optionsToConvert));\n    } else {\n      // Downcast inline styles.\n      editor.conversion.for('downcast').attributeToAttribute(buildDowncastInlineDefinition(optionsToConvert));\n    }\n\n    const upcastInlineDefinitions = buildUpcastInlineDefinitions(optionsToConvert); // Always upcast from inline styles.\n\n    for (const definition of upcastInlineDefinitions) {\n      editor.conversion.for('upcast').attributeToAttribute(definition);\n    }\n\n    const upcastCompatibilityDefinitions = buildUpcastCompatibilityDefinitions(optionsToConvert); // Always upcast from deprecated `align` attribute.\n\n    for (const definition of upcastCompatibilityDefinitions) {\n      editor.conversion.for('upcast').attributeToAttribute(definition);\n    }\n\n    editor.commands.add('alignment', new AlignmentCommand(editor));\n  }\n\n} // Prepare downcast conversion definition for inline alignment styling.\n// @private\n\nfunction buildDowncastInlineDefinition(options) {\n  const definition = {\n    model: {\n      key: 'alignment',\n      values: options.map(option => option.name)\n    },\n    view: {}\n  };\n\n  for (const {\n    name\n  } of options) {\n    definition.view[name] = {\n      key: 'style',\n      value: {\n        'text-align': name\n      }\n    };\n  }\n\n  return definition;\n} // Prepare upcast definitions for inline alignment styles.\n// @private\n\n\nfunction buildUpcastInlineDefinitions(options) {\n  const definitions = [];\n\n  for (const {\n    name\n  } of options) {\n    definitions.push({\n      view: {\n        key: 'style',\n        value: {\n          'text-align': name\n        }\n      },\n      model: {\n        key: 'alignment',\n        value: name\n      }\n    });\n  }\n\n  return definitions;\n} // Prepare upcast definitions for deprecated `align` attribute.\n// @private\n\n\nfunction buildUpcastCompatibilityDefinitions(options) {\n  const definitions = [];\n\n  for (const {\n    name\n  } of options) {\n    definitions.push({\n      view: {\n        key: 'align',\n        value: name\n      },\n      model: {\n        key: 'alignment',\n        value: name\n      }\n    });\n  }\n\n  return definitions;\n} // Prepare conversion definitions for upcast and downcast alignment with classes.\n// @private\n\n\nfunction buildClassDefinition(options) {\n  const definition = {\n    model: {\n      key: 'alignment',\n      values: options.map(option => option.name)\n    },\n    view: {}\n  };\n\n  for (const option of options) {\n    definition.view[option.name] = {\n      key: 'class',\n      value: option.className\n    };\n  }\n\n  return definition;\n}\n/**\n * The alignment configuration format descriptor.\n *\n *\t\tconst alignmentFormat = {\n *\t\t\tname: 'right',\n *\t\t\tclassName: 'my-align-right-class'\n *\t\t}\n *\n * @typedef {Object} module:alignment/alignmentediting~AlignmentFormat\n *\n * @property {'left'|'right'|'center'|'justify'} name One of the alignment names options.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n * Used to override default, inline styling for alignment.\n */","map":{"version":3,"names":["Plugin","AlignmentCommand","isDefault","isSupported","normalizeAlignmentOptions","supportedOptions","AlignmentEditing","pluginName","constructor","editor","config","define","options","map","option","name","init","locale","schema","model","get","optionsToConvert","filter","shouldUseClasses","some","className","extend","allowAttributes","setAttributeProperties","isFormatting","conversion","attributeToAttribute","buildClassDefinition","for","buildDowncastInlineDefinition","upcastInlineDefinitions","buildUpcastInlineDefinitions","definition","upcastCompatibilityDefinitions","buildUpcastCompatibilityDefinitions","commands","add","key","values","view","value","definitions","push"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-alignment/src/alignmentediting.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentediting\n */\n\nimport { Plugin } from 'ckeditor5/src/core';\n\nimport AlignmentCommand from './alignmentcommand';\nimport { isDefault, isSupported, normalizeAlignmentOptions, supportedOptions } from './utils';\n\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n * @extends module:core/plugin~Plugin\n */\nexport default class AlignmentEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'AlignmentEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'alignment', {\n\t\t\toptions: [ ...supportedOptions.map( option => ( { name: option } ) ) ]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst schema = editor.model.schema;\n\n\t\tconst options = normalizeAlignmentOptions( editor.config.get( 'alignment.options' ) );\n\n\t\t// Filter out unsupported options and those that are redundant, e.g. `left` in LTR / `right` in RTL mode.\n\t\tconst optionsToConvert = options.filter(\n\t\t\toption => isSupported( option.name ) && !isDefault( option.name, locale )\n\t\t);\n\n\t\t// Once there is at least one `className` defined, we switch to alignment with classes.\n\t\tconst shouldUseClasses = optionsToConvert.some( option => !!option.className );\n\n\t\t// Allow alignment attribute on all blocks.\n\t\tschema.extend( '$block', { allowAttributes: 'alignment' } );\n\t\teditor.model.schema.setAttributeProperties( 'alignment', { isFormatting: true } );\n\n\t\tif ( shouldUseClasses ) {\n\t\t\teditor.conversion.attributeToAttribute( buildClassDefinition( optionsToConvert ) );\n\t\t} else {\n\t\t\t// Downcast inline styles.\n\t\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( buildDowncastInlineDefinition( optionsToConvert ) );\n\t\t}\n\n\t\tconst upcastInlineDefinitions = buildUpcastInlineDefinitions( optionsToConvert );\n\n\t\t// Always upcast from inline styles.\n\t\tfor ( const definition of upcastInlineDefinitions ) {\n\t\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( definition );\n\t\t}\n\n\t\tconst upcastCompatibilityDefinitions = buildUpcastCompatibilityDefinitions( optionsToConvert );\n\n\t\t// Always upcast from deprecated `align` attribute.\n\t\tfor ( const definition of upcastCompatibilityDefinitions ) {\n\t\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( definition );\n\t\t}\n\n\t\teditor.commands.add( 'alignment', new AlignmentCommand( editor ) );\n\t}\n}\n\n// Prepare downcast conversion definition for inline alignment styling.\n// @private\nfunction buildDowncastInlineDefinition( options ) {\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: 'alignment',\n\t\t\tvalues: options.map( option => option.name )\n\t\t},\n\t\tview: {}\n\t};\n\n\tfor ( const { name } of options ) {\n\t\tdefinition.view[ name ] = {\n\t\t\tkey: 'style',\n\t\t\tvalue: {\n\t\t\t\t'text-align': name\n\t\t\t}\n\t\t};\n\t}\n\n\treturn definition;\n}\n\n// Prepare upcast definitions for inline alignment styles.\n// @private\nfunction buildUpcastInlineDefinitions( options ) {\n\tconst definitions = [];\n\n\tfor ( const { name } of options ) {\n\t\tdefinitions.push( {\n\t\t\tview: {\n\t\t\t\tkey: 'style',\n\t\t\t\tvalue: {\n\t\t\t\t\t'text-align': name\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'alignment',\n\t\t\t\tvalue: name\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn definitions;\n}\n\n// Prepare upcast definitions for deprecated `align` attribute.\n// @private\nfunction buildUpcastCompatibilityDefinitions( options ) {\n\tconst definitions = [];\n\n\tfor ( const { name } of options ) {\n\t\tdefinitions.push( {\n\t\t\tview: {\n\t\t\t\tkey: 'align',\n\t\t\t\tvalue: name\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'alignment',\n\t\t\t\tvalue: name\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn definitions;\n}\n\n// Prepare conversion definitions for upcast and downcast alignment with classes.\n// @private\nfunction buildClassDefinition( options ) {\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: 'alignment',\n\t\t\tvalues: options.map( option => option.name )\n\t\t},\n\t\tview: {}\n\t};\n\n\tfor ( const option of options ) {\n\t\tdefinition.view[ option.name ] = {\n\t\t\tkey: 'class',\n\t\t\tvalue: option.className\n\t\t};\n\t}\n\n\treturn definition;\n}\n\n/**\n * The alignment configuration format descriptor.\n *\n *\t\tconst alignmentFormat = {\n *\t\t\tname: 'right',\n *\t\t\tclassName: 'my-align-right-class'\n *\t\t}\n *\n * @typedef {Object} module:alignment/alignmentediting~AlignmentFormat\n *\n * @property {'left'|'right'|'center'|'justify'} name One of the alignment names options.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n * Used to override default, inline styling for alignment.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
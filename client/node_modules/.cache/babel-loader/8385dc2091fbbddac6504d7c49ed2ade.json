{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\nimport Operation from './operation';\nimport Range from '../range';\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class MarkerOperation extends Operation {\n  /**\n   * @param {String} name Marker name.\n   * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n   * @param {module:engine/model/range~Range} newRange Marker range after the change.\n   * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n   * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(name, oldRange, newRange, markers, affectsData, baseVersion) {\n    super(baseVersion);\n    /**\n     * Marker name.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.name = name;\n    /**\n     * Marker range before the change.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n\n    this.oldRange = oldRange ? oldRange.clone() : null;\n    /**\n     * Marker range after the change.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n\n    this.newRange = newRange ? newRange.clone() : null;\n    /**\n     * Specifies whether the marker operation affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.affectsData = affectsData;\n    /**\n     * Marker collection on which change should be executed.\n     *\n     * @private\n     * @member {module:engine/model/markercollection~MarkerCollection}\n     */\n\n    this._markers = markers;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'marker';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new MarkerOperation(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n   */\n\n\n  getReversed() {\n    return new MarkerOperation(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    const type = this.newRange ? '_set' : '_remove';\n\n    this._markers[type](this.name, this.newRange, true, this.affectsData);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n\n    if (this.oldRange) {\n      json.oldRange = this.oldRange.toJSON();\n    }\n\n    if (this.newRange) {\n      json.newRange = this.newRange.toJSON();\n    }\n\n    delete json._markers;\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'MarkerOperation';\n  }\n  /**\n   * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    return new MarkerOperation(json.name, json.oldRange ? Range.fromJSON(json.oldRange, document) : null, json.newRange ? Range.fromJSON(json.newRange, document) : null, document.model.markers, json.affectsData, json.baseVersion);\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn `MarkerOperation( ${ this.baseVersion } ): ` +\n  // @if CK_DEBUG_ENGINE //\t\t`\"${ this.name }\": ${ this.oldRange } -> ${ this.newRange }`;\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"names":["Operation","Range","MarkerOperation","constructor","name","oldRange","newRange","markers","affectsData","baseVersion","clone","_markers","type","getReversed","_execute","toJSON","json","className","fromJSON","document","model"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\n\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n\t/**\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n\t * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( name, oldRange, newRange, markers, affectsData, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Marker name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Marker range before the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.oldRange = oldRange ? oldRange.clone() : null;\n\n\t\t/**\n\t\t * Marker range after the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.newRange = newRange ? newRange.clone() : null;\n\n\t\t/**\n\t\t * Specifies whether the marker operation affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.affectsData = affectsData;\n\n\t\t/**\n\t\t * Marker collection on which change should be executed.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markers = markers;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tgetReversed() {\n\t\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst type = this.newRange ? '_set' : '_remove';\n\n\t\tthis._markers[ type ]( this.name, this.newRange, true, this.affectsData );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tif ( this.oldRange ) {\n\t\t\tjson.oldRange = this.oldRange.toJSON();\n\t\t}\n\n\t\tif ( this.newRange ) {\n\t\t\tjson.newRange = this.newRange.toJSON();\n\t\t}\n\n\t\tdelete json._markers;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MarkerOperation';\n\t}\n\n\t/**\n\t * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new MarkerOperation(\n\t\t\tjson.name,\n\t\t\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\n\t\t\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\n\t\t\tdocument.model.markers,\n\t\t\tjson.affectsData,\n\t\t\tjson.baseVersion\n\t\t);\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `MarkerOperation( ${ this.baseVersion } ): ` +\n\t// @if CK_DEBUG_ENGINE //\t\t`\"${ this.name }\": ${ this.oldRange } -> ${ this.newRange }`;\n\t// @if CK_DEBUG_ENGINE // }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
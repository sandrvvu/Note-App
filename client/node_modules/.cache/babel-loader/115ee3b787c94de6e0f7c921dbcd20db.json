{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\nimport Node from './node'; // @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\n\nexport default class Text extends Node {\n  /**\n   * Creates a text node.\n   *\n   * **Note:** Constructor of this class shouldn't be used directly in the code.\n   * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n   *\n   * @protected\n   * @param {String} data Node's text.\n   * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n  constructor(data, attrs) {\n    super(attrs);\n    /**\n     * Text data contained in this text node.\n     *\n     * @protected\n     * @type {String}\n     */\n\n    this._data = data || '';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get offsetSize() {\n    return this.data.length;\n  }\n  /**\n   * Returns a text data contained in the node.\n   *\n   * @readonly\n   * @type {String}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\ttext.is( '$text' ); // -> true\n   *\t\ttext.is( 'node' ); // -> true\n   *\t\ttext.is( 'model:$text' ); // -> true\n   *\t\ttext.is( 'model:node' ); // -> true\n   *\n   *\t\ttext.is( 'view:$text' ); // -> false\n   *\t\ttext.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n   * accepted for backward compatibility.\n   *\n   * @param {String} type Type to check.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type === '$text' || type === 'model:$text' || // This are legacy values kept for backward compatibility.\n    type === 'text' || type === 'model:text' || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n    type === 'node' || type === 'model:node';\n  }\n  /**\n   * Converts `Text` instance to plain object and returns it.\n   *\n   * @returns {Object} `Text` instance converted to plain object.\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.data = this.data;\n    return json;\n  }\n  /**\n   * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n   *\n   * @protected\n   * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n   */\n\n\n  _clone() {\n    return new Text(this.data, this.getAttributes());\n  }\n  /**\n   * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n   *\n   * @param {Object} json Plain object to be converted to `Text`.\n   * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n   */\n\n\n  static fromJSON(json) {\n    return new Text(json.data, json.attributes);\n  } // @if CK_DEBUG_ENGINE // toString() {\n  // @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n  // @if CK_DEBUG_ENGINE // }\n  // @if CK_DEBUG_ENGINE // logExtended() {\n  // @if CK_DEBUG_ENGINE // \tconsole.log( `ModelText: ${ this }, attrs: ${ convertMapToStringifiedObject( this.getAttributes() ) }` );\n  // @if CK_DEBUG_ENGINE // }\n  // @if CK_DEBUG_ENGINE // log() {\n  // @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelText: ' + this );\n  // @if CK_DEBUG_ENGINE // }\n\n\n}","map":{"version":3,"names":["Node","Text","constructor","data","attrs","_data","offsetSize","length","is","type","toJSON","json","_clone","getAttributes","fromJSON","attributes"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n// @if CK_DEBUG_ENGINE // const { convertMapToStringifiedObject } = require( '../dev-utils/utils' );\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\ttext.is( '$text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'model:$text' ); // -> true\n\t *\t\ttext.is( 'model:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'view:$text' ); // -> false\n\t *\t\ttext.is( 'documentSelection' ); // -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * **Note:** Until version 20.0.0 this method wasn't accepting `'$text'` type. The legacy `'text'` type is still\n\t * accepted for backward compatibility.\n\t *\n\t * @param {String} type Type to check.\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type === '$text' || type === 'model:$text' ||\n\t\t\t// This are legacy values kept for backward compatibility.\n\t\t\ttype === 'text' || type === 'model:text' ||\n\t\t\t// From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.\n\t\t\ttype === 'node' || type === 'model:node';\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n\n\t// @if CK_DEBUG_ENGINE // toString() {\n\t// @if CK_DEBUG_ENGINE // \treturn `#${ this.data }`;\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // logExtended() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( `ModelText: ${ this }, attrs: ${ convertMapToStringifiedObject( this.getAttributes() ) }` );\n\t// @if CK_DEBUG_ENGINE // }\n\n\t// @if CK_DEBUG_ENGINE // log() {\n\t// @if CK_DEBUG_ENGINE // \tconsole.log( 'ModelText: ' + this );\n\t// @if CK_DEBUG_ENGINE // }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;EACtC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,WAAW,CAAEC,IAAF,EAAQC,KAAR,EAAgB;IAC1B,MAAOA,KAAP;IAEA;AACF;AACA;AACA;AACA;AACA;;IACE,KAAKC,KAAL,GAAaF,IAAI,IAAI,EAArB;EACA;EAED;AACD;AACA;;;EACe,IAAVG,UAAU,GAAG;IAChB,OAAO,KAAKH,IAAL,CAAUI,MAAjB;EACA;EAED;AACD;AACA;AACA;AACA;AACA;;;EACS,IAAJJ,IAAI,GAAG;IACV,OAAO,KAAKE,KAAZ;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACCG,EAAE,CAAEC,IAAF,EAAS;IACV,OAAOA,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,aAA7B,IACN;IACAA,IAAI,KAAK,MAFH,IAEaA,IAAI,KAAK,YAFtB,IAGN;IACAA,IAAI,KAAK,MAJH,IAIaA,IAAI,KAAK,YAJ7B;EAKA;EAED;AACD;AACA;AACA;AACA;;;EACCC,MAAM,GAAG;IACR,MAAMC,IAAI,GAAG,MAAMD,MAAN,EAAb;IAEAC,IAAI,CAACR,IAAL,GAAY,KAAKA,IAAjB;IAEA,OAAOQ,IAAP;EACA;EAED;AACD;AACA;AACA;AACA;AACA;;;EACCC,MAAM,GAAG;IACR,OAAO,IAAIX,IAAJ,CAAU,KAAKE,IAAf,EAAqB,KAAKU,aAAL,EAArB,CAAP;EACA;EAED;AACD;AACA;AACA;AACA;AACA;;;EACgB,OAARC,QAAQ,CAAEH,IAAF,EAAS;IACvB,OAAO,IAAIV,IAAJ,CAAUU,IAAI,CAACR,IAAf,EAAqBQ,IAAI,CAACI,UAA1B,CAAP;EACA,CAlGqC,CAoGtC;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;;;AA9GsC"},"metadata":{},"sourceType":"module"}
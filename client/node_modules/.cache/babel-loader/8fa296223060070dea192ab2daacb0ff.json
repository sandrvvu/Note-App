{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertobject\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { findOptimalInsertionRange } from './findoptimalinsertionrange';\n/**\n * Inserts an {@glink framework/guides/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertObject} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertObject}\n * method's behavior.\n *\n * **Note**: For more documentation and examples, see {@link module:engine/model/model~Model#insertObject}.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/element~Element} object An object to be inserted into the model document.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * A selectable where the content should be inserted. If not specified, the current\n * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} placeOrOffset Specifies the exact place or offset for the insertion to take place,\n * relative to `selectable`.\n * @param {Object} [options] Additional options.\n * @param {'auto'|'before'|'after'} [options.findOptimalPosition] An option that, when set, adjusts the insertion position (relative to\n * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n *\n * Note that this option works only for block objects. Inline objects are inserted into text and do not split blocks.\n * @param {'on'|'after'} [options.setSelection] An option that, when set, moves the\n * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n * * When `'on'`, the document selection will be set on the inserted object.\n * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n * such text node, a paragraph will be created and the document selection will be moved inside it.\n * @returns {module:engine/model/range~Range} A range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertObject()`, returns a range collapsed\n * at the insertion position.\n */\n\nexport default function insertObject(model, object, selectable, placeOrOffset) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  if (!model.schema.isObject(object)) {\n    /**\n     * Tried to insert an element with {@link module:engine/model/utils/insertobject insertObject()} function\n     * that is not defined as an object in schema.\n     * See {@link module:engine/model/schema~SchemaItemDefinition#isObject `SchemaItemDefinition`}.\n     * If you want to insert content that is not an object you might want to use\n     * {@link module:engine/model/utils/insertcontent insertContent()} function.\n     * @error insertobject-element-not-an-object\n     */\n    throw new CKEditorError('insertobject-element-not-an-object', model, {\n      object\n    });\n  } // Normalize selectable to a selection instance.\n\n\n  let originalSelection;\n\n  if (!selectable) {\n    originalSelection = model.document.selection;\n  } else if (selectable.is('selection')) {\n    originalSelection = selectable;\n  } else {\n    originalSelection = model.createSelection(selectable, placeOrOffset);\n  } // Adjust the insertion selection.\n\n\n  let insertionSelection = originalSelection;\n\n  if (options.findOptimalPosition && model.schema.isBlock(object)) {\n    insertionSelection = model.createSelection(findOptimalInsertionRange(originalSelection, model, options.findOptimalPosition));\n  } // Collect attributes to be copied on the inserted object.\n\n\n  const firstSelectedBlock = first(originalSelection.getSelectedBlocks());\n  const attributesToCopy = {};\n\n  if (firstSelectedBlock) {\n    Object.assign(attributesToCopy, model.schema.getAttributesWithProperty(firstSelectedBlock, 'copyOnReplace', true));\n  }\n\n  return model.change(writer => {\n    // Remove the selected content to find out what the parent of the inserted object would be.\n    // It would be removed inside model.insertContent() anyway.\n    if (!insertionSelection.isCollapsed) {\n      model.deleteContent(insertionSelection, {\n        doNotAutoparagraph: true\n      });\n    }\n\n    let elementToInsert = object;\n    const insertionPositionParent = insertionSelection.anchor.parent; // Autoparagraphing of an inline objects.\n\n    if (!model.schema.checkChild(insertionPositionParent, object) && model.schema.checkChild(insertionPositionParent, 'paragraph') && model.schema.checkChild('paragraph', object)) {\n      elementToInsert = writer.createElement('paragraph');\n      writer.insert(object, elementToInsert);\n    } // Apply attributes that are allowed on the inserted object (or paragraph if autoparagraphed).\n\n\n    model.schema.setAllowedAttributes(elementToInsert, attributesToCopy, writer); // Insert the prepared content at the optionally adjusted selection.\n\n    const affectedRange = model.insertContent(elementToInsert, insertionSelection); // Nothing got inserted.\n\n    if (affectedRange.isCollapsed) {\n      return affectedRange;\n    }\n\n    if (options.setSelection) {\n      updateSelection(writer, object, options.setSelection, attributesToCopy);\n    }\n\n    return affectedRange;\n  });\n} // Updates document selection based on given `place` parameter in relation to `contextElement` element.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer An instance of the model writer.\n// @param {module:engine/model/element~Element} contextElement An element to set the attributes on.\n// @param {'on'|'after'} place The place where selection should be set in relation to the `contextElement` element.\n// Value `on` will set selection on the passed `contextElement`. Value `after` will set selection after `contextElement`.\n// @param {Object} attributes Attributes keys and values to set on a paragraph that this function can create when\n// `place` parameter is equal to `after` but there is no element with `$text` node to set selection in.\n\nfunction updateSelection(writer, contextElement, place, paragraphAttributes) {\n  const model = writer.model;\n\n  if (place == 'after') {\n    let nextElement = contextElement.nextSibling; // Check whether an element next to the inserted element is defined and can contain a text.\n\n    const canSetSelection = nextElement && model.schema.checkChild(nextElement, '$text'); // If the element is missing, but a paragraph could be inserted next to the element, let's add it.\n\n    if (!canSetSelection && model.schema.checkChild(contextElement.parent, 'paragraph')) {\n      nextElement = writer.createElement('paragraph');\n      model.schema.setAllowedAttributes(nextElement, paragraphAttributes, writer);\n      model.insertContent(nextElement, writer.createPositionAfter(contextElement));\n    } // Put the selection inside the element, at the beginning.\n\n\n    if (nextElement) {\n      writer.setSelection(nextElement, 0);\n    }\n  } else if (place == 'on') {\n    writer.setSelection(contextElement, 'on');\n  } else {\n    /**\n     * The unsupported `options.setSelection` parameter was passed\n     * to the {@link module:engine/model/utils/insertobject insertObject()} function.\n     * Check the {@link module:engine/model/utils/insertobject insertObject()} API documentation for allowed\n     * `options.setSelection` parameter values.\n     *\n     * @error insertobject-invalid-place-parameter-value\n     */\n    throw new CKEditorError('insertobject-invalid-place-parameter-value', model);\n  }\n}","map":{"version":3,"names":["first","CKEditorError","findOptimalInsertionRange","insertObject","model","object","selectable","placeOrOffset","options","schema","isObject","originalSelection","document","selection","is","createSelection","insertionSelection","findOptimalPosition","isBlock","firstSelectedBlock","getSelectedBlocks","attributesToCopy","Object","assign","getAttributesWithProperty","change","writer","isCollapsed","deleteContent","doNotAutoparagraph","elementToInsert","insertionPositionParent","anchor","parent","checkChild","createElement","insert","setAllowedAttributes","affectedRange","insertContent","setSelection","updateSelection","contextElement","place","paragraphAttributes","nextElement","nextSibling","canSetSelection","createPositionAfter"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertobject.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertobject\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport { findOptimalInsertionRange } from './findoptimalinsertionrange';\n\n/**\n * Inserts an {@glink framework/guides/deep-dive/schema#object-elements object element} at a specific position in the editor content.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertObject} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertObject}\n * method's behavior.\n *\n * **Note**: For more documentation and examples, see {@link module:engine/model/model~Model#insertObject}.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/element~Element} object An object to be inserted into the model document.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * A selectable where the content should be inserted. If not specified, the current\n * {@link module:engine/model/document~Document#selection document selection} will be used instead.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} placeOrOffset Specifies the exact place or offset for the insertion to take place,\n * relative to `selectable`.\n * @param {Object} [options] Additional options.\n * @param {'auto'|'before'|'after'} [options.findOptimalPosition] An option that, when set, adjusts the insertion position (relative to\n * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).\n * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.\n * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.\n * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.\n *\n * Note that this option works only for block objects. Inline objects are inserted into text and do not split blocks.\n * @param {'on'|'after'} [options.setSelection] An option that, when set, moves the\n * {@link module:engine/model/document~Document#selection document selection} after inserting the object.\n * * When `'on'`, the document selection will be set on the inserted object.\n * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no\n * such text node, a paragraph will be created and the document selection will be moved inside it.\n * @returns {module:engine/model/range~Range} A range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertObject()`, returns a range collapsed\n * at the insertion position.\n */\nexport default function insertObject( model, object, selectable, placeOrOffset, options = {} ) {\n\tif ( !model.schema.isObject( object ) ) {\n\t\t/**\n\t\t * Tried to insert an element with {@link module:engine/model/utils/insertobject insertObject()} function\n\t\t * that is not defined as an object in schema.\n\t\t * See {@link module:engine/model/schema~SchemaItemDefinition#isObject `SchemaItemDefinition`}.\n\t\t * If you want to insert content that is not an object you might want to use\n\t\t * {@link module:engine/model/utils/insertcontent insertContent()} function.\n\t\t * @error insertobject-element-not-an-object\n\t\t */\n\t\tthrow new CKEditorError( 'insertobject-element-not-an-object', model, { object } );\n\t}\n\n\t// Normalize selectable to a selection instance.\n\tlet originalSelection;\n\n\tif ( !selectable ) {\n\t\toriginalSelection = model.document.selection;\n\t} else if ( selectable.is( 'selection' ) ) {\n\t\toriginalSelection = selectable;\n\t} else {\n\t\toriginalSelection = model.createSelection( selectable, placeOrOffset );\n\t}\n\n\t// Adjust the insertion selection.\n\tlet insertionSelection = originalSelection;\n\n\tif ( options.findOptimalPosition && model.schema.isBlock( object ) ) {\n\t\tinsertionSelection = model.createSelection( findOptimalInsertionRange( originalSelection, model, options.findOptimalPosition ) );\n\t}\n\n\t// Collect attributes to be copied on the inserted object.\n\tconst firstSelectedBlock = first( originalSelection.getSelectedBlocks() );\n\tconst attributesToCopy = {};\n\n\tif ( firstSelectedBlock ) {\n\t\tObject.assign( attributesToCopy, model.schema.getAttributesWithProperty( firstSelectedBlock, 'copyOnReplace', true ) );\n\t}\n\n\treturn model.change( writer => {\n\t\t// Remove the selected content to find out what the parent of the inserted object would be.\n\t\t// It would be removed inside model.insertContent() anyway.\n\t\tif ( !insertionSelection.isCollapsed ) {\n\t\t\tmodel.deleteContent( insertionSelection, { doNotAutoparagraph: true } );\n\t\t}\n\n\t\tlet elementToInsert = object;\n\t\tconst insertionPositionParent = insertionSelection.anchor.parent;\n\n\t\t// Autoparagraphing of an inline objects.\n\t\tif (\n\t\t\t!model.schema.checkChild( insertionPositionParent, object ) &&\n\t\t\tmodel.schema.checkChild( insertionPositionParent, 'paragraph' ) &&\n\t\t\tmodel.schema.checkChild( 'paragraph', object )\n\t\t) {\n\t\t\telementToInsert = writer.createElement( 'paragraph' );\n\n\t\t\twriter.insert( object, elementToInsert );\n\t\t}\n\n\t\t// Apply attributes that are allowed on the inserted object (or paragraph if autoparagraphed).\n\t\tmodel.schema.setAllowedAttributes( elementToInsert, attributesToCopy, writer );\n\n\t\t// Insert the prepared content at the optionally adjusted selection.\n\t\tconst affectedRange = model.insertContent( elementToInsert, insertionSelection );\n\n\t\t// Nothing got inserted.\n\t\tif ( affectedRange.isCollapsed ) {\n\t\t\treturn affectedRange;\n\t\t}\n\n\t\tif ( options.setSelection ) {\n\t\t\tupdateSelection( writer, object, options.setSelection, attributesToCopy );\n\t\t}\n\n\t\treturn affectedRange;\n\t} );\n}\n\n// Updates document selection based on given `place` parameter in relation to `contextElement` element.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer An instance of the model writer.\n// @param {module:engine/model/element~Element} contextElement An element to set the attributes on.\n// @param {'on'|'after'} place The place where selection should be set in relation to the `contextElement` element.\n// Value `on` will set selection on the passed `contextElement`. Value `after` will set selection after `contextElement`.\n// @param {Object} attributes Attributes keys and values to set on a paragraph that this function can create when\n// `place` parameter is equal to `after` but there is no element with `$text` node to set selection in.\nfunction updateSelection( writer, contextElement, place, paragraphAttributes ) {\n\tconst model = writer.model;\n\n\tif ( place == 'after' ) {\n\t\tlet nextElement = contextElement.nextSibling;\n\n\t\t// Check whether an element next to the inserted element is defined and can contain a text.\n\t\tconst canSetSelection = nextElement && model.schema.checkChild( nextElement, '$text' );\n\n\t\t// If the element is missing, but a paragraph could be inserted next to the element, let's add it.\n\t\tif ( !canSetSelection && model.schema.checkChild( contextElement.parent, 'paragraph' ) ) {\n\t\t\tnextElement = writer.createElement( 'paragraph' );\n\n\t\t\tmodel.schema.setAllowedAttributes( nextElement, paragraphAttributes, writer );\n\t\t\tmodel.insertContent( nextElement, writer.createPositionAfter( contextElement ) );\n\t\t}\n\n\t\t// Put the selection inside the element, at the beginning.\n\t\tif ( nextElement ) {\n\t\t\twriter.setSelection( nextElement, 0 );\n\t\t}\n\t}\n\telse if ( place == 'on' ) {\n\t\twriter.setSelection( contextElement, 'on' );\n\t}\n\telse {\n\t\t/**\n\t\t * The unsupported `options.setSelection` parameter was passed\n\t\t * to the {@link module:engine/model/utils/insertobject insertObject()} function.\n\t\t * Check the {@link module:engine/model/utils/insertobject insertObject()} API documentation for allowed\n\t\t * `options.setSelection` parameter values.\n\t\t *\n\t\t * @error insertobject-invalid-place-parameter-value\n\t\t */\n\t\tthrow new CKEditorError( 'insertobject-invalid-place-parameter-value', model );\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
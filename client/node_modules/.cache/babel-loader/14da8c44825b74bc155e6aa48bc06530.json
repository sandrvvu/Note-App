{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\nimport View from '../view';\nimport '../../theme/components/icon/icon.css';\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class IconView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    super();\n    const bind = this.bindTemplate;\n    /**\n     * The SVG source of the icon.\n     *\n     * @observable\n     * @member {String} #content\n     */\n\n    this.set('content', '');\n    /**\n     * This attribute specifies the boundaries to which the\n     * icon content should stretch.\n     *\n     * @observable\n     * @default '0 0 20 20'\n     * @member {String} #viewBox\n     */\n\n    this.set('viewBox', '0 0 20 20');\n    /**\n     * The fill color of the child `path.ck-icon__fill`.\n     *\n     * @observable\n     * @default ''\n     * @member {String} #fillColor\n     */\n\n    this.set('fillColor', '');\n    this.setTemplate({\n      tag: 'svg',\n      ns: 'http://www.w3.org/2000/svg',\n      attributes: {\n        class: ['ck', 'ck-icon'],\n        viewBox: bind.to('viewBox')\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    this._updateXMLContent();\n\n    this._colorFillPaths(); // This is a hack for lack of innerHTML binding.\n    // See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\n\n    this.on('change:content', () => {\n      this._updateXMLContent();\n\n      this._colorFillPaths();\n    });\n    this.on('change:fillColor', () => {\n      this._colorFillPaths();\n    });\n  }\n  /**\n   * Updates the {@link #element} with the value of {@link #content}.\n   *\n   * @private\n   */\n\n\n  _updateXMLContent() {\n    if (this.content) {\n      const parsed = new DOMParser().parseFromString(this.content.trim(), 'image/svg+xml');\n      const svg = parsed.querySelector('svg');\n      const viewBox = svg.getAttribute('viewBox');\n\n      if (viewBox) {\n        this.viewBox = viewBox;\n      }\n\n      this.element.innerHTML = '';\n\n      while (svg.childNodes.length > 0) {\n        this.element.appendChild(svg.childNodes[0]);\n      }\n    }\n  }\n  /**\n   * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n   *\n   * @private\n   */\n\n\n  _colorFillPaths() {\n    if (this.fillColor) {\n      this.element.querySelectorAll('.ck-icon__fill').forEach(path => {\n        path.style.fill = this.fillColor;\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["View","IconView","constructor","bind","bindTemplate","set","setTemplate","tag","ns","attributes","class","viewBox","to","render","_updateXMLContent","_colorFillPaths","on","content","parsed","DOMParser","parseFromString","trim","svg","querySelector","getAttribute","element","innerHTML","childNodes","length","appendChild","fillColor","querySelectorAll","forEach","path","style","fill"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-icon'\n\t\t\t\t],\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,SAAjB;AAEA,OAAO,sCAAP;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;EAC1C;AACD;AACA;EACCE,WAAW,GAAG;IACb;IAEA,MAAMC,IAAI,GAAG,KAAKC,YAAlB;IAEA;AACF;AACA;AACA;AACA;AACA;;IACE,KAAKC,GAAL,CAAU,SAAV,EAAqB,EAArB;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,SAAV,EAAqB,WAArB;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,WAAV,EAAuB,EAAvB;IAEA,KAAKC,WAAL,CAAkB;MACjBC,GAAG,EAAE,KADY;MAEjBC,EAAE,EAAE,4BAFa;MAGjBC,UAAU,EAAE;QACXC,KAAK,EAAE,CACN,IADM,EAEN,SAFM,CADI;QAKXC,OAAO,EAAER,IAAI,CAACS,EAAL,CAAS,SAAT;MALE;IAHK,CAAlB;EAWA;EAED;AACD;AACA;;;EACCC,MAAM,GAAG;IACR,MAAMA,MAAN;;IAEA,KAAKC,iBAAL;;IACA,KAAKC,eAAL,GAJQ,CAMR;IACA;;;IACA,KAAKC,EAAL,CAAS,gBAAT,EAA2B,MAAM;MAChC,KAAKF,iBAAL;;MACA,KAAKC,eAAL;IACA,CAHD;IAKA,KAAKC,EAAL,CAAS,kBAAT,EAA6B,MAAM;MAClC,KAAKD,eAAL;IACA,CAFD;EAGA;EAED;AACD;AACA;AACA;AACA;;;EACCD,iBAAiB,GAAG;IACnB,IAAK,KAAKG,OAAV,EAAoB;MACnB,MAAMC,MAAM,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAiC,KAAKH,OAAL,CAAaI,IAAb,EAAjC,EAAsD,eAAtD,CAAf;MACA,MAAMC,GAAG,GAAGJ,MAAM,CAACK,aAAP,CAAsB,KAAtB,CAAZ;MACA,MAAMZ,OAAO,GAAGW,GAAG,CAACE,YAAJ,CAAkB,SAAlB,CAAhB;;MAEA,IAAKb,OAAL,EAAe;QACd,KAAKA,OAAL,GAAeA,OAAf;MACA;;MAED,KAAKc,OAAL,CAAaC,SAAb,GAAyB,EAAzB;;MAEA,OAAQJ,GAAG,CAACK,UAAJ,CAAeC,MAAf,GAAwB,CAAhC,EAAoC;QACnC,KAAKH,OAAL,CAAaI,WAAb,CAA0BP,GAAG,CAACK,UAAJ,CAAgB,CAAhB,CAA1B;MACA;IACD;EACD;EAED;AACD;AACA;AACA;AACA;;;EACCZ,eAAe,GAAG;IACjB,IAAK,KAAKe,SAAV,EAAsB;MACrB,KAAKL,OAAL,CAAaM,gBAAb,CAA+B,gBAA/B,EAAkDC,OAAlD,CAA2DC,IAAI,IAAI;QAClEA,IAAI,CAACC,KAAL,CAAWC,IAAX,GAAkB,KAAKL,SAAvB;MACA,CAFD;IAGA;EACD;;AAxGyC"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/labeledfieldview\n */\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledfield/labeledfieldview.css';\n/**\n * The labeled field view class. It can be used to enhance any view with the following features:\n *\n * * a label,\n * * (optional) an error message,\n * * (optional) an info (status) text,\n *\n * all bound logically by proper DOM attributes for UX and accessibility.  It also provides an interface\n * (e.g. observable properties) that allows controlling those additional features.\n *\n * The constructor of this class requires a callback that returns a view to be labeled. The callback\n * is called with unique ids that allow binding of DOM properties:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, ( labeledFieldView, viewUid, statusUid ) => {\n *\t\t\tconst inputView = new InputTextView( labeledFieldView.locale );\n *\n *\t\t\tinputView.set( {\n *\t\t\t\tid: viewUid,\n *\t\t\t\tariaDescribedById: statusUid\n *\t\t\t} );\n *\n *\t\t\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n *\t\t\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n *\n *\t\t\treturn inputView;\n *\t\t} );\n *\n *\t\tlabeledInputView.label = 'User name';\n *\t\tlabeledInputView.infoText = 'Full name like for instance, John Doe.';\n *\t\tlabeledInputView.render();\n *\n *\t\tdocument.body.append( labeledInputView.element );\n *\n * See {@link module:ui/labeledfield/utils} to discover ready–to–use labeled input helpers for common\n * UI components.\n *\n * @extends module:ui/view~View\n */\n\nexport default class LabeledFieldView extends View {\n  /**\n   * Creates an instance of the labeled field view class using a provided creator function\n   * that provides the view to be labeled.\n   *\n   * @param {module:utils/locale~Locale} locale The locale instance.\n   * @param {Function} viewCreator A function that returns a {@link module:ui/view~View}\n   * that will be labeled. The following arguments are passed to the creator function:\n   *\n   * * an instance of the `LabeledFieldView` to allow binding observable properties,\n   * * an UID string that connects the {@link #labelView label} and the labeled field view in DOM,\n   * * an UID string that connects the {@link #statusView status} and the labeled field view in DOM.\n   */\n  constructor(locale, viewCreator) {\n    super(locale);\n    const viewUid = `ck-labeled-field-view-${uid()}`;\n    const statusUid = `ck-labeled-field-view-status-${uid()}`;\n    /**\n     * The field view that gets labeled.\n     *\n     * @member {module:ui/view~View} #fieldView\n     */\n\n    this.fieldView = viewCreator(this, viewUid, statusUid);\n    /**\n     * The text of the label.\n     *\n     * @observable\n     * @member {String} #label\n     */\n\n    this.set('label');\n    /**\n     * Controls whether the component is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isEnabled\n     */\n\n    this.set('isEnabled', true);\n    /**\n     * An observable flag set to `true` when {@link #fieldView} is empty (`false` otherwise).\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isEmpty\n     * @default true\n     */\n\n    this.set('isEmpty', true);\n    /**\n     * An observable flag set to `true` when {@link #fieldView} is currently focused by\n     * the user (`false` otherwise).\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     * @default false\n     */\n\n    this.set('isFocused', false);\n    /**\n     * The validation error text. When set, it will be displayed\n     * next to the {@link #fieldView} as a typical validation error message.\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** Setting this property to anything but `null` will automatically\n     * make the `hasError` of the {@link #fieldView} `true`.\n     *\n     * @observable\n     * @member {String|null} #errorText\n     */\n\n    this.set('errorText', null);\n    /**\n     * The additional information text displayed next to the {@link #fieldView} which can\n     * be used to inform the user about its purpose, provide help or hints.\n     *\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n     * latter always takes precedence: if the {@link #errorText} is set, it replaces\n     * {@link #infoText}.\n     *\n     * @observable\n     * @member {String|null} #infoText\n     * @default null\n     */\n\n    this.set('infoText', null);\n    /**\n     * (Optional) The additional CSS class set on the dropdown {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n    this.set('class');\n    /**\n     * The content of the `placeholder` attribute of the {@link #fieldView}.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n\n    this.set('placeholder');\n    /**\n     * The label view instance that describes the entire view.\n     *\n     * @member {module:ui/label/labelview~LabelView} #labelView\n     */\n\n    this.labelView = this._createLabelView(viewUid);\n    /**\n     * The status view for the {@link #fieldView}. It displays {@link #errorText} and\n     * {@link #infoText}.\n     *\n     * @member {module:ui/view~View} #statusView\n     */\n\n    this.statusView = this._createStatusView(statusUid);\n    /**\n     * The combined status text made of {@link #errorText} and {@link #infoText}.\n     * Note that when present, {@link #errorText} always takes precedence in the\n     * status.\n     *\n     * @see #errorText\n     * @see #infoText\n     * @see #statusView\n     * @private\n     * @observable\n     * @member {String|null} #_statusText\n     */\n\n    this.bind('_statusText').to(this, 'errorText', this, 'infoText', (errorText, infoText) => errorText || infoText);\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-field-view', bind.to('class'), bind.if('isEnabled', 'ck-disabled', value => !value), bind.if('isEmpty', 'ck-labeled-field-view_empty'), bind.if('isFocused', 'ck-labeled-field-view_focused'), bind.if('placeholder', 'ck-labeled-field-view_placeholder'), bind.if('errorText', 'ck-error')]\n      },\n      children: [{\n        tag: 'div',\n        attributes: {\n          class: ['ck', 'ck-labeled-field-view__input-wrapper']\n        },\n        children: [this.fieldView, this.labelView]\n      }, this.statusView]\n    });\n  }\n  /**\n   * Creates label view class instance and bind with view.\n   *\n   * @private\n   * @param {String} id Unique id to set as labelView#for attribute.\n   * @returns {module:ui/label/labelview~LabelView}\n   */\n\n\n  _createLabelView(id) {\n    const labelView = new LabelView(this.locale);\n    labelView.for = id;\n    labelView.bind('text').to(this, 'label');\n    return labelView;\n  }\n  /**\n   * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n   * next to the {@link #fieldView}. See {@link #_statusText}.\n   *\n   * @private\n   * @param {String} statusUid Unique id of the status, shared with the {@link #fieldView view's}\n   * `aria-describedby` attribute.\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createStatusView(statusUid) {\n    const statusView = new View(this.locale);\n    const bind = this.bindTemplate;\n    statusView.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-field-view__status', bind.if('errorText', 'ck-labeled-field-view__status_error'), bind.if('_statusText', 'ck-hidden', value => !value)],\n        id: statusUid,\n        role: bind.if('errorText', 'alert')\n      },\n      children: [{\n        text: bind.to('_statusText')\n      }]\n    });\n    return statusView;\n  }\n  /**\n   * Focuses the {@link #fieldView}.\n   */\n\n\n  focus() {\n    this.fieldView.focus();\n  }\n\n}","map":{"version":3,"names":["View","uid","LabelView","LabeledFieldView","constructor","locale","viewCreator","viewUid","statusUid","fieldView","set","labelView","_createLabelView","statusView","_createStatusView","bind","to","errorText","infoText","bindTemplate","setTemplate","tag","attributes","class","if","value","children","id","for","role","text","focus"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-ui/src/labeledfield/labeledfieldview.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledfield/labeledfieldview\n */\n\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledfield/labeledfieldview.css';\n\n/**\n * The labeled field view class. It can be used to enhance any view with the following features:\n *\n * * a label,\n * * (optional) an error message,\n * * (optional) an info (status) text,\n *\n * all bound logically by proper DOM attributes for UX and accessibility.  It also provides an interface\n * (e.g. observable properties) that allows controlling those additional features.\n *\n * The constructor of this class requires a callback that returns a view to be labeled. The callback\n * is called with unique ids that allow binding of DOM properties:\n *\n *\t\tconst labeledInputView = new LabeledFieldView( locale, ( labeledFieldView, viewUid, statusUid ) => {\n *\t\t\tconst inputView = new InputTextView( labeledFieldView.locale );\n *\n *\t\t\tinputView.set( {\n *\t\t\t\tid: viewUid,\n *\t\t\t\tariaDescribedById: statusUid\n *\t\t\t} );\n *\n *\t\t\tinputView.bind( 'isReadOnly' ).to( labeledFieldView, 'isEnabled', value => !value );\n *\t\t\tinputView.bind( 'hasError' ).to( labeledFieldView, 'errorText', value => !!value );\n *\n *\t\t\treturn inputView;\n *\t\t} );\n *\n *\t\tlabeledInputView.label = 'User name';\n *\t\tlabeledInputView.infoText = 'Full name like for instance, John Doe.';\n *\t\tlabeledInputView.render();\n *\n *\t\tdocument.body.append( labeledInputView.element );\n *\n * See {@link module:ui/labeledfield/utils} to discover ready–to–use labeled input helpers for common\n * UI components.\n *\n * @extends module:ui/view~View\n */\nexport default class LabeledFieldView extends View {\n\t/**\n\t * Creates an instance of the labeled field view class using a provided creator function\n\t * that provides the view to be labeled.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Function} viewCreator A function that returns a {@link module:ui/view~View}\n\t * that will be labeled. The following arguments are passed to the creator function:\n\t *\n\t * * an instance of the `LabeledFieldView` to allow binding observable properties,\n\t * * an UID string that connects the {@link #labelView label} and the labeled field view in DOM,\n\t * * an UID string that connects the {@link #statusView status} and the labeled field view in DOM.\n\t */\n\tconstructor( locale, viewCreator ) {\n\t\tsuper( locale );\n\n\t\tconst viewUid = `ck-labeled-field-view-${ uid() }`;\n\t\tconst statusUid = `ck-labeled-field-view-status-${ uid() }`;\n\n\t\t/**\n\t\t * The field view that gets labeled.\n\t\t *\n\t\t * @member {module:ui/view~View} #fieldView\n\t\t */\n\t\tthis.fieldView = viewCreator( this, viewUid, statusUid );\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.set( 'label' );\n\n\t\t/**\n\t\t * Controls whether the component is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * An observable flag set to `true` when {@link #fieldView} is empty (`false` otherwise).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isEmpty\n\t\t * @default true\n\t\t */\n\t\tthis.set( 'isEmpty', true );\n\n\t\t/**\n\t\t * An observable flag set to `true` when {@link #fieldView} is currently focused by\n\t\t * the user (`false` otherwise).\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t * @default false\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The validation error text. When set, it will be displayed\n\t\t * next to the {@link #fieldView} as a typical validation error message.\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** Setting this property to anything but `null` will automatically\n\t\t * make the `hasError` of the {@link #fieldView} `true`.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #errorText\n\t\t */\n\t\tthis.set( 'errorText', null );\n\n\t\t/**\n\t\t * The additional information text displayed next to the {@link #fieldView} which can\n\t\t * be used to inform the user about its purpose, provide help or hints.\n\t\t *\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n\t\t * latter always takes precedence: if the {@link #errorText} is set, it replaces\n\t\t * {@link #infoText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #infoText\n\t\t * @default null\n\t\t */\n\t\tthis.set( 'infoText', null );\n\n\t\t/**\n\t\t * (Optional) The additional CSS class set on the dropdown {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * The content of the `placeholder` attribute of the {@link #fieldView}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * The label view instance that describes the entire view.\n\t\t *\n\t\t * @member {module:ui/label/labelview~LabelView} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( viewUid );\n\n\t\t/**\n\t\t * The status view for the {@link #fieldView}. It displays {@link #errorText} and\n\t\t * {@link #infoText}.\n\t\t *\n\t\t * @member {module:ui/view~View} #statusView\n\t\t */\n\t\tthis.statusView = this._createStatusView( statusUid );\n\n\t\t/**\n\t\t * The combined status text made of {@link #errorText} and {@link #infoText}.\n\t\t * Note that when present, {@link #errorText} always takes precedence in the\n\t\t * status.\n\t\t *\n\t\t * @see #errorText\n\t\t * @see #infoText\n\t\t * @see #statusView\n\t\t * @private\n\t\t * @observable\n\t\t * @member {String|null} #_statusText\n\t\t */\n\t\tthis.bind( '_statusText' ).to(\n\t\t\tthis, 'errorText',\n\t\t\tthis, 'infoText',\n\t\t\t( errorText, infoText ) => errorText || infoText\n\t\t);\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-field-view',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value ),\n\t\t\t\t\tbind.if( 'isEmpty', 'ck-labeled-field-view_empty' ),\n\t\t\t\t\tbind.if( 'isFocused', 'ck-labeled-field-view_focused' ),\n\t\t\t\t\tbind.if( 'placeholder', 'ck-labeled-field-view_placeholder' ),\n\t\t\t\t\tbind.if( 'errorText', 'ck-error' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-labeled-field-view__input-wrapper'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\tthis.fieldView,\n\t\t\t\t\t\tthis.labelView\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tthis.statusView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Creates label view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {String} id Unique id to set as labelView#for attribute.\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n\t_createLabelView( id ) {\n\t\tconst labelView = new LabelView( this.locale );\n\n\t\tlabelView.for = id;\n\t\tlabelView.bind( 'text' ).to( this, 'label' );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n\t * next to the {@link #fieldView}. See {@link #_statusText}.\n\t *\n\t * @private\n\t * @param {String} statusUid Unique id of the status, shared with the {@link #fieldView view's}\n\t * `aria-describedby` attribute.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createStatusView( statusUid ) {\n\t\tconst statusView = new View( this.locale );\n\t\tconst bind = this.bindTemplate;\n\n\t\tstatusView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-field-view__status',\n\t\t\t\t\tbind.if( 'errorText', 'ck-labeled-field-view__status_error' ),\n\t\t\t\t\tbind.if( '_statusText', 'ck-hidden', value => !value )\n\t\t\t\t],\n\t\t\t\tid: statusUid,\n\t\t\t\trole: bind.if( 'errorText', 'alert' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( '_statusText' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn statusView;\n\t}\n\n\t/**\n\t * Focuses the {@link #fieldView}.\n\t */\n\tfocus() {\n\t\tthis.fieldView.focus();\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAO,0DAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BH,IAA/B,CAAoC;EAClD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCI,WAAW,CAAEC,MAAF,EAAUC,WAAV,EAAwB;IAClC,MAAOD,MAAP;IAEA,MAAME,OAAO,GAAI,yBAAyBN,GAAG,EAAI,EAAjD;IACA,MAAMO,SAAS,GAAI,gCAAgCP,GAAG,EAAI,EAA1D;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKQ,SAAL,GAAiBH,WAAW,CAAE,IAAF,EAAQC,OAAR,EAAiBC,SAAjB,CAA5B;IAEA;AACF;AACA;AACA;AACA;AACA;;IACE,KAAKE,GAAL,CAAU,OAAV;IAEA;AACF;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,WAAV,EAAuB,IAAvB;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,SAAV,EAAqB,IAArB;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,WAAV,EAAuB,KAAvB;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,WAAV,EAAuB,IAAvB;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACE,KAAKA,GAAL,CAAU,UAAV,EAAsB,IAAtB;IAEA;AACF;AACA;AACA;AACA;AACA;;IACE,K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"},"metadata":{},"sourceType":"module"}
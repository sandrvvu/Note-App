{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n\n/* global window */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport pilcrow from '@ckeditor/ckeditor5-core/theme/icons/pilcrow.svg';\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView from '../toolbarview';\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nconst toPx = toUnit('px');\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * \t\t __ |\n * \t\t|  ||  This is a block of content that the\n * \t\t ¯¯ |  button is attached to. This is a\n * \t\t    |  block of content that the button is\n * \t\t    |  attached to.\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * \t\t.ck-block-toolbar-button {\n * \t\t\ttransform: translateX( -10px );\n * \t\t}\n *\n * \t\t __   |\n * \t\t|  |  |  This is a block of content that the\n * \t\t ¯¯   |  button is attached to. This is a\n * \t\t      |  block of content that the button is\n * \t\t      |  attached to.\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * \t\t.ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \t\t\ttransform: translateX( 10px );\n * \t\t}\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BlockToolbar extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BlockToolbar';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * A cached and normalized `config.blockToolbar` object.\n     *\n     * @type {module:core/editor/editorconfig~EditorConfig#blockToolbar}\n     * @private\n     */\n\n    this._blockToolbarConfig = normalizeToolbarConfig(this.editor.config.get('blockToolbar'));\n    /**\n     * The toolbar view.\n     *\n     * @type {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n\n    this.toolbarView = this._createToolbarView();\n    /**\n     * The balloon panel view, containing the {@link #toolbarView}.\n     *\n     * @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n     */\n\n    this.panelView = this._createPanelView();\n    /**\n     * The button view that opens the {@link #toolbarView}.\n     *\n     * @type {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n     */\n\n    this.buttonView = this._createButtonView();\n    /**\n     * An instance of the resize observer that allows to respond to changes in editable's geometry\n     * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n     *\n     * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n     * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n     *\n     * **Note:** Created in {@link #afterInit}.\n     *\n     * @protected\n     * @member {module:utils/dom/resizeobserver~ResizeObserver}\n     */\n\n    this._resizeObserver = null; // Close the #panelView upon clicking outside of the plugin UI.\n\n    clickOutsideHandler({\n      emitter: this.panelView,\n      contextElements: [this.panelView.element, this.buttonView.element],\n      activator: () => this.panelView.isVisible,\n      callback: () => this._hidePanel()\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Hides panel on a direct selection change.\n\n    this.listenTo(editor.model.document.selection, 'change:range', (evt, data) => {\n      if (data.directChange) {\n        this._hidePanel();\n      }\n    });\n    this.listenTo(editor.ui, 'update', () => this._updateButton()); // `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n\n    this.listenTo(editor, 'change:isReadOnly', () => this._updateButton(), {\n      priority: 'low'\n    });\n    this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => this._updateButton()); // Reposition button on resize.\n\n    this.listenTo(this.buttonView, 'change:isVisible', (evt, name, isVisible) => {\n      if (isVisible) {\n        // Keep correct position of button and panel on window#resize.\n        this.buttonView.listenTo(window, 'resize', () => this._updateButton());\n      } else {\n        // Stop repositioning button when is hidden.\n        this.buttonView.stopListening(window, 'resize'); // Hide the panel when the button disappears.\n\n        this._hidePanel();\n      }\n    });\n  }\n  /**\n   * Fills the toolbar with its items based on the configuration.\n   *\n   * **Note:** This needs to be done after all plugins are ready.\n   *\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const factory = this.editor.ui.componentFactory;\n    const config = this._blockToolbarConfig;\n    this.toolbarView.fillFromConfig(config, factory); // Hide panel before executing each button in the panel.\n\n    for (const item of this.toolbarView.items) {\n      item.on('execute', () => this._hidePanel(true), {\n        priority: 'high'\n      });\n    }\n\n    if (!config.shouldNotGroupWhenFull) {\n      this.listenTo(this.editor, 'ready', () => {\n        const editableElement = this.editor.ui.view.editable.element; // Set #toolbarView's max-width just after the initialization and update it on the editable resize.\n\n        this._resizeObserver = new ResizeObserver(editableElement, () => {\n          this.toolbarView.maxWidth = this._getToolbarMaxWidth();\n        });\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy(); // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\n    this.panelView.destroy();\n    this.buttonView.destroy();\n    this.toolbarView.destroy();\n\n    if (this._resizeObserver) {\n      this._resizeObserver.destroy();\n    }\n  }\n  /**\n   * Creates the {@link #toolbarView}.\n   *\n   * @private\n   * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n   */\n\n\n  _createToolbarView() {\n    const shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n    const toolbarView = new ToolbarView(this.editor.locale, {\n      shouldGroupWhenFull,\n      isFloating: true\n    }); // When toolbar lost focus then panel should hide.\n\n    toolbarView.focusTracker.on('change:isFocused', (evt, name, is) => {\n      if (!is) {\n        this._hidePanel();\n      }\n    });\n    return toolbarView;\n  }\n  /**\n   * Creates the {@link #panelView}.\n   *\n   * @private\n   * @returns {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n   */\n\n\n  _createPanelView() {\n    const editor = this.editor;\n    const panelView = new BalloonPanelView(editor.locale);\n    panelView.content.add(this.toolbarView);\n    panelView.class = 'ck-toolbar-container';\n    editor.ui.view.body.add(panelView);\n    editor.ui.focusTracker.add(panelView.element); // Close #panelView on `Esc` press.\n\n    this.toolbarView.keystrokes.set('Esc', (evt, cancel) => {\n      this._hidePanel(true);\n\n      cancel();\n    });\n    return panelView;\n  }\n  /**\n   * Creates the {@link #buttonView}.\n   *\n   * @private\n   * @returns {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n   */\n\n\n  _createButtonView() {\n    const editor = this.editor;\n    const t = editor.t;\n    const buttonView = new BlockButtonView(editor.locale);\n    buttonView.set({\n      label: t('Edit block'),\n      icon: pilcrow,\n      withText: false\n    }); // Bind the panelView observable properties to the buttonView.\n\n    buttonView.bind('isOn').to(this.panelView, 'isVisible');\n    buttonView.bind('tooltip').to(this.panelView, 'isVisible', isVisible => !isVisible); // Toggle the panelView upon buttonView#execute.\n\n    this.listenTo(buttonView, 'execute', () => {\n      if (!this.panelView.isVisible) {\n        this._showPanel();\n      } else {\n        this._hidePanel(true);\n      }\n    });\n    editor.ui.view.body.add(buttonView);\n    editor.ui.focusTracker.add(buttonView.element);\n    return buttonView;\n  }\n  /**\n   * Shows or hides the button.\n   * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n   *\n   * @private\n   */\n\n\n  _updateButton() {\n    const editor = this.editor;\n    const model = editor.model;\n    const view = editor.editing.view; // Hides the button when the editor is not focused.\n\n    if (!editor.ui.focusTracker.isFocused) {\n      this._hideButton();\n\n      return;\n    } // Hides the button when the editor switches to the read-only mode.\n\n\n    if (editor.isReadOnly) {\n      this._hideButton();\n\n      return;\n    } // Get the first selected block, button will be attached to this element.\n\n\n    const modelTarget = Array.from(model.document.selection.getSelectedBlocks())[0]; // Hides the button when there is no enabled item in toolbar for the current block element.\n\n    if (!modelTarget || Array.from(this.toolbarView.items).every(item => !item.isEnabled)) {\n      this._hideButton();\n\n      return;\n    } // Get DOM target element.\n\n\n    const domTarget = view.domConverter.mapViewToDom(editor.editing.mapper.toViewElement(modelTarget)); // Show block button.\n\n    this.buttonView.isVisible = true; // Attach block button to target DOM element.\n\n    this._attachButtonToElement(domTarget); // When panel is opened then refresh it position to be properly aligned with block button.\n\n\n    if (this.panelView.isVisible) {\n      this._showPanel();\n    }\n  }\n  /**\n   * Hides the button.\n   *\n   * @private\n   */\n\n\n  _hideButton() {\n    this.buttonView.isVisible = false;\n  }\n  /**\n   * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n   * If the toolbar is already visible, then it simply repositions it.\n   *\n   * @private\n   */\n\n\n  _showPanel() {\n    const wasVisible = this.panelView.isVisible; // So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n    // positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n    // grouping works thanks to:\n    //\n    // * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n    // * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n    //\n    // Here are the possible scenarios:\n    //\n    // 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n    //    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n    //    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n    //    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n    //    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n    //    to the left and being displayed in the wrong place.\n    // 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n    //    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n    //    it is positioned using CSS \"left\" it will move.\n    // 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n    //    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n    //    items grouping state is stable and final.\n    //\n    // https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n\n    this.panelView.show();\n    this.toolbarView.maxWidth = this._getToolbarMaxWidth();\n    this.panelView.pin({\n      target: this.buttonView.element,\n      limiter: this.editor.ui.getEditableElement()\n    });\n\n    if (!wasVisible) {\n      this.toolbarView.items.get(0).focus();\n    }\n  }\n  /**\n   * Hides the {@link #toolbarView}.\n   *\n   * @private\n   * @param {Boolean} [focusEditable=false] When `true`, the editable will be focused after hiding the panel.\n   */\n\n\n  _hidePanel(focusEditable) {\n    this.panelView.isVisible = false;\n\n    if (focusEditable) {\n      this.editor.editing.view.focus();\n    }\n  }\n  /**\n   * Attaches the {@link #buttonView} to the target block of content.\n   *\n   * @protected\n   * @param {HTMLElement} targetElement Target element.\n   */\n\n\n  _attachButtonToElement(targetElement) {\n    const contentStyles = window.getComputedStyle(targetElement);\n    const editableRect = new Rect(this.editor.ui.getEditableElement());\n    const contentPaddingTop = parseInt(contentStyles.paddingTop, 10); // When line height is not an integer then thread it as \"normal\".\n    // MDN says that 'normal' == ~1.2 on desktop browsers.\n\n    const contentLineHeight = parseInt(contentStyles.lineHeight, 10) || parseInt(contentStyles.fontSize, 10) * 1.2;\n    const position = getOptimalPosition({\n      element: this.buttonView.element,\n      target: targetElement,\n      positions: [(contentRect, buttonRect) => {\n        let left;\n\n        if (this.editor.locale.uiLanguageDirection === 'ltr') {\n          left = editableRect.left - buttonRect.width;\n        } else {\n          left = editableRect.right;\n        }\n\n        return {\n          top: contentRect.top + contentPaddingTop + (contentLineHeight - buttonRect.height) / 2,\n          left\n        };\n      }]\n    });\n    this.buttonView.top = position.top;\n    this.buttonView.left = position.left;\n  }\n  /**\n   * Gets the {@link #toolbarView} max-width, based on\n   * editable width plus distance between farthest edge of the {@link #buttonView} and the editable.\n   *\n   * @private\n   * @returns {String} maxWidth A maximum width that toolbar can have, in pixels.\n   */\n\n\n  _getToolbarMaxWidth() {\n    const editableElement = this.editor.ui.view.editable.element;\n    const editableRect = new Rect(editableElement);\n    const buttonRect = new Rect(this.buttonView.element);\n    const isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n    const offset = isRTL ? buttonRect.left - editableRect.right + buttonRect.width : editableRect.left - buttonRect.left;\n    return toPx(editableRect.width + offset);\n  }\n\n}\n/**\n * The block toolbar configuration. Used by the {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}\n * feature.\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: {\n *\t\t\t\titems: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * Read more about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#blockToolbar\n */","map":{"version":3,"names":["Plugin","pilcrow","BlockButtonView","BalloonPanelView","ToolbarView","clickOutsideHandler","getOptimalPosition","Rect","normalizeToolbarConfig","ResizeObserver","toUnit","toPx","BlockToolbar","pluginName","constructor","editor","_blockToolbarConfig","config","get","toolbarView","_createToolbarView","panelView","_createPanelView","buttonView","_createButtonView","_resizeObserver","emitter","contextElements","element","activator","isVisible","callback","_hidePanel","init","listenTo","model","document","selection","evt","data","directChange","ui","_updateButton","priority","focusTracker","name","window","stopListening","afterInit","factory","componentFactory","fillFromConfig","item","items","on","shouldNotGroupWhenFull","editableElement","view","editable","maxWidth","_getToolbarMaxWidth","destroy","shouldGroupWhenFull","locale","isFloating","is","content","add","class","body","keystrokes","set","cancel","t","label","icon","withText","bind","to","_showPanel","editing","isFocused","_hideButton","isReadOnly","modelTarget","Array","from","getSelectedBlocks","every","isEnabled","domTarget","domConverter","mapViewToDom","mapper","toViewElement","_attachButtonToElement","wasVisible","show","pin","target","limiter","getEditableElement","focus","focusEditable","targetElement","contentStyles","getComputedStyle","editableRect","contentPaddingTop","parseInt","paddingTop","contentLineHeight","lineHeight","fontSize","position","positions","contentRect","buttonRect","left","uiLanguageDirection","width","right","top","height","isRTL","offset"],"sources":["C:/kpii/KYRSACH/note_app/client/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/block/blocktoolbar.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n\n/* global window */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport pilcrow from '@ckeditor/ckeditor5-core/theme/icons/pilcrow.svg';\n\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView from '../toolbarview';\n\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\n\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\n\nimport ResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/resizeobserver';\n\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * \t\t __ |\n * \t\t|  ||  This is a block of content that the\n * \t\t ¯¯ |  button is attached to. This is a\n * \t\t    |  block of content that the button is\n * \t\t    |  attached to.\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * \t\t.ck-block-toolbar-button {\n * \t\t\ttransform: translateX( -10px );\n * \t\t}\n *\n * \t\t __   |\n * \t\t|  |  |  This is a block of content that the\n * \t\t ¯¯   |  button is attached to. This is a\n * \t\t      |  block of content that the button is\n * \t\t      |  attached to.\n *\n * **Note**: If you plan to run the editor in a right–to–left (RTL) language, keep in mind the button\n * will be attached to the **right** boundary of the editable area. In that case, make sure the\n * CSS position adjustment works properly by adding the following styles:\n *\n * \t\t.ck[dir=\"rtl\"] .ck-block-toolbar-button {\n * \t\t\ttransform: translateX( 10px );\n * \t\t}\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * A cached and normalized `config.blockToolbar` object.\n\t\t *\n\t\t * @type {module:core/editor/editorconfig~EditorConfig#blockToolbar}\n\t\t * @private\n\t\t */\n\t\tthis._blockToolbarConfig = normalizeToolbarConfig( this.editor.config.get( 'blockToolbar' ) );\n\n\t\t/**\n\t\t * The toolbar view.\n\t\t *\n\t\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbarView = this._createToolbarView();\n\n\t\t/**\n\t\t * The balloon panel view, containing the {@link #toolbarView}.\n\t\t *\n\t\t * @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t\t */\n\t\tthis.panelView = this._createPanelView();\n\n\t\t/**\n\t\t * The button view that opens the {@link #toolbarView}.\n\t\t *\n\t\t * @type {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n\t\t */\n\t\tthis.buttonView = this._createButtonView();\n\n\t\t/**\n\t\t * An instance of the resize observer that allows to respond to changes in editable's geometry\n\t\t * so the toolbar can stay within its boundaries (and group toolbar items that do not fit).\n\t\t *\n\t\t * **Note**: Used only when `shouldNotGroupWhenFull` was **not** set in the\n\t\t * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar configuration}.\n\t\t *\n\t\t * **Note:** Created in {@link #afterInit}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/resizeobserver~ResizeObserver}\n\t\t */\n\t\tthis._resizeObserver = null;\n\n\t\t// Close the #panelView upon clicking outside of the plugin UI.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this.panelView,\n\t\t\tcontextElements: [ this.panelView.element, this.buttonView.element ],\n\t\t\tactivator: () => this.panelView.isVisible,\n\t\t\tcallback: () => this._hidePanel()\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Hides panel on a direct selection change.\n\t\tthis.listenTo( editor.model.document.selection, 'change:range', ( evt, data ) => {\n\t\t\tif ( data.directChange ) {\n\t\t\t\tthis._hidePanel();\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( editor.ui, 'update', () => this._updateButton() );\n\t\t// `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n\t\tthis.listenTo( editor, 'change:isReadOnly', () => this._updateButton(), { priority: 'low' } );\n\t\tthis.listenTo( editor.ui.focusTracker, 'change:isFocused', () => this._updateButton() );\n\n\t\t// Reposition button on resize.\n\t\tthis.listenTo( this.buttonView, 'change:isVisible', ( evt, name, isVisible ) => {\n\t\t\tif ( isVisible ) {\n\t\t\t\t// Keep correct position of button and panel on window#resize.\n\t\t\t\tthis.buttonView.listenTo( window, 'resize', () => this._updateButton() );\n\t\t\t} else {\n\t\t\t\t// Stop repositioning button when is hidden.\n\t\t\t\tthis.buttonView.stopListening( window, 'resize' );\n\n\t\t\t\t// Hide the panel when the button disappears.\n\t\t\t\tthis._hidePanel();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Fills the toolbar with its items based on the configuration.\n\t *\n\t * **Note:** This needs to be done after all plugins are ready.\n\t *\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst factory = this.editor.ui.componentFactory;\n\t\tconst config = this._blockToolbarConfig;\n\n\t\tthis.toolbarView.fillFromConfig( config, factory );\n\n\t\t// Hide panel before executing each button in the panel.\n\t\tfor ( const item of this.toolbarView.items ) {\n\t\t\titem.on( 'execute', () => this._hidePanel( true ), { priority: 'high' } );\n\t\t}\n\n\t\tif ( !config.shouldNotGroupWhenFull ) {\n\t\t\tthis.listenTo( this.editor, 'ready', () => {\n\t\t\t\tconst editableElement = this.editor.ui.view.editable.element;\n\n\t\t\t\t// Set #toolbarView's max-width just after the initialization and update it on the editable resize.\n\t\t\t\tthis._resizeObserver = new ResizeObserver( editableElement, () => {\n\t\t\t\t\tthis.toolbarView.maxWidth = this._getToolbarMaxWidth();\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\t\tthis.panelView.destroy();\n\t\tthis.buttonView.destroy();\n\t\tthis.toolbarView.destroy();\n\n\t\tif ( this._resizeObserver ) {\n\t\t\tthis._resizeObserver.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Creates the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n\t */\n\t_createToolbarView() {\n\t\tconst shouldGroupWhenFull = !this._blockToolbarConfig.shouldNotGroupWhenFull;\n\t\tconst toolbarView = new ToolbarView( this.editor.locale, {\n\t\t\tshouldGroupWhenFull,\n\t\t\tisFloating: true\n\t\t} );\n\n\t\t// When toolbar lost focus then panel should hide.\n\t\ttoolbarView.focusTracker.on( 'change:isFocused', ( evt, name, is ) => {\n\t\t\tif ( !is ) {\n\t\t\t\tthis._hidePanel();\n\t\t\t}\n\t\t} );\n\n\t\treturn toolbarView;\n\t}\n\n\t/**\n\t * Creates the {@link #panelView}.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t */\n\t_createPanelView() {\n\t\tconst editor = this.editor;\n\t\tconst panelView = new BalloonPanelView( editor.locale );\n\n\t\tpanelView.content.add( this.toolbarView );\n\t\tpanelView.class = 'ck-toolbar-container';\n\t\teditor.ui.view.body.add( panelView );\n\t\teditor.ui.focusTracker.add( panelView.element );\n\n\t\t// Close #panelView on `Esc` press.\n\t\tthis.toolbarView.keystrokes.set( 'Esc', ( evt, cancel ) => {\n\t\t\tthis._hidePanel( true );\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn panelView;\n\t}\n\n\t/**\n\t * Creates the {@link #buttonView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n\t */\n\t_createButtonView() {\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\t\tconst buttonView = new BlockButtonView( editor.locale );\n\n\t\tbuttonView.set( {\n\t\t\tlabel: t( 'Edit block' ),\n\t\t\ticon: pilcrow,\n\t\t\twithText: false\n\t\t} );\n\n\t\t// Bind the panelView observable properties to the buttonView.\n\t\tbuttonView.bind( 'isOn' ).to( this.panelView, 'isVisible' );\n\t\tbuttonView.bind( 'tooltip' ).to( this.panelView, 'isVisible', isVisible => !isVisible );\n\n\t\t// Toggle the panelView upon buttonView#execute.\n\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\tif ( !this.panelView.isVisible ) {\n\t\t\t\tthis._showPanel();\n\t\t\t} else {\n\t\t\t\tthis._hidePanel( true );\n\t\t\t}\n\t\t} );\n\n\t\teditor.ui.view.body.add( buttonView );\n\t\teditor.ui.focusTracker.add( buttonView.element );\n\n\t\treturn buttonView;\n\t}\n\n\t/**\n\t * Shows or hides the button.\n\t * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n\t *\n\t * @private\n\t */\n\t_updateButton() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst view = editor.editing.view;\n\n\t\t// Hides the button when the editor is not focused.\n\t\tif ( !editor.ui.focusTracker.isFocused ) {\n\t\t\tthis._hideButton();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Hides the button when the editor switches to the read-only mode.\n\t\tif ( editor.isReadOnly ) {\n\t\t\tthis._hideButton();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the first selected block, button will be attached to this element.\n\t\tconst modelTarget = Array.from( model.document.selection.getSelectedBlocks() )[ 0 ];\n\n\t\t// Hides the button when there is no enabled item in toolbar for the current block element.\n\t\tif ( !modelTarget || Array.from( this.toolbarView.items ).every( item => !item.isEnabled ) ) {\n\t\t\tthis._hideButton();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Get DOM target element.\n\t\tconst domTarget = view.domConverter.mapViewToDom( editor.editing.mapper.toViewElement( modelTarget ) );\n\n\t\t// Show block button.\n\t\tthis.buttonView.isVisible = true;\n\n\t\t// Attach block button to target DOM element.\n\t\tthis._attachButtonToElement( domTarget );\n\n\t\t// When panel is opened then refresh it position to be properly aligned with block button.\n\t\tif ( this.panelView.isVisible ) {\n\t\t\tthis._showPanel();\n\t\t}\n\t}\n\n\t/**\n\t * Hides the button.\n\t *\n\t * @private\n\t */\n\t_hideButton() {\n\t\tthis.buttonView.isVisible = false;\n\t}\n\n\t/**\n\t * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n\t * If the toolbar is already visible, then it simply repositions it.\n\t *\n\t * @private\n\t */\n\t_showPanel() {\n\t\tconst wasVisible = this.panelView.isVisible;\n\n\t\t// So here's the thing: If there was no initial panelView#show() or these two were in different order, the toolbar\n\t\t// positioning will break in RTL editors. Weird, right? What you show know is that the toolbar\n\t\t// grouping works thanks to:\n\t\t//\n\t\t// * the ResizeObserver, which kicks in as soon as the toolbar shows up in DOM (becomes visible again).\n\t\t// * the observable ToolbarView#maxWidth, which triggers re-grouping when changed.\n\t\t//\n\t\t// Here are the possible scenarios:\n\t\t//\n\t\t// 1. (WRONG ❌) If the #maxWidth is set when the toolbar is invisible, it won't affect item grouping (no DOMRects, no grouping).\n\t\t//    Then, when panelView.pin() is called, the position of the toolbar will be calculated for the old\n\t\t//    items grouping state, and when finally ResizeObserver kicks in (hey, the toolbar is visible now, right?)\n\t\t//    it will group/ungroup some items and the length of the toolbar will change. But since in RTL the toolbar\n\t\t//    is attached on the right side and the positioning uses CSS \"left\", it will result in the toolbar shifting\n\t\t//    to the left and being displayed in the wrong place.\n\t\t// 2. (WRONG ❌) If the panelView.pin() is called first and #maxWidth set next, then basically the story repeats. The balloon\n\t\t//    calculates the position for the old toolbar grouping state, then the toolbar re-groups items and because\n\t\t//    it is positioned using CSS \"left\" it will move.\n\t\t// 3. (RIGHT ✅) We show the panel first (the toolbar does re-grouping but it does not matter), then the #maxWidth\n\t\t//    is set allowing the toolbar to re-group again and finally panelView.pin() does the positioning when the\n\t\t//    items grouping state is stable and final.\n\t\t//\n\t\t// https://github.com/ckeditor/ckeditor5/issues/6449, https://github.com/ckeditor/ckeditor5/issues/6575\n\t\tthis.panelView.show();\n\t\tthis.toolbarView.maxWidth = this._getToolbarMaxWidth();\n\n\t\tthis.panelView.pin( {\n\t\t\ttarget: this.buttonView.element,\n\t\t\tlimiter: this.editor.ui.getEditableElement()\n\t\t} );\n\n\t\tif ( !wasVisible ) {\n\t\t\tthis.toolbarView.items.get( 0 ).focus();\n\t\t}\n\t}\n\n\t/**\n\t * Hides the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @param {Boolean} [focusEditable=false] When `true`, the editable will be focused after hiding the panel.\n\t */\n\t_hidePanel( focusEditable ) {\n\t\tthis.panelView.isVisible = false;\n\n\t\tif ( focusEditable ) {\n\t\t\tthis.editor.editing.view.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the {@link #buttonView} to the target block of content.\n\t *\n\t * @protected\n\t * @param {HTMLElement} targetElement Target element.\n\t */\n\t_attachButtonToElement( targetElement ) {\n\t\tconst contentStyles = window.getComputedStyle( targetElement );\n\n\t\tconst editableRect = new Rect( this.editor.ui.getEditableElement() );\n\t\tconst contentPaddingTop = parseInt( contentStyles.paddingTop, 10 );\n\t\t// When line height is not an integer then thread it as \"normal\".\n\t\t// MDN says that 'normal' == ~1.2 on desktop browsers.\n\t\tconst contentLineHeight = parseInt( contentStyles.lineHeight, 10 ) || parseInt( contentStyles.fontSize, 10 ) * 1.2;\n\n\t\tconst position = getOptimalPosition( {\n\t\t\telement: this.buttonView.element,\n\t\t\ttarget: targetElement,\n\t\t\tpositions: [\n\t\t\t\t( contentRect, buttonRect ) => {\n\t\t\t\t\tlet left;\n\n\t\t\t\t\tif ( this.editor.locale.uiLanguageDirection === 'ltr' ) {\n\t\t\t\t\t\tleft = editableRect.left - buttonRect.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tleft = editableRect.right;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttop: contentRect.top + contentPaddingTop + ( contentLineHeight - buttonRect.height ) / 2,\n\t\t\t\t\t\tleft\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\tthis.buttonView.top = position.top;\n\t\tthis.buttonView.left = position.left;\n\t}\n\n\t/**\n\t * Gets the {@link #toolbarView} max-width, based on\n\t * editable width plus distance between farthest edge of the {@link #buttonView} and the editable.\n\t *\n\t * @private\n\t * @returns {String} maxWidth A maximum width that toolbar can have, in pixels.\n\t */\n\t_getToolbarMaxWidth() {\n\t\tconst editableElement = this.editor.ui.view.editable.element;\n\t\tconst editableRect = new Rect( editableElement );\n\t\tconst buttonRect = new Rect( this.buttonView.element );\n\t\tconst isRTL = this.editor.locale.uiLanguageDirection === 'rtl';\n\t\tconst offset = isRTL ? ( buttonRect.left - editableRect.right ) + buttonRect.width : editableRect.left - buttonRect.left;\n\n\t\treturn toPx( editableRect.width + offset );\n\t}\n}\n\n/**\n * The block toolbar configuration. Used by the {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}\n * feature.\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * ## Configuring items grouping\n *\n * You can prevent automatic items grouping by setting the `shouldNotGroupWhenFull` option:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: {\n *\t\t\t\titems: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ],\n *\t\t\t\tshouldNotGroupWhenFull: true\n *\t\t\t},\n *\t\t};\n *\n * Read more about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#blockToolbar\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}